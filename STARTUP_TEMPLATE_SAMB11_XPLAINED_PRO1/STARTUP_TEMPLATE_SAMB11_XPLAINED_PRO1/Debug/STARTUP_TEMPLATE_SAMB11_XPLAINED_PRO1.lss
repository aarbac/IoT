
STARTUP_TEMPLATE_SAMB11_XPLAINED_PRO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008f74  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000006c  10010f74  10010f74  00010f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002cb8  10010fe0  10010fe0  00010fe0  2**2
                  ALLOC
  3 .stack        00000800  10013c98  10013c98  00010fe0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010fe0  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00011008  2**0
                  CONTENTS, READONLY
  6 .debug_info   00020f8b  00000000  00000000  000110bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002782  00000000  00000000  00032047  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000053fe  00000000  00000000  000347c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006b0  00000000  00000000  00039bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000006e8  00000000  00000000  0003a277  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00006bdc  00000000  00000000  0003a95f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a517  00000000  00000000  0004153b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00109494  00000000  00000000  0004ba52  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001ad8  00000000  00000000  00154ee8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10010f74 	.word	0x10010f74
10008068:	10010f74 	.word	0x10010f74
1000806c:	10010fe0 	.word	0x10010fe0
10008070:	10013c98 	.word	0x10013c98
10008074:	10010fe0 	.word	0x10010fe0
10008078:	10010f78 	.word	0x10010f78
1000807c:	10010fe4 	.word	0x10010fe4
10008080:	1000f141 	.word	0x1000f141
10008084:	1000b449 	.word	0x1000b449

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10010fe0 	.word	0x10010fe0
100080a8:	00000000 	.word	0x00000000
100080ac:	10010f74 	.word	0x10010f74

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10010fe4 	.word	0x10010fe4
100080dc:	10010f74 	.word	0x10010f74
100080e0:	10010f74 	.word	0x10010f74
100080e4:	00000000 	.word	0x00000000

100080e8 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
100080e8:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
100080ea:	4b0d      	ldr	r3, [pc, #52]	; (10008120 <dualtimer_isr_handler+0x38>)
100080ec:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
100080ee:	2b00      	cmp	r3, #0
100080f0:	d007      	beq.n	10008102 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
100080f2:	2201      	movs	r2, #1
100080f4:	4b0a      	ldr	r3, [pc, #40]	; (10008120 <dualtimer_isr_handler+0x38>)
100080f6:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
100080f8:	4b0a      	ldr	r3, [pc, #40]	; (10008124 <dualtimer_isr_handler+0x3c>)
100080fa:	681b      	ldr	r3, [r3, #0]
100080fc:	2b00      	cmp	r3, #0
100080fe:	d000      	beq.n	10008102 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
10008100:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10008102:	2334      	movs	r3, #52	; 0x34
10008104:	4a06      	ldr	r2, [pc, #24]	; (10008120 <dualtimer_isr_handler+0x38>)
10008106:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10008108:	2b00      	cmp	r3, #0
1000810a:	d007      	beq.n	1000811c <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000810c:	2101      	movs	r1, #1
1000810e:	232c      	movs	r3, #44	; 0x2c
10008110:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
10008112:	4b05      	ldr	r3, [pc, #20]	; (10008128 <dualtimer_isr_handler+0x40>)
10008114:	681b      	ldr	r3, [r3, #0]
10008116:	2b00      	cmp	r3, #0
10008118:	d000      	beq.n	1000811c <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000811a:	4798      	blx	r3
	}
}
1000811c:	bd10      	pop	{r4, pc}
1000811e:	46c0      	nop			; (mov r8, r8)
10008120:	40001000 	.word	0x40001000
10008124:	10010ffc 	.word	0x10010ffc
10008128:	10011000 	.word	0x10011000

1000812c <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000812c:	2301      	movs	r3, #1
1000812e:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
10008130:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
10008132:	2202      	movs	r2, #2
10008134:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
10008136:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10008138:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000813a:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000813c:	2200      	movs	r2, #0
1000813e:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008140:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
10008142:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
10008144:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
10008146:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
10008148:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000814a:	7602      	strb	r2, [r0, #24]
}
1000814c:	4770      	bx	lr
1000814e:	46c0      	nop			; (mov r8, r8)

10008150 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008150:	2800      	cmp	r0, #0
10008152:	d105      	bne.n	10008160 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008154:	4a06      	ldr	r2, [pc, #24]	; (10008170 <dualtimer_enable+0x20>)
10008156:	7a11      	ldrb	r1, [r2, #8]
10008158:	2380      	movs	r3, #128	; 0x80
1000815a:	430b      	orrs	r3, r1
1000815c:	7213      	strb	r3, [r2, #8]
1000815e:	e005      	b.n	1000816c <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008160:	4903      	ldr	r1, [pc, #12]	; (10008170 <dualtimer_enable+0x20>)
10008162:	2228      	movs	r2, #40	; 0x28
10008164:	5c88      	ldrb	r0, [r1, r2]
10008166:	2380      	movs	r3, #128	; 0x80
10008168:	4303      	orrs	r3, r0
1000816a:	548b      	strb	r3, [r1, r2]
	}
}
1000816c:	4770      	bx	lr
1000816e:	46c0      	nop			; (mov r8, r8)
10008170:	40001000 	.word	0x40001000

10008174 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008174:	2800      	cmp	r0, #0
10008176:	d105      	bne.n	10008184 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008178:	4a06      	ldr	r2, [pc, #24]	; (10008194 <dualtimer_disable+0x20>)
1000817a:	7a11      	ldrb	r1, [r2, #8]
1000817c:	237f      	movs	r3, #127	; 0x7f
1000817e:	400b      	ands	r3, r1
10008180:	7213      	strb	r3, [r2, #8]
10008182:	e005      	b.n	10008190 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008184:	4903      	ldr	r1, [pc, #12]	; (10008194 <dualtimer_disable+0x20>)
10008186:	2228      	movs	r2, #40	; 0x28
10008188:	5c88      	ldrb	r0, [r1, r2]
1000818a:	237f      	movs	r3, #127	; 0x7f
1000818c:	4003      	ands	r3, r0
1000818e:	548b      	strb	r3, [r1, r2]
	}
}
10008190:	4770      	bx	lr
10008192:	46c0      	nop			; (mov r8, r8)
10008194:	40001000 	.word	0x40001000

10008198 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
10008198:	b570      	push	{r4, r5, r6, lr}
1000819a:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000819c:	2004      	movs	r0, #4
1000819e:	4b39      	ldr	r3, [pc, #228]	; (10008284 <dualtimer_init+0xec>)
100081a0:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
100081a2:	7823      	ldrb	r3, [r4, #0]
100081a4:	2b00      	cmp	r3, #0
100081a6:	d102      	bne.n	100081ae <dualtimer_init+0x16>
100081a8:	7b23      	ldrb	r3, [r4, #12]
100081aa:	2b00      	cmp	r3, #0
100081ac:	d065      	beq.n	1000827a <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
100081ae:	4936      	ldr	r1, [pc, #216]	; (10008288 <dualtimer_init+0xf0>)
100081b0:	68ca      	ldr	r2, [r1, #12]
100081b2:	2320      	movs	r3, #32
100081b4:	4313      	orrs	r3, r2
100081b6:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CONTROL.bit.DUALTIMER_CLK_SEL = config->clock_source;
100081b8:	7e22      	ldrb	r2, [r4, #24]
100081ba:	698b      	ldr	r3, [r1, #24]
100081bc:	2003      	movs	r0, #3
100081be:	4002      	ands	r2, r0
100081c0:	0112      	lsls	r2, r2, #4
100081c2:	302d      	adds	r0, #45	; 0x2d
100081c4:	4383      	bics	r3, r0
100081c6:	4313      	orrs	r3, r2
100081c8:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
100081ca:	7823      	ldrb	r3, [r4, #0]
100081cc:	2b00      	cmp	r3, #0
100081ce:	d026      	beq.n	1000821e <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
100081d0:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
100081d2:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CONTROL.bit.DUALTIMER_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
100081d4:	2b00      	cmp	r3, #0
100081d6:	d003      	beq.n	100081e0 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
100081d8:	3b02      	subs	r3, #2
100081da:	425d      	negs	r5, r3
100081dc:	415d      	adcs	r5, r3
100081de:	01a9      	lsls	r1, r5, #6
		}
		regval |= DUALTIMER_TIMER1CONTROL_TIMER_SIZE(config->timer1.counter_size) |
100081e0:	78a2      	ldrb	r2, [r4, #2]
100081e2:	0052      	lsls	r2, r2, #1
100081e4:	2502      	movs	r5, #2
100081e6:	402a      	ands	r2, r5
100081e8:	78e3      	ldrb	r3, [r4, #3]
100081ea:	009b      	lsls	r3, r3, #2
100081ec:	350a      	adds	r5, #10
100081ee:	402b      	ands	r3, r5
100081f0:	431a      	orrs	r2, r3
100081f2:	0015      	movs	r5, r2
100081f4:	430d      	orrs	r5, r1
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
100081f6:	7923      	ldrb	r3, [r4, #4]
100081f8:	2b00      	cmp	r3, #0
100081fa:	d001      	beq.n	10008200 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
100081fc:	2320      	movs	r3, #32
100081fe:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008200:	4b22      	ldr	r3, [pc, #136]	; (1000828c <dualtimer_init+0xf4>)
10008202:	68a2      	ldr	r2, [r4, #8]
10008204:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
10008206:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_1_ENABLE;
10008208:	491f      	ldr	r1, [pc, #124]	; (10008288 <dualtimer_init+0xf0>)
1000820a:	22c4      	movs	r2, #196	; 0xc4
1000820c:	0052      	lsls	r2, r2, #1
1000820e:	5c88      	ldrb	r0, [r1, r2]
10008210:	2301      	movs	r3, #1
10008212:	4303      	orrs	r3, r0
10008214:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
10008216:	2000      	movs	r0, #0
10008218:	4b1d      	ldr	r3, [pc, #116]	; (10008290 <dualtimer_init+0xf8>)
1000821a:	4798      	blx	r3
1000821c:	e000      	b.n	10008220 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000821e:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10008220:	7b23      	ldrb	r3, [r4, #12]
10008222:	2b00      	cmp	r3, #0
10008224:	d029      	beq.n	1000827a <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008226:	7b63      	ldrb	r3, [r4, #13]
10008228:	2b00      	cmp	r3, #0
1000822a:	d005      	beq.n	10008238 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000822c:	2b01      	cmp	r3, #1
1000822e:	d005      	beq.n	1000823c <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
10008230:	2b02      	cmp	r3, #2
10008232:	d104      	bne.n	1000823e <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
10008234:	2540      	movs	r5, #64	; 0x40
10008236:	e002      	b.n	1000823e <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10008238:	2501      	movs	r5, #1
1000823a:	e000      	b.n	1000823e <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000823c:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= DUALTIMER_TIMER2CONTROL_TIMER_SIZE(config->timer2.counter_size) |
1000823e:	7ba3      	ldrb	r3, [r4, #14]
10008240:	005b      	lsls	r3, r3, #1
10008242:	2102      	movs	r1, #2
10008244:	4019      	ands	r1, r3
10008246:	7be2      	ldrb	r2, [r4, #15]
10008248:	0092      	lsls	r2, r2, #2
1000824a:	230c      	movs	r3, #12
1000824c:	4013      	ands	r3, r2
1000824e:	430b      	orrs	r3, r1
10008250:	431d      	orrs	r5, r3
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
10008252:	7c23      	ldrb	r3, [r4, #16]
10008254:	2b00      	cmp	r3, #0
10008256:	d001      	beq.n	1000825c <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
10008258:	2320      	movs	r3, #32
1000825a:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000825c:	6962      	ldr	r2, [r4, #20]
1000825e:	4b0b      	ldr	r3, [pc, #44]	; (1000828c <dualtimer_init+0xf4>)
10008260:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
10008262:	2228      	movs	r2, #40	; 0x28
10008264:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_2_ENABLE;
10008266:	4908      	ldr	r1, [pc, #32]	; (10008288 <dualtimer_init+0xf0>)
10008268:	3261      	adds	r2, #97	; 0x61
1000826a:	32ff      	adds	r2, #255	; 0xff
1000826c:	5c88      	ldrb	r0, [r1, r2]
1000826e:	2302      	movs	r3, #2
10008270:	4303      	orrs	r3, r0
10008272:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
10008274:	2001      	movs	r0, #1
10008276:	4b06      	ldr	r3, [pc, #24]	; (10008290 <dualtimer_init+0xf8>)
10008278:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000827a:	4906      	ldr	r1, [pc, #24]	; (10008294 <dualtimer_init+0xfc>)
1000827c:	201e      	movs	r0, #30
1000827e:	4b06      	ldr	r3, [pc, #24]	; (10008298 <dualtimer_init+0x100>)
10008280:	4798      	blx	r3
}
10008282:	bd70      	pop	{r4, r5, r6, pc}
10008284:	10008cd9 	.word	0x10008cd9
10008288:	4000b000 	.word	0x4000b000
1000828c:	40001000 	.word	0x40001000
10008290:	10008151 	.word	0x10008151
10008294:	100080e9 	.word	0x100080e9
10008298:	10009141 	.word	0x10009141

1000829c <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000829c:	2800      	cmp	r0, #0
1000829e:	d102      	bne.n	100082a6 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
100082a0:	4b02      	ldr	r3, [pc, #8]	; (100082ac <dualtimer_register_callback+0x10>)
100082a2:	6019      	str	r1, [r3, #0]
100082a4:	e001      	b.n	100082aa <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
100082a6:	4b02      	ldr	r3, [pc, #8]	; (100082b0 <dualtimer_register_callback+0x14>)
100082a8:	6019      	str	r1, [r3, #0]
	}
}
100082aa:	4770      	bx	lr
100082ac:	10010ffc 	.word	0x10010ffc
100082b0:	10011000 	.word	0x10011000

100082b4 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
100082b4:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
100082b6:	4b16      	ldr	r3, [pc, #88]	; (10008310 <gpio_port0_isr_handler+0x5c>)
100082b8:	681d      	ldr	r5, [r3, #0]
100082ba:	8f29      	ldrh	r1, [r5, #56]	; 0x38
100082bc:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
100082be:	07cb      	lsls	r3, r1, #31
100082c0:	d407      	bmi.n	100082d2 <gpio_port0_isr_handler+0x1e>
100082c2:	2301      	movs	r3, #1
100082c4:	2401      	movs	r4, #1
100082c6:	0018      	movs	r0, r3
100082c8:	0022      	movs	r2, r4
100082ca:	409a      	lsls	r2, r3
100082cc:	4211      	tst	r1, r2
100082ce:	d014      	beq.n	100082fa <gpio_port0_isr_handler+0x46>
100082d0:	e001      	b.n	100082d6 <gpio_port0_isr_handler+0x22>
100082d2:	2201      	movs	r2, #1
100082d4:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
100082d6:	b292      	uxth	r2, r2
100082d8:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
100082da:	2346      	movs	r3, #70	; 0x46
100082dc:	4a0c      	ldr	r2, [pc, #48]	; (10008310 <gpio_port0_isr_handler+0x5c>)
100082de:	5ad3      	ldrh	r3, [r2, r3]
100082e0:	4103      	asrs	r3, r0
100082e2:	07db      	lsls	r3, r3, #31
100082e4:	d50c      	bpl.n	10008300 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
100082e6:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
100082e8:	5ad3      	ldrh	r3, [r2, r3]
100082ea:	4103      	asrs	r3, r0
100082ec:	07db      	lsls	r3, r3, #31
100082ee:	d507      	bpl.n	10008300 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
100082f0:	0080      	lsls	r0, r0, #2
100082f2:	1810      	adds	r0, r2, r0
100082f4:	6843      	ldr	r3, [r0, #4]
100082f6:	4798      	blx	r3
100082f8:	e002      	b.n	10008300 <gpio_port0_isr_handler+0x4c>
100082fa:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
100082fc:	2b10      	cmp	r3, #16
100082fe:	d1e2      	bne.n	100082c6 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008300:	2180      	movs	r1, #128	; 0x80
10008302:	0409      	lsls	r1, r1, #16
10008304:	23c0      	movs	r3, #192	; 0xc0
10008306:	005b      	lsls	r3, r3, #1
10008308:	4a02      	ldr	r2, [pc, #8]	; (10008314 <gpio_port0_isr_handler+0x60>)
1000830a:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000830c:	bd70      	pop	{r4, r5, r6, pc}
1000830e:	46c0      	nop			; (mov r8, r8)
10008310:	10012aa4 	.word	0x10012aa4
10008314:	e000e100 	.word	0xe000e100

10008318 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
10008318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000831a:	4b18      	ldr	r3, [pc, #96]	; (1000837c <gpio_port1_isr_handler+0x64>)
1000831c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000831e:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
10008320:	b2b6      	uxth	r6, r6
10008322:	0037      	movs	r7, r6
10008324:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
10008326:	0b76      	lsrs	r6, r6, #13
10008328:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000832a:	4d14      	ldr	r5, [pc, #80]	; (1000837c <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000832c:	2e00      	cmp	r6, #0
1000832e:	d001      	beq.n	10008334 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
10008330:	4b13      	ldr	r3, [pc, #76]	; (10008380 <gpio_port1_isr_handler+0x68>)
10008332:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
10008334:	0022      	movs	r2, r4
10008336:	2301      	movs	r3, #1
10008338:	40a3      	lsls	r3, r4
1000833a:	421f      	tst	r7, r3
1000833c:	d013      	beq.n	10008366 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000833e:	b29b      	uxth	r3, r3
10008340:	6ca9      	ldr	r1, [r5, #72]	; 0x48
10008342:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
10008344:	238e      	movs	r3, #142	; 0x8e
10008346:	5aeb      	ldrh	r3, [r5, r3]
10008348:	4123      	asrs	r3, r4
1000834a:	07db      	lsls	r3, r3, #31
1000834c:	d50b      	bpl.n	10008366 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000834e:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
10008350:	490a      	ldr	r1, [pc, #40]	; (1000837c <gpio_port1_isr_handler+0x64>)
10008352:	5acb      	ldrh	r3, [r1, r3]
10008354:	4123      	asrs	r3, r4
10008356:	07db      	lsls	r3, r3, #31
10008358:	d505      	bpl.n	10008366 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000835a:	3212      	adds	r2, #18
1000835c:	0092      	lsls	r2, r2, #2
1000835e:	188a      	adds	r2, r1, r2
10008360:	6853      	ldr	r3, [r2, #4]
10008362:	4798      	blx	r3
				break;
10008364:	e002      	b.n	1000836c <gpio_port1_isr_handler+0x54>
10008366:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
10008368:	2c10      	cmp	r4, #16
1000836a:	d1df      	bne.n	1000832c <gpio_port1_isr_handler+0x14>
1000836c:	2180      	movs	r1, #128	; 0x80
1000836e:	0449      	lsls	r1, r1, #17
10008370:	23c0      	movs	r3, #192	; 0xc0
10008372:	005b      	lsls	r3, r3, #1
10008374:	4a03      	ldr	r2, [pc, #12]	; (10008384 <gpio_port1_isr_handler+0x6c>)
10008376:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
10008378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000837a:	46c0      	nop			; (mov r8, r8)
1000837c:	10012aa4 	.word	0x10012aa4
10008380:	0001bc51 	.word	0x0001bc51
10008384:	e000e100 	.word	0xe000e100

10008388 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
10008388:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000838a:	2390      	movs	r3, #144	; 0x90
1000838c:	4a1b      	ldr	r2, [pc, #108]	; (100083fc <gpio_port2_isr_handler+0x74>)
1000838e:	58d2      	ldr	r2, [r2, r3]
10008390:	8f13      	ldrh	r3, [r2, #56]	; 0x38
10008392:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
10008394:	04d9      	lsls	r1, r3, #19
10008396:	d414      	bmi.n	100083c2 <gpio_port2_isr_handler+0x3a>
10008398:	0499      	lsls	r1, r3, #18
1000839a:	d40a      	bmi.n	100083b2 <gpio_port2_isr_handler+0x2a>
1000839c:	0459      	lsls	r1, r3, #17
1000839e:	d40c      	bmi.n	100083ba <gpio_port2_isr_handler+0x32>
100083a0:	0bdb      	lsrs	r3, r3, #15
100083a2:	03db      	lsls	r3, r3, #15
100083a4:	b29b      	uxth	r3, r3
100083a6:	2b00      	cmp	r3, #0
100083a8:	d020      	beq.n	100083ec <gpio_port2_isr_handler+0x64>
100083aa:	2380      	movs	r3, #128	; 0x80
100083ac:	021b      	lsls	r3, r3, #8
100083ae:	210f      	movs	r1, #15
100083b0:	e00a      	b.n	100083c8 <gpio_port2_isr_handler+0x40>
100083b2:	2380      	movs	r3, #128	; 0x80
100083b4:	019b      	lsls	r3, r3, #6
100083b6:	210d      	movs	r1, #13
100083b8:	e006      	b.n	100083c8 <gpio_port2_isr_handler+0x40>
100083ba:	2380      	movs	r3, #128	; 0x80
100083bc:	01db      	lsls	r3, r3, #7
100083be:	210e      	movs	r1, #14
100083c0:	e002      	b.n	100083c8 <gpio_port2_isr_handler+0x40>
100083c2:	2380      	movs	r3, #128	; 0x80
100083c4:	015b      	lsls	r3, r3, #5
100083c6:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
100083c8:	b29b      	uxth	r3, r3
100083ca:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
100083cc:	23d6      	movs	r3, #214	; 0xd6
100083ce:	4a0b      	ldr	r2, [pc, #44]	; (100083fc <gpio_port2_isr_handler+0x74>)
100083d0:	5ad3      	ldrh	r3, [r2, r3]
100083d2:	410b      	asrs	r3, r1
100083d4:	07db      	lsls	r3, r3, #31
100083d6:	d509      	bpl.n	100083ec <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
100083d8:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
100083da:	5ad3      	ldrh	r3, [r2, r3]
100083dc:	410b      	asrs	r3, r1
100083de:	07db      	lsls	r3, r3, #31
100083e0:	d504      	bpl.n	100083ec <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
100083e2:	3124      	adds	r1, #36	; 0x24
100083e4:	0089      	lsls	r1, r1, #2
100083e6:	1851      	adds	r1, r2, r1
100083e8:	684b      	ldr	r3, [r1, #4]
100083ea:	4798      	blx	r3
100083ec:	2180      	movs	r1, #128	; 0x80
100083ee:	0489      	lsls	r1, r1, #18
100083f0:	23c0      	movs	r3, #192	; 0xc0
100083f2:	005b      	lsls	r3, r3, #1
100083f4:	4a02      	ldr	r2, [pc, #8]	; (10008400 <gpio_port2_isr_handler+0x78>)
100083f6:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
100083f8:	bd10      	pop	{r4, pc}
100083fa:	46c0      	nop			; (mov r8, r8)
100083fc:	10012aa4 	.word	0x10012aa4
10008400:	e000e100 	.word	0xe000e100

10008404 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
10008404:	2300      	movs	r3, #0
10008406:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
10008408:	2201      	movs	r2, #1
1000840a:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000840c:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000840e:	70c3      	strb	r3, [r0, #3]
}
10008410:	4770      	bx	lr
10008412:	46c0      	nop			; (mov r8, r8)

10008414 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
10008414:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
10008416:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
10008418:	2801      	cmp	r0, #1
1000841a:	d800      	bhi.n	1000841e <gpio_pin_set_config+0xa>
1000841c:	e0c8      	b.n	100085b0 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000841e:	2807      	cmp	r0, #7
10008420:	d809      	bhi.n	10008436 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008422:	4d64      	ldr	r5, [pc, #400]	; (100085b4 <gpio_pin_set_config+0x1a0>)
10008424:	6c6a      	ldr	r2, [r5, #68]	; 0x44
10008426:	3b10      	subs	r3, #16
10008428:	4003      	ands	r3, r0
1000842a:	009b      	lsls	r3, r3, #2
1000842c:	2407      	movs	r4, #7
1000842e:	409c      	lsls	r4, r3
10008430:	43a2      	bics	r2, r4
10008432:	646a      	str	r2, [r5, #68]	; 0x44
10008434:	e029      	b.n	1000848a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
10008436:	280f      	cmp	r0, #15
10008438:	d809      	bhi.n	1000844e <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000843a:	4d5e      	ldr	r5, [pc, #376]	; (100085b4 <gpio_pin_set_config+0x1a0>)
1000843c:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000843e:	2307      	movs	r3, #7
10008440:	4003      	ands	r3, r0
10008442:	009b      	lsls	r3, r3, #2
10008444:	2407      	movs	r4, #7
10008446:	409c      	lsls	r4, r3
10008448:	43a2      	bics	r2, r4
1000844a:	64aa      	str	r2, [r5, #72]	; 0x48
1000844c:	e01d      	b.n	1000848a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000844e:	2817      	cmp	r0, #23
10008450:	d809      	bhi.n	10008466 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008452:	4d58      	ldr	r5, [pc, #352]	; (100085b4 <gpio_pin_set_config+0x1a0>)
10008454:	6cea      	ldr	r2, [r5, #76]	; 0x4c
10008456:	2307      	movs	r3, #7
10008458:	4003      	ands	r3, r0
1000845a:	009b      	lsls	r3, r3, #2
1000845c:	2407      	movs	r4, #7
1000845e:	409c      	lsls	r4, r3
10008460:	43a2      	bics	r2, r4
10008462:	64ea      	str	r2, [r5, #76]	; 0x4c
10008464:	e011      	b.n	1000848a <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
10008466:	0003      	movs	r3, r0
10008468:	3b2c      	subs	r3, #44	; 0x2c
1000846a:	2b03      	cmp	r3, #3
1000846c:	d80d      	bhi.n	1000848a <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000846e:	4d52      	ldr	r5, [pc, #328]	; (100085b8 <gpio_pin_set_config+0x1a4>)
10008470:	2482      	movs	r4, #130	; 0x82
10008472:	00e4      	lsls	r4, r4, #3
10008474:	5d2a      	ldrb	r2, [r5, r4]
10008476:	0712      	lsls	r2, r2, #28
10008478:	2601      	movs	r6, #1
1000847a:	409e      	lsls	r6, r3
1000847c:	0f12      	lsrs	r2, r2, #28
1000847e:	5d2b      	ldrb	r3, [r5, r4]
10008480:	43b2      	bics	r2, r6
10008482:	260f      	movs	r6, #15
10008484:	43b3      	bics	r3, r6
10008486:	4313      	orrs	r3, r2
10008488:	552b      	strb	r3, [r5, r4]
		}
		
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000848a:	0003      	movs	r3, r0
1000848c:	3b1d      	subs	r3, #29
1000848e:	2b02      	cmp	r3, #2
10008490:	d829      	bhi.n	100084e6 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
10008492:	784b      	ldrb	r3, [r1, #1]
10008494:	2b01      	cmp	r3, #1
10008496:	d108      	bne.n	100084aa <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
10008498:	4d47      	ldr	r5, [pc, #284]	; (100085b8 <gpio_pin_set_config+0x1a4>)
1000849a:	7d2b      	ldrb	r3, [r5, #20]
1000849c:	241f      	movs	r4, #31
1000849e:	1a24      	subs	r4, r4, r0
100084a0:	2201      	movs	r2, #1
100084a2:	40a2      	lsls	r2, r4
100084a4:	4393      	bics	r3, r2
100084a6:	752b      	strb	r3, [r5, #20]
100084a8:	e008      	b.n	100084bc <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
100084aa:	4c43      	ldr	r4, [pc, #268]	; (100085b8 <gpio_pin_set_config+0x1a4>)
100084ac:	7d25      	ldrb	r5, [r4, #20]
100084ae:	221f      	movs	r2, #31
100084b0:	1a12      	subs	r2, r2, r0
100084b2:	2301      	movs	r3, #1
100084b4:	4093      	lsls	r3, r2
100084b6:	432b      	orrs	r3, r5
100084b8:	b2db      	uxtb	r3, r3
100084ba:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
100084bc:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100084be:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
100084c0:	2a00      	cmp	r2, #0
100084c2:	d075      	beq.n	100085b0 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
100084c4:	493c      	ldr	r1, [pc, #240]	; (100085b8 <gpio_pin_set_config+0x1a4>)
100084c6:	880c      	ldrh	r4, [r1, #0]
100084c8:	221f      	movs	r2, #31
100084ca:	1a10      	subs	r0, r2, r0
100084cc:	0080      	lsls	r0, r0, #2
100084ce:	3301      	adds	r3, #1
100084d0:	4083      	lsls	r3, r0
100084d2:	4323      	orrs	r3, r4
100084d4:	b29b      	uxth	r3, r3
100084d6:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
100084d8:	4a38      	ldr	r2, [pc, #224]	; (100085bc <gpio_pin_set_config+0x1a8>)
100084da:	7811      	ldrb	r1, [r2, #0]
100084dc:	2302      	movs	r3, #2
100084de:	430b      	orrs	r3, r1
100084e0:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100084e2:	2300      	movs	r3, #0
100084e4:	e064      	b.n	100085b0 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
100084e6:	780a      	ldrb	r2, [r1, #0]
100084e8:	2a00      	cmp	r2, #0
100084ea:	d140      	bne.n	1000856e <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
100084ec:	280f      	cmp	r0, #15
100084ee:	d808      	bhi.n	10008502 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
100084f0:	2301      	movs	r3, #1
100084f2:	4083      	lsls	r3, r0
100084f4:	b29b      	uxth	r3, r3
100084f6:	4a32      	ldr	r2, [pc, #200]	; (100085c0 <gpio_pin_set_config+0x1ac>)
100084f8:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100084fa:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
100084fc:	281f      	cmp	r0, #31
100084fe:	d857      	bhi.n	100085b0 <gpio_pin_set_config+0x19c>
10008500:	e012      	b.n	10008528 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
10008502:	281f      	cmp	r0, #31
10008504:	d807      	bhi.n	10008516 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
10008506:	220f      	movs	r2, #15
10008508:	4002      	ands	r2, r0
1000850a:	2301      	movs	r3, #1
1000850c:	4093      	lsls	r3, r2
1000850e:	b29b      	uxth	r3, r3
10008510:	4a2c      	ldr	r2, [pc, #176]	; (100085c4 <gpio_pin_set_config+0x1b0>)
10008512:	8293      	strh	r3, [r2, #20]
10008514:	e008      	b.n	10008528 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
10008516:	230f      	movs	r3, #15
10008518:	4018      	ands	r0, r3
1000851a:	3b0e      	subs	r3, #14
1000851c:	4083      	lsls	r3, r0
1000851e:	b29b      	uxth	r3, r3
10008520:	4a29      	ldr	r2, [pc, #164]	; (100085c8 <gpio_pin_set_config+0x1b4>)
10008522:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008524:	2300      	movs	r3, #0
10008526:	e043      	b.n	100085b0 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
10008528:	784b      	ldrb	r3, [r1, #1]
1000852a:	2b01      	cmp	r3, #1
1000852c:	d00c      	beq.n	10008548 <gpio_pin_set_config+0x134>
1000852e:	2b00      	cmp	r3, #0
10008530:	d002      	beq.n	10008538 <gpio_pin_set_config+0x124>
10008532:	2b02      	cmp	r3, #2
10008534:	d010      	beq.n	10008558 <gpio_pin_set_config+0x144>
10008536:	e03a      	b.n	100085ae <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
10008538:	491e      	ldr	r1, [pc, #120]	; (100085b4 <gpio_pin_set_config+0x1a0>)
1000853a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000853c:	2301      	movs	r3, #1
1000853e:	4083      	lsls	r3, r0
10008540:	4313      	orrs	r3, r2
10008542:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008544:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
10008546:	e033      	b.n	100085b0 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008548:	491a      	ldr	r1, [pc, #104]	; (100085b4 <gpio_pin_set_config+0x1a0>)
1000854a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000854c:	2201      	movs	r2, #1
1000854e:	4082      	lsls	r2, r0
10008550:	4393      	bics	r3, r2
10008552:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008554:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
10008556:	e02b      	b.n	100085b0 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
10008558:	4b16      	ldr	r3, [pc, #88]	; (100085b4 <gpio_pin_set_config+0x1a0>)
1000855a:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000855c:	2201      	movs	r2, #1
1000855e:	4082      	lsls	r2, r0
10008560:	4311      	orrs	r1, r2
10008562:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008564:	6d19      	ldr	r1, [r3, #80]	; 0x50
10008566:	4391      	bics	r1, r2
10008568:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000856a:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000856c:	e020      	b.n	100085b0 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000856e:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
10008570:	2a01      	cmp	r2, #1
10008572:	d11d      	bne.n	100085b0 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
10008574:	280f      	cmp	r0, #15
10008576:	d806      	bhi.n	10008586 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
10008578:	3301      	adds	r3, #1
1000857a:	4083      	lsls	r3, r0
1000857c:	b29b      	uxth	r3, r3
1000857e:	4a10      	ldr	r2, [pc, #64]	; (100085c0 <gpio_pin_set_config+0x1ac>)
10008580:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008582:	2300      	movs	r3, #0
10008584:	e014      	b.n	100085b0 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
10008586:	281f      	cmp	r0, #31
10008588:	d808      	bhi.n	1000859c <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000858a:	230f      	movs	r3, #15
1000858c:	4018      	ands	r0, r3
1000858e:	3b0e      	subs	r3, #14
10008590:	4083      	lsls	r3, r0
10008592:	b29b      	uxth	r3, r3
10008594:	4a0b      	ldr	r2, [pc, #44]	; (100085c4 <gpio_pin_set_config+0x1b0>)
10008596:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008598:	2300      	movs	r3, #0
1000859a:	e009      	b.n	100085b0 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000859c:	230f      	movs	r3, #15
1000859e:	4018      	ands	r0, r3
100085a0:	3b0e      	subs	r3, #14
100085a2:	4083      	lsls	r3, r0
100085a4:	b29b      	uxth	r3, r3
100085a6:	4a08      	ldr	r2, [pc, #32]	; (100085c8 <gpio_pin_set_config+0x1b4>)
100085a8:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100085aa:	2300      	movs	r3, #0
100085ac:	e000      	b.n	100085b0 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
100085ae:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
100085b0:	0018      	movs	r0, r3
100085b2:	bd70      	pop	{r4, r5, r6, pc}
100085b4:	4000b000 	.word	0x4000b000
100085b8:	4000f000 	.word	0x4000f000
100085bc:	4000e000 	.word	0x4000e000
100085c0:	40010000 	.word	0x40010000
100085c4:	40011000 	.word	0x40011000
100085c8:	40013000 	.word	0x40013000

100085cc <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
100085cc:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
100085ce:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
100085d0:	23ff      	movs	r3, #255	; 0xff
100085d2:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
100085d4:	2807      	cmp	r0, #7
100085d6:	d833      	bhi.n	10008640 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
100085d8:	4a4e      	ldr	r2, [pc, #312]	; (10008714 <gpio_pinmux_cofiguration+0x148>)
100085da:	6c54      	ldr	r4, [r2, #68]	; 0x44
100085dc:	3bf8      	subs	r3, #248	; 0xf8
100085de:	4003      	ands	r3, r0
100085e0:	009b      	lsls	r3, r3, #2
100085e2:	2607      	movs	r6, #7
100085e4:	409e      	lsls	r6, r3
100085e6:	43b4      	bics	r4, r6
100085e8:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
100085ea:	6c54      	ldr	r4, [r2, #68]	; 0x44
100085ec:	000e      	movs	r6, r1
100085ee:	409e      	lsls	r6, r3
100085f0:	0033      	movs	r3, r6
100085f2:	4323      	orrs	r3, r4
100085f4:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
100085f6:	2901      	cmp	r1, #1
100085f8:	d000      	beq.n	100085fc <gpio_pinmux_cofiguration+0x30>
100085fa:	e08a      	b.n	10008712 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
100085fc:	2803      	cmp	r0, #3
100085fe:	d80f      	bhi.n	10008620 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008600:	0011      	movs	r1, r2
10008602:	22d0      	movs	r2, #208	; 0xd0
10008604:	0052      	lsls	r2, r2, #1
10008606:	588c      	ldr	r4, [r1, r2]
10008608:	2303      	movs	r3, #3
1000860a:	4018      	ands	r0, r3
1000860c:	00c0      	lsls	r0, r0, #3
1000860e:	333c      	adds	r3, #60	; 0x3c
10008610:	4083      	lsls	r3, r0
10008612:	439c      	bics	r4, r3
10008614:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008616:	588b      	ldr	r3, [r1, r2]
10008618:	4085      	lsls	r5, r0
1000861a:	431d      	orrs	r5, r3
1000861c:	508d      	str	r5, [r1, r2]
1000861e:	e078      	b.n	10008712 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008620:	493c      	ldr	r1, [pc, #240]	; (10008714 <gpio_pinmux_cofiguration+0x148>)
10008622:	22d2      	movs	r2, #210	; 0xd2
10008624:	0052      	lsls	r2, r2, #1
10008626:	588c      	ldr	r4, [r1, r2]
10008628:	2303      	movs	r3, #3
1000862a:	4018      	ands	r0, r3
1000862c:	00c0      	lsls	r0, r0, #3
1000862e:	333c      	adds	r3, #60	; 0x3c
10008630:	4083      	lsls	r3, r0
10008632:	439c      	bics	r4, r3
10008634:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008636:	588b      	ldr	r3, [r1, r2]
10008638:	4085      	lsls	r5, r0
1000863a:	431d      	orrs	r5, r3
1000863c:	508d      	str	r5, [r1, r2]
1000863e:	e068      	b.n	10008712 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
10008640:	280f      	cmp	r0, #15
10008642:	d832      	bhi.n	100086aa <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008644:	4a33      	ldr	r2, [pc, #204]	; (10008714 <gpio_pinmux_cofiguration+0x148>)
10008646:	6c94      	ldr	r4, [r2, #72]	; 0x48
10008648:	2307      	movs	r3, #7
1000864a:	4003      	ands	r3, r0
1000864c:	009b      	lsls	r3, r3, #2
1000864e:	2607      	movs	r6, #7
10008650:	409e      	lsls	r6, r3
10008652:	43b4      	bics	r4, r6
10008654:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008656:	6c94      	ldr	r4, [r2, #72]	; 0x48
10008658:	000e      	movs	r6, r1
1000865a:	409e      	lsls	r6, r3
1000865c:	0033      	movs	r3, r6
1000865e:	4323      	orrs	r3, r4
10008660:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
10008662:	2901      	cmp	r1, #1
10008664:	d155      	bne.n	10008712 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
10008666:	280b      	cmp	r0, #11
10008668:	d80f      	bhi.n	1000868a <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000866a:	0011      	movs	r1, r2
1000866c:	22d4      	movs	r2, #212	; 0xd4
1000866e:	0052      	lsls	r2, r2, #1
10008670:	588c      	ldr	r4, [r1, r2]
10008672:	2303      	movs	r3, #3
10008674:	4018      	ands	r0, r3
10008676:	00c0      	lsls	r0, r0, #3
10008678:	333c      	adds	r3, #60	; 0x3c
1000867a:	4083      	lsls	r3, r0
1000867c:	439c      	bics	r4, r3
1000867e:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008680:	588b      	ldr	r3, [r1, r2]
10008682:	4085      	lsls	r5, r0
10008684:	431d      	orrs	r5, r3
10008686:	508d      	str	r5, [r1, r2]
10008688:	e043      	b.n	10008712 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000868a:	4922      	ldr	r1, [pc, #136]	; (10008714 <gpio_pinmux_cofiguration+0x148>)
1000868c:	22d6      	movs	r2, #214	; 0xd6
1000868e:	0052      	lsls	r2, r2, #1
10008690:	588c      	ldr	r4, [r1, r2]
10008692:	2303      	movs	r3, #3
10008694:	4018      	ands	r0, r3
10008696:	00c0      	lsls	r0, r0, #3
10008698:	333c      	adds	r3, #60	; 0x3c
1000869a:	4083      	lsls	r3, r0
1000869c:	439c      	bics	r4, r3
1000869e:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100086a0:	588b      	ldr	r3, [r1, r2]
100086a2:	4085      	lsls	r5, r0
100086a4:	431d      	orrs	r5, r3
100086a6:	508d      	str	r5, [r1, r2]
100086a8:	e033      	b.n	10008712 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
100086aa:	2817      	cmp	r0, #23
100086ac:	d831      	bhi.n	10008712 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
100086ae:	4a19      	ldr	r2, [pc, #100]	; (10008714 <gpio_pinmux_cofiguration+0x148>)
100086b0:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
100086b2:	2307      	movs	r3, #7
100086b4:	4003      	ands	r3, r0
100086b6:	009b      	lsls	r3, r3, #2
100086b8:	2607      	movs	r6, #7
100086ba:	409e      	lsls	r6, r3
100086bc:	43b4      	bics	r4, r6
100086be:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
100086c0:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
100086c2:	000e      	movs	r6, r1
100086c4:	409e      	lsls	r6, r3
100086c6:	0033      	movs	r3, r6
100086c8:	4323      	orrs	r3, r4
100086ca:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
100086cc:	2901      	cmp	r1, #1
100086ce:	d120      	bne.n	10008712 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
100086d0:	2813      	cmp	r0, #19
100086d2:	d80f      	bhi.n	100086f4 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100086d4:	0011      	movs	r1, r2
100086d6:	22d8      	movs	r2, #216	; 0xd8
100086d8:	0052      	lsls	r2, r2, #1
100086da:	588c      	ldr	r4, [r1, r2]
100086dc:	2303      	movs	r3, #3
100086de:	4018      	ands	r0, r3
100086e0:	00c0      	lsls	r0, r0, #3
100086e2:	333c      	adds	r3, #60	; 0x3c
100086e4:	4083      	lsls	r3, r0
100086e6:	439c      	bics	r4, r3
100086e8:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100086ea:	588b      	ldr	r3, [r1, r2]
100086ec:	4085      	lsls	r5, r0
100086ee:	431d      	orrs	r5, r3
100086f0:	508d      	str	r5, [r1, r2]
100086f2:	e00e      	b.n	10008712 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100086f4:	4a07      	ldr	r2, [pc, #28]	; (10008714 <gpio_pinmux_cofiguration+0x148>)
100086f6:	23da      	movs	r3, #218	; 0xda
100086f8:	005b      	lsls	r3, r3, #1
100086fa:	58d1      	ldr	r1, [r2, r3]
100086fc:	2403      	movs	r4, #3
100086fe:	4020      	ands	r0, r4
10008700:	00c0      	lsls	r0, r0, #3
10008702:	343c      	adds	r4, #60	; 0x3c
10008704:	4084      	lsls	r4, r0
10008706:	43a1      	bics	r1, r4
10008708:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000870a:	58d1      	ldr	r1, [r2, r3]
1000870c:	4085      	lsls	r5, r0
1000870e:	430d      	orrs	r5, r1
10008710:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
10008712:	bd70      	pop	{r4, r5, r6, pc}
10008714:	4000b000 	.word	0x4000b000

10008718 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
10008718:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000871a:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000871c:	280f      	cmp	r0, #15
1000871e:	d904      	bls.n	1000872a <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
10008720:	241f      	movs	r4, #31
10008722:	4284      	cmp	r4, r0
10008724:	415b      	adcs	r3, r3
10008726:	3c1d      	subs	r4, #29
10008728:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000872a:	2a01      	cmp	r2, #1
1000872c:	d016      	beq.n	1000875c <gpio_register_callback+0x44>
1000872e:	2a00      	cmp	r2, #0
10008730:	d004      	beq.n	1000873c <gpio_register_callback+0x24>
10008732:	2a02      	cmp	r2, #2
10008734:	d022      	beq.n	1000877c <gpio_register_callback+0x64>
10008736:	2a03      	cmp	r2, #3
10008738:	d030      	beq.n	1000879c <gpio_register_callback+0x84>
1000873a:	e03e      	b.n	100087ba <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000873c:	4e29      	ldr	r6, [pc, #164]	; (100087e4 <gpio_register_callback+0xcc>)
1000873e:	00dc      	lsls	r4, r3, #3
10008740:	18e2      	adds	r2, r4, r3
10008742:	00d2      	lsls	r2, r2, #3
10008744:	5997      	ldr	r7, [r2, r6]
10008746:	250f      	movs	r5, #15
10008748:	4005      	ands	r5, r0
1000874a:	2201      	movs	r2, #1
1000874c:	40aa      	lsls	r2, r5
1000874e:	b292      	uxth	r2, r2
10008750:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
10008752:	18e4      	adds	r4, r4, r3
10008754:	00e4      	lsls	r4, r4, #3
10008756:	59a4      	ldr	r4, [r4, r6]
10008758:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000875a:	e02e      	b.n	100087ba <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000875c:	4e21      	ldr	r6, [pc, #132]	; (100087e4 <gpio_register_callback+0xcc>)
1000875e:	00dc      	lsls	r4, r3, #3
10008760:	18e2      	adds	r2, r4, r3
10008762:	00d2      	lsls	r2, r2, #3
10008764:	5997      	ldr	r7, [r2, r6]
10008766:	250f      	movs	r5, #15
10008768:	4005      	ands	r5, r0
1000876a:	2201      	movs	r2, #1
1000876c:	40aa      	lsls	r2, r5
1000876e:	b292      	uxth	r2, r2
10008770:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
10008772:	18e4      	adds	r4, r4, r3
10008774:	00e4      	lsls	r4, r4, #3
10008776:	59a4      	ldr	r4, [r4, r6]
10008778:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000877a:	e01e      	b.n	100087ba <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000877c:	4e19      	ldr	r6, [pc, #100]	; (100087e4 <gpio_register_callback+0xcc>)
1000877e:	00dc      	lsls	r4, r3, #3
10008780:	18e2      	adds	r2, r4, r3
10008782:	00d2      	lsls	r2, r2, #3
10008784:	5997      	ldr	r7, [r2, r6]
10008786:	250f      	movs	r5, #15
10008788:	4005      	ands	r5, r0
1000878a:	2201      	movs	r2, #1
1000878c:	40aa      	lsls	r2, r5
1000878e:	b292      	uxth	r2, r2
10008790:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
10008792:	18e4      	adds	r4, r4, r3
10008794:	00e4      	lsls	r4, r4, #3
10008796:	59a4      	ldr	r4, [r4, r6]
10008798:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000879a:	e00e      	b.n	100087ba <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000879c:	4e11      	ldr	r6, [pc, #68]	; (100087e4 <gpio_register_callback+0xcc>)
1000879e:	00dc      	lsls	r4, r3, #3
100087a0:	18e2      	adds	r2, r4, r3
100087a2:	00d2      	lsls	r2, r2, #3
100087a4:	5997      	ldr	r7, [r2, r6]
100087a6:	250f      	movs	r5, #15
100087a8:	4005      	ands	r5, r0
100087aa:	2201      	movs	r2, #1
100087ac:	40aa      	lsls	r2, r5
100087ae:	b292      	uxth	r2, r2
100087b0:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
100087b2:	18e4      	adds	r4, r4, r3
100087b4:	00e4      	lsls	r4, r4, #3
100087b6:	59a4      	ldr	r4, [r4, r6]
100087b8:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
100087ba:	220f      	movs	r2, #15
100087bc:	4010      	ands	r0, r2
100087be:	4c09      	ldr	r4, [pc, #36]	; (100087e4 <gpio_register_callback+0xcc>)
100087c0:	00dd      	lsls	r5, r3, #3
100087c2:	18ea      	adds	r2, r5, r3
100087c4:	0052      	lsls	r2, r2, #1
100087c6:	1812      	adds	r2, r2, r0
100087c8:	0092      	lsls	r2, r2, #2
100087ca:	18a2      	adds	r2, r4, r2
100087cc:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
100087ce:	18ea      	adds	r2, r5, r3
100087d0:	00d2      	lsls	r2, r2, #3
100087d2:	18a2      	adds	r2, r4, r2
100087d4:	3244      	adds	r2, #68	; 0x44
100087d6:	2101      	movs	r1, #1
100087d8:	4081      	lsls	r1, r0
100087da:	8813      	ldrh	r3, [r2, #0]
100087dc:	430b      	orrs	r3, r1
100087de:	8013      	strh	r3, [r2, #0]
}
100087e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100087e2:	46c0      	nop			; (mov r8, r8)
100087e4:	10012aa4 	.word	0x10012aa4

100087e8 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
100087e8:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
100087ea:	280f      	cmp	r0, #15
100087ec:	d805      	bhi.n	100087fa <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100087ee:	2280      	movs	r2, #128	; 0x80
100087f0:	0412      	lsls	r2, r2, #16
100087f2:	4b12      	ldr	r3, [pc, #72]	; (1000883c <gpio_enable_callback+0x54>)
100087f4:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
100087f6:	2200      	movs	r2, #0
100087f8:	e00c      	b.n	10008814 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
100087fa:	281f      	cmp	r0, #31
100087fc:	d805      	bhi.n	1000880a <gpio_enable_callback+0x22>
100087fe:	2280      	movs	r2, #128	; 0x80
10008800:	0452      	lsls	r2, r2, #17
10008802:	4b0e      	ldr	r3, [pc, #56]	; (1000883c <gpio_enable_callback+0x54>)
10008804:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
10008806:	2201      	movs	r2, #1
10008808:	e004      	b.n	10008814 <gpio_enable_callback+0x2c>
1000880a:	2280      	movs	r2, #128	; 0x80
1000880c:	0492      	lsls	r2, r2, #18
1000880e:	4b0b      	ldr	r3, [pc, #44]	; (1000883c <gpio_enable_callback+0x54>)
10008810:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
10008812:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
10008814:	230f      	movs	r3, #15
10008816:	4018      	ands	r0, r3
10008818:	2101      	movs	r1, #1
1000881a:	4081      	lsls	r1, r0
1000881c:	4c08      	ldr	r4, [pc, #32]	; (10008840 <gpio_enable_callback+0x58>)
1000881e:	00d5      	lsls	r5, r2, #3
10008820:	18ab      	adds	r3, r5, r2
10008822:	00db      	lsls	r3, r3, #3
10008824:	18e3      	adds	r3, r4, r3
10008826:	3346      	adds	r3, #70	; 0x46
10008828:	8818      	ldrh	r0, [r3, #0]
1000882a:	4308      	orrs	r0, r1
1000882c:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000882e:	18aa      	adds	r2, r5, r2
10008830:	00d2      	lsls	r2, r2, #3
10008832:	5913      	ldr	r3, [r2, r4]
10008834:	b289      	uxth	r1, r1
10008836:	8419      	strh	r1, [r3, #32]
}
10008838:	bd30      	pop	{r4, r5, pc}
1000883a:	46c0      	nop			; (mov r8, r8)
1000883c:	e000e100 	.word	0xe000e100
10008840:	10012aa4 	.word	0x10012aa4

10008844 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
10008844:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
10008846:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
10008848:	280f      	cmp	r0, #15
1000884a:	d904      	bls.n	10008856 <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000884c:	221f      	movs	r2, #31
1000884e:	4282      	cmp	r2, r0
10008850:	415b      	adcs	r3, r3
10008852:	3a1d      	subs	r2, #29
10008854:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
10008856:	220f      	movs	r2, #15
10008858:	4010      	ands	r0, r2
1000885a:	2101      	movs	r1, #1
1000885c:	4081      	lsls	r1, r0
1000885e:	4c07      	ldr	r4, [pc, #28]	; (1000887c <gpio_disable_callback+0x38>)
10008860:	00dd      	lsls	r5, r3, #3
10008862:	18ea      	adds	r2, r5, r3
10008864:	00d2      	lsls	r2, r2, #3
10008866:	18a2      	adds	r2, r4, r2
10008868:	3246      	adds	r2, #70	; 0x46
1000886a:	8810      	ldrh	r0, [r2, #0]
1000886c:	4388      	bics	r0, r1
1000886e:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
10008870:	18eb      	adds	r3, r5, r3
10008872:	00db      	lsls	r3, r3, #3
10008874:	591b      	ldr	r3, [r3, r4]
10008876:	b289      	uxth	r1, r1
10008878:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000887a:	bd30      	pop	{r4, r5, pc}
1000887c:	10012aa4 	.word	0x10012aa4

10008880 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
10008880:	b510      	push	{r4, lr}
10008882:	4a11      	ldr	r2, [pc, #68]	; (100088c8 <gpio_init+0x48>)
10008884:	0010      	movs	r0, r2
10008886:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
10008888:	2100      	movs	r1, #0
1000888a:	e007      	b.n	1000889c <gpio_init+0x1c>
1000888c:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000888e:	4293      	cmp	r3, r2
10008890:	d1fc      	bne.n	1000888c <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
10008892:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
10008894:	8011      	strh	r1, [r2, #0]
10008896:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
10008898:	4282      	cmp	r2, r0
1000889a:	d002      	beq.n	100088a2 <gpio_init+0x22>
1000889c:	0013      	movs	r3, r2
1000889e:	3b40      	subs	r3, #64	; 0x40
100088a0:	e7f4      	b.n	1000888c <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
100088a2:	4b0a      	ldr	r3, [pc, #40]	; (100088cc <gpio_init+0x4c>)
100088a4:	4a0a      	ldr	r2, [pc, #40]	; (100088d0 <gpio_init+0x50>)
100088a6:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
100088a8:	4a0a      	ldr	r2, [pc, #40]	; (100088d4 <gpio_init+0x54>)
100088aa:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
100088ac:	490a      	ldr	r1, [pc, #40]	; (100088d8 <gpio_init+0x58>)
100088ae:	2290      	movs	r2, #144	; 0x90
100088b0:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
100088b2:	490a      	ldr	r1, [pc, #40]	; (100088dc <gpio_init+0x5c>)
100088b4:	2027      	movs	r0, #39	; 0x27
100088b6:	4c0a      	ldr	r4, [pc, #40]	; (100088e0 <gpio_init+0x60>)
100088b8:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
100088ba:	490a      	ldr	r1, [pc, #40]	; (100088e4 <gpio_init+0x64>)
100088bc:	2028      	movs	r0, #40	; 0x28
100088be:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
100088c0:	4909      	ldr	r1, [pc, #36]	; (100088e8 <gpio_init+0x68>)
100088c2:	2029      	movs	r0, #41	; 0x29
100088c4:	47a0      	blx	r4
}
100088c6:	bd10      	pop	{r4, pc}
100088c8:	10012ae8 	.word	0x10012ae8
100088cc:	10012aa4 	.word	0x10012aa4
100088d0:	40010000 	.word	0x40010000
100088d4:	40011000 	.word	0x40011000
100088d8:	40013000 	.word	0x40013000
100088dc:	100082b5 	.word	0x100082b5
100088e0:	10009141 	.word	0x10009141
100088e4:	10008319 	.word	0x10008319
100088e8:	10008389 	.word	0x10008389

100088ec <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
100088ec:	2801      	cmp	r0, #1
100088ee:	d00d      	beq.n	1000890c <system_clock_config+0x20>
100088f0:	2800      	cmp	r0, #0
100088f2:	d002      	beq.n	100088fa <system_clock_config+0xe>
100088f4:	2802      	cmp	r0, #2
100088f6:	d01c      	beq.n	10008932 <system_clock_config+0x46>
100088f8:	e02e      	b.n	10008958 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
100088fa:	4a18      	ldr	r2, [pc, #96]	; (1000895c <system_clock_config+0x70>)
100088fc:	6990      	ldr	r0, [r2, #24]
100088fe:	230c      	movs	r3, #12
10008900:	4303      	orrs	r3, r0
10008902:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
10008904:	4a16      	ldr	r2, [pc, #88]	; (10008960 <system_clock_config+0x74>)
10008906:	4b17      	ldr	r3, [pc, #92]	; (10008964 <system_clock_config+0x78>)
10008908:	601a      	str	r2, [r3, #0]
			break;
1000890a:	e01a      	b.n	10008942 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
1000890c:	4b13      	ldr	r3, [pc, #76]	; (1000895c <system_clock_config+0x70>)
1000890e:	6998      	ldr	r0, [r3, #24]
10008910:	2208      	movs	r2, #8
10008912:	4302      	orrs	r2, r0
10008914:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008916:	699a      	ldr	r2, [r3, #24]
10008918:	2004      	movs	r0, #4
1000891a:	4382      	bics	r2, r0
1000891c:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000891e:	4a12      	ldr	r2, [pc, #72]	; (10008968 <system_clock_config+0x7c>)
10008920:	6853      	ldr	r3, [r2, #4]
10008922:	2080      	movs	r0, #128	; 0x80
10008924:	0300      	lsls	r0, r0, #12
10008926:	4303      	orrs	r3, r0
10008928:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000892a:	4a10      	ldr	r2, [pc, #64]	; (1000896c <system_clock_config+0x80>)
1000892c:	4b0d      	ldr	r3, [pc, #52]	; (10008964 <system_clock_config+0x78>)
1000892e:	601a      	str	r2, [r3, #0]
			break;
10008930:	e007      	b.n	10008942 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008932:	4a0a      	ldr	r2, [pc, #40]	; (1000895c <system_clock_config+0x70>)
10008934:	6993      	ldr	r3, [r2, #24]
10008936:	200c      	movs	r0, #12
10008938:	4383      	bics	r3, r0
1000893a:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000893c:	4a08      	ldr	r2, [pc, #32]	; (10008960 <system_clock_config+0x74>)
1000893e:	4b09      	ldr	r3, [pc, #36]	; (10008964 <system_clock_config+0x78>)
10008940:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008942:	4b06      	ldr	r3, [pc, #24]	; (1000895c <system_clock_config+0x70>)
10008944:	699a      	ldr	r2, [r3, #24]
10008946:	2003      	movs	r0, #3
10008948:	4382      	bics	r2, r0
1000894a:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
1000894c:	699a      	ldr	r2, [r3, #24]
1000894e:	4001      	ands	r1, r0
10008950:	4311      	orrs	r1, r2
10008952:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
10008954:	2000      	movs	r0, #0
10008956:	e000      	b.n	1000895a <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
10008958:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000895a:	4770      	bx	lr
1000895c:	4000b000 	.word	0x4000b000
10008960:	018cba80 	.word	0x018cba80
10008964:	10012b7c 	.word	0x10012b7c
10008968:	4000f000 	.word	0x4000f000
1000896c:	001e8480 	.word	0x001e8480

10008970 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
10008970:	4b01      	ldr	r3, [pc, #4]	; (10008978 <system_clock_get_value+0x8>)
10008972:	6818      	ldr	r0, [r3, #0]
}
10008974:	4770      	bx	lr
10008976:	46c0      	nop			; (mov r8, r8)
10008978:	10012b7c 	.word	0x10012b7c

1000897c <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000897c:	b500      	push	{lr}
	switch (peripheral) {
1000897e:	2835      	cmp	r0, #53	; 0x35
10008980:	d900      	bls.n	10008984 <system_clock_peripheral_enable+0x8>
10008982:	e1a2      	b.n	10008cca <system_clock_peripheral_enable+0x34e>
10008984:	0080      	lsls	r0, r0, #2
10008986:	4bd2      	ldr	r3, [pc, #840]	; (10008cd0 <system_clock_peripheral_enable+0x354>)
10008988:	581b      	ldr	r3, [r3, r0]
1000898a:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000898c:	4ad1      	ldr	r2, [pc, #836]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
1000898e:	68d1      	ldr	r1, [r2, #12]
10008990:	2302      	movs	r3, #2
10008992:	430b      	orrs	r3, r1
10008994:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008996:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN;
		break;
10008998:	e198      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000899a:	4ace      	ldr	r2, [pc, #824]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
1000899c:	68d1      	ldr	r1, [r2, #12]
1000899e:	2304      	movs	r3, #4
100089a0:	430b      	orrs	r3, r1
100089a2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN;
		break;
100089a6:	e191      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089a8:	4aca      	ldr	r2, [pc, #808]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
100089aa:	68d1      	ldr	r1, [r2, #12]
100089ac:	2308      	movs	r3, #8
100089ae:	430b      	orrs	r3, r1
100089b0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089b2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN;
		break;
100089b4:	e18a      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089b6:	4ac7      	ldr	r2, [pc, #796]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
100089b8:	68d1      	ldr	r1, [r2, #12]
100089ba:	2310      	movs	r3, #16
100089bc:	430b      	orrs	r3, r1
100089be:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN;
		break;
100089c2:	e183      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089c4:	4ac3      	ldr	r2, [pc, #780]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
100089c6:	68d1      	ldr	r1, [r2, #12]
100089c8:	2320      	movs	r3, #32
100089ca:	430b      	orrs	r3, r1
100089cc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089ce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		break;
100089d0:	e17c      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089d2:	4ac0      	ldr	r2, [pc, #768]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
100089d4:	68d1      	ldr	r1, [r2, #12]
100089d6:	2380      	movs	r3, #128	; 0x80
100089d8:	430b      	orrs	r3, r1
100089da:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
100089de:	e175      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089e0:	4abc      	ldr	r2, [pc, #752]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
100089e2:	68d3      	ldr	r3, [r2, #12]
100089e4:	2180      	movs	r1, #128	; 0x80
100089e6:	0049      	lsls	r1, r1, #1
100089e8:	430b      	orrs	r3, r1
100089ea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN;
		break;
100089ee:	e16d      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089f0:	4ab8      	ldr	r2, [pc, #736]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
100089f2:	68d3      	ldr	r3, [r2, #12]
100089f4:	2180      	movs	r1, #128	; 0x80
100089f6:	0109      	lsls	r1, r1, #4
100089f8:	430b      	orrs	r3, r1
100089fa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN;
		break;
100089fe:	e165      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a00:	4ab4      	ldr	r2, [pc, #720]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008a02:	68d3      	ldr	r3, [r2, #12]
10008a04:	2180      	movs	r1, #128	; 0x80
10008a06:	0149      	lsls	r1, r1, #5
10008a08:	430b      	orrs	r3, r1
10008a0a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a0c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN;
		break;
10008a0e:	e15d      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a10:	4ab0      	ldr	r2, [pc, #704]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008a12:	68d3      	ldr	r3, [r2, #12]
10008a14:	2180      	movs	r1, #128	; 0x80
10008a16:	0189      	lsls	r1, r1, #6
10008a18:	430b      	orrs	r3, r1
10008a1a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN;
		break;
10008a1e:	e155      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a20:	4aac      	ldr	r2, [pc, #688]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008a22:	68d3      	ldr	r3, [r2, #12]
10008a24:	2180      	movs	r1, #128	; 0x80
10008a26:	01c9      	lsls	r1, r1, #7
10008a28:	430b      	orrs	r3, r1
10008a2a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a2c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN;
		break;
10008a2e:	e14d      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a30:	4aa8      	ldr	r2, [pc, #672]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008a32:	68d3      	ldr	r3, [r2, #12]
10008a34:	2180      	movs	r1, #128	; 0x80
10008a36:	0209      	lsls	r1, r1, #8
10008a38:	430b      	orrs	r3, r1
10008a3a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a3c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN;
		break;
10008a3e:	e145      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a40:	4aa4      	ldr	r2, [pc, #656]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008a42:	68d3      	ldr	r3, [r2, #12]
10008a44:	2180      	movs	r1, #128	; 0x80
10008a46:	0249      	lsls	r1, r1, #9
10008a48:	430b      	orrs	r3, r1
10008a4a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN;
		break;
10008a4e:	e13d      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a50:	4aa0      	ldr	r2, [pc, #640]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008a52:	68d3      	ldr	r3, [r2, #12]
10008a54:	2180      	movs	r1, #128	; 0x80
10008a56:	0289      	lsls	r1, r1, #10
10008a58:	430b      	orrs	r3, r1
10008a5a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
10008a5e:	e135      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a60:	4a9c      	ldr	r2, [pc, #624]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008a62:	68d3      	ldr	r3, [r2, #12]
10008a64:	2180      	movs	r1, #128	; 0x80
10008a66:	02c9      	lsls	r1, r1, #11
10008a68:	430b      	orrs	r3, r1
10008a6a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
10008a6e:	e12d      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a70:	4a98      	ldr	r2, [pc, #608]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008a72:	68d3      	ldr	r3, [r2, #12]
10008a74:	2180      	movs	r1, #128	; 0x80
10008a76:	0309      	lsls	r1, r1, #12
10008a78:	430b      	orrs	r3, r1
10008a7a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a7c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
10008a7e:	e125      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a80:	4a94      	ldr	r2, [pc, #592]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008a82:	68d3      	ldr	r3, [r2, #12]
10008a84:	2180      	movs	r1, #128	; 0x80
10008a86:	0349      	lsls	r1, r1, #13
10008a88:	430b      	orrs	r3, r1
10008a8a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
10008a8e:	e11d      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a90:	4a90      	ldr	r2, [pc, #576]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008a92:	68d3      	ldr	r3, [r2, #12]
10008a94:	2180      	movs	r1, #128	; 0x80
10008a96:	0389      	lsls	r1, r1, #14
10008a98:	430b      	orrs	r3, r1
10008a9a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
10008a9e:	e115      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008aa0:	4a8c      	ldr	r2, [pc, #560]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008aa2:	68d3      	ldr	r3, [r2, #12]
10008aa4:	2180      	movs	r1, #128	; 0x80
10008aa6:	03c9      	lsls	r1, r1, #15
10008aa8:	430b      	orrs	r3, r1
10008aaa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008aac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
10008aae:	e10d      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ab0:	4a88      	ldr	r2, [pc, #544]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008ab2:	68d3      	ldr	r3, [r2, #12]
10008ab4:	2180      	movs	r1, #128	; 0x80
10008ab6:	0409      	lsls	r1, r1, #16
10008ab8:	430b      	orrs	r3, r1
10008aba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008abc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
10008abe:	e105      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ac0:	4a84      	ldr	r2, [pc, #528]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008ac2:	68d3      	ldr	r3, [r2, #12]
10008ac4:	2180      	movs	r1, #128	; 0x80
10008ac6:	0449      	lsls	r1, r1, #17
10008ac8:	430b      	orrs	r3, r1
10008aca:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008acc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
10008ace:	e0fd      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ad0:	4a80      	ldr	r2, [pc, #512]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008ad2:	68d3      	ldr	r3, [r2, #12]
10008ad4:	2180      	movs	r1, #128	; 0x80
10008ad6:	0489      	lsls	r1, r1, #18
10008ad8:	430b      	orrs	r3, r1
10008ada:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008adc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
10008ade:	e0f5      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ae0:	4a7c      	ldr	r2, [pc, #496]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008ae2:	68d3      	ldr	r3, [r2, #12]
10008ae4:	2180      	movs	r1, #128	; 0x80
10008ae6:	04c9      	lsls	r1, r1, #19
10008ae8:	430b      	orrs	r3, r1
10008aea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008aec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_1_CLK_EN;
		break;
10008aee:	e0ed      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008af0:	4a78      	ldr	r2, [pc, #480]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008af2:	68d3      	ldr	r3, [r2, #12]
10008af4:	2180      	movs	r1, #128	; 0x80
10008af6:	0509      	lsls	r1, r1, #20
10008af8:	430b      	orrs	r3, r1
10008afa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008afc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_2_CLK_EN;
		break;
10008afe:	e0e5      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008b00:	4a74      	ldr	r2, [pc, #464]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008b02:	68d3      	ldr	r3, [r2, #12]
10008b04:	2180      	movs	r1, #128	; 0x80
10008b06:	0549      	lsls	r1, r1, #21
10008b08:	430b      	orrs	r3, r1
10008b0a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b0c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_3_CLK_EN;
		break;
10008b0e:	e0dd      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008b10:	4a70      	ldr	r2, [pc, #448]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008b12:	68d3      	ldr	r3, [r2, #12]
10008b14:	2180      	movs	r1, #128	; 0x80
10008b16:	0589      	lsls	r1, r1, #22
10008b18:	430b      	orrs	r3, r1
10008b1a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN;
		break;
10008b1e:	e0d5      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008b20:	4a6c      	ldr	r2, [pc, #432]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008b22:	68d3      	ldr	r3, [r2, #12]
10008b24:	2180      	movs	r1, #128	; 0x80
10008b26:	05c9      	lsls	r1, r1, #23
10008b28:	430b      	orrs	r3, r1
10008b2a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b2c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10008b2e:	e0cd      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b30:	4a68      	ldr	r2, [pc, #416]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008b32:	6911      	ldr	r1, [r2, #16]
10008b34:	2301      	movs	r3, #1
10008b36:	430b      	orrs	r3, r1
10008b38:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b3a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN;
		break;
10008b3c:	e0c6      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b3e:	4a65      	ldr	r2, [pc, #404]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008b40:	6911      	ldr	r1, [r2, #16]
10008b42:	2302      	movs	r3, #2
10008b44:	430b      	orrs	r3, r1
10008b46:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b48:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN;
		break;
10008b4a:	e0bf      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b4c:	4a61      	ldr	r2, [pc, #388]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008b4e:	6911      	ldr	r1, [r2, #16]
10008b50:	2304      	movs	r3, #4
10008b52:	430b      	orrs	r3, r1
10008b54:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b56:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN;
		break;
10008b58:	e0b8      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b5a:	4a5e      	ldr	r2, [pc, #376]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008b5c:	6911      	ldr	r1, [r2, #16]
10008b5e:	2308      	movs	r3, #8
10008b60:	430b      	orrs	r3, r1
10008b62:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN;
		break;
10008b66:	e0b1      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b68:	4a5a      	ldr	r2, [pc, #360]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008b6a:	6911      	ldr	r1, [r2, #16]
10008b6c:	2310      	movs	r3, #16
10008b6e:	430b      	orrs	r3, r1
10008b70:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b72:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN;
		break;
10008b74:	e0aa      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b76:	4a57      	ldr	r2, [pc, #348]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008b78:	6911      	ldr	r1, [r2, #16]
10008b7a:	2320      	movs	r3, #32
10008b7c:	430b      	orrs	r3, r1
10008b7e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN;
		break;
10008b82:	e0a3      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b84:	4a53      	ldr	r2, [pc, #332]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008b86:	6911      	ldr	r1, [r2, #16]
10008b88:	2340      	movs	r3, #64	; 0x40
10008b8a:	430b      	orrs	r3, r1
10008b8c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b8e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_1_CLK_EN;
		break;
10008b90:	e09c      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b92:	4a50      	ldr	r2, [pc, #320]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008b94:	6911      	ldr	r1, [r2, #16]
10008b96:	2380      	movs	r3, #128	; 0x80
10008b98:	430b      	orrs	r3, r1
10008b9a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_2_CLK_EN;
		break;
10008b9e:	e095      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ba0:	4a4c      	ldr	r2, [pc, #304]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008ba2:	6913      	ldr	r3, [r2, #16]
10008ba4:	2180      	movs	r1, #128	; 0x80
10008ba6:	0049      	lsls	r1, r1, #1
10008ba8:	430b      	orrs	r3, r1
10008baa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_3_CLK_EN;
		break;
10008bae:	e08d      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008bb0:	4a48      	ldr	r2, [pc, #288]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008bb2:	6913      	ldr	r3, [r2, #16]
10008bb4:	2180      	movs	r1, #128	; 0x80
10008bb6:	0089      	lsls	r1, r1, #2
10008bb8:	430b      	orrs	r3, r1
10008bba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bbc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_4_CLK_EN;
		break;
10008bbe:	e085      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008bc0:	4a44      	ldr	r2, [pc, #272]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008bc2:	6913      	ldr	r3, [r2, #16]
10008bc4:	2180      	movs	r1, #128	; 0x80
10008bc6:	00c9      	lsls	r1, r1, #3
10008bc8:	430b      	orrs	r3, r1
10008bca:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bcc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
10008bce:	e07d      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008bd0:	4a40      	ldr	r2, [pc, #256]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008bd2:	6913      	ldr	r3, [r2, #16]
10008bd4:	2180      	movs	r1, #128	; 0x80
10008bd6:	0109      	lsls	r1, r1, #4
10008bd8:	430b      	orrs	r3, r1
10008bda:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bdc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
10008bde:	e075      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008be0:	4a3c      	ldr	r2, [pc, #240]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008be2:	6913      	ldr	r3, [r2, #16]
10008be4:	2180      	movs	r1, #128	; 0x80
10008be6:	0149      	lsls	r1, r1, #5
10008be8:	430b      	orrs	r3, r1
10008bea:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
10008bee:	e06d      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008bf0:	4a38      	ldr	r2, [pc, #224]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008bf2:	6913      	ldr	r3, [r2, #16]
10008bf4:	2180      	movs	r1, #128	; 0x80
10008bf6:	0189      	lsls	r1, r1, #6
10008bf8:	430b      	orrs	r3, r1
10008bfa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bfc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
10008bfe:	e065      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c00:	4a34      	ldr	r2, [pc, #208]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008c02:	6913      	ldr	r3, [r2, #16]
10008c04:	2180      	movs	r1, #128	; 0x80
10008c06:	01c9      	lsls	r1, r1, #7
10008c08:	430b      	orrs	r3, r1
10008c0a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c0c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_COUNTER_0_PGCLK_EN;
		break;
10008c0e:	e05d      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c10:	4a30      	ldr	r2, [pc, #192]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008c12:	6913      	ldr	r3, [r2, #16]
10008c14:	2180      	movs	r1, #128	; 0x80
10008c16:	0209      	lsls	r1, r1, #8
10008c18:	430b      	orrs	r3, r1
10008c1a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
10008c1e:	e055      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c20:	4a2c      	ldr	r2, [pc, #176]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008c22:	6913      	ldr	r3, [r2, #16]
10008c24:	2180      	movs	r1, #128	; 0x80
10008c26:	0249      	lsls	r1, r1, #9
10008c28:	430b      	orrs	r3, r1
10008c2a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c2c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
10008c2e:	e04d      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c30:	4a28      	ldr	r2, [pc, #160]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008c32:	6913      	ldr	r3, [r2, #16]
10008c34:	2180      	movs	r1, #128	; 0x80
10008c36:	0289      	lsls	r1, r1, #10
10008c38:	430b      	orrs	r3, r1
10008c3a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c3c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
10008c3e:	e045      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c40:	4a24      	ldr	r2, [pc, #144]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008c42:	6913      	ldr	r3, [r2, #16]
10008c44:	2180      	movs	r1, #128	; 0x80
10008c46:	02c9      	lsls	r1, r1, #11
10008c48:	430b      	orrs	r3, r1
10008c4a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
10008c4e:	e03d      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c50:	4a20      	ldr	r2, [pc, #128]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008c52:	6913      	ldr	r3, [r2, #16]
10008c54:	2180      	movs	r1, #128	; 0x80
10008c56:	0309      	lsls	r1, r1, #12
10008c58:	430b      	orrs	r3, r1
10008c5a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
10008c5e:	e035      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c60:	4a1c      	ldr	r2, [pc, #112]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008c62:	6913      	ldr	r3, [r2, #16]
10008c64:	2180      	movs	r1, #128	; 0x80
10008c66:	0349      	lsls	r1, r1, #13
10008c68:	430b      	orrs	r3, r1
10008c6a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
10008c6e:	e02d      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c70:	4a18      	ldr	r2, [pc, #96]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008c72:	6913      	ldr	r3, [r2, #16]
10008c74:	2180      	movs	r1, #128	; 0x80
10008c76:	0389      	lsls	r1, r1, #14
10008c78:	430b      	orrs	r3, r1
10008c7a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c7c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10008c7e:	e025      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c80:	4a14      	ldr	r2, [pc, #80]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008c82:	6913      	ldr	r3, [r2, #16]
10008c84:	2180      	movs	r1, #128	; 0x80
10008c86:	03c9      	lsls	r1, r1, #15
10008c88:	430b      	orrs	r3, r1
10008c8a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10008c8e:	e01d      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c90:	4a10      	ldr	r2, [pc, #64]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008c92:	6913      	ldr	r3, [r2, #16]
10008c94:	2180      	movs	r1, #128	; 0x80
10008c96:	0409      	lsls	r1, r1, #16
10008c98:	430b      	orrs	r3, r1
10008c9a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10008c9e:	e015      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008ca0:	4a0c      	ldr	r2, [pc, #48]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008ca2:	7d11      	ldrb	r1, [r2, #20]
10008ca4:	2301      	movs	r3, #1
10008ca6:	430b      	orrs	r3, r1
10008ca8:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008caa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_RXTX_SEQ_CLK_EN;
		break;
10008cac:	e00e      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008cae:	4a09      	ldr	r2, [pc, #36]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008cb0:	7d11      	ldrb	r1, [r2, #20]
10008cb2:	2302      	movs	r3, #2
10008cb4:	430b      	orrs	r3, r1
10008cb6:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cb8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_AHB_CLK_EN;
		break;
10008cba:	e007      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008cbc:	4a05      	ldr	r2, [pc, #20]	; (10008cd4 <system_clock_peripheral_enable+0x358>)
10008cbe:	7d11      	ldrb	r1, [r2, #20]
10008cc0:	2304      	movs	r3, #4
10008cc2:	430b      	orrs	r3, r1
10008cc4:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cc6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_PERIPH_REGS_CLK_EN;
		break;
10008cc8:	e000      	b.n	10008ccc <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
10008cca:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10008ccc:	bd00      	pop	{pc}
10008cce:	46c0      	nop			; (mov r8, r8)
10008cd0:	100103d0 	.word	0x100103d0
10008cd4:	4000b000 	.word	0x4000b000

10008cd8 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
10008cd8:	b500      	push	{lr}
	switch (peripheral) {
10008cda:	2843      	cmp	r0, #67	; 0x43
10008cdc:	d900      	bls.n	10008ce0 <system_peripheral_reset+0x8>
10008cde:	e223      	b.n	10009128 <system_peripheral_reset+0x450>
10008ce0:	0080      	lsls	r0, r0, #2
10008ce2:	4be0      	ldr	r3, [pc, #896]	; (10009064 <system_peripheral_reset+0x38c>)
10008ce4:	581b      	ldr	r3, [r3, r0]
10008ce6:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ce8:	4bdf      	ldr	r3, [pc, #892]	; (10009068 <system_peripheral_reset+0x390>)
10008cea:	6859      	ldr	r1, [r3, #4]
10008cec:	2202      	movs	r2, #2
10008cee:	4391      	bics	r1, r2
10008cf0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008cf2:	6859      	ldr	r1, [r3, #4]
10008cf4:	430a      	orrs	r2, r1
10008cf6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cf8:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
10008cfa:	e216      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008cfc:	4bda      	ldr	r3, [pc, #872]	; (10009068 <system_peripheral_reset+0x390>)
10008cfe:	6859      	ldr	r1, [r3, #4]
10008d00:	2204      	movs	r2, #4
10008d02:	4391      	bics	r1, r2
10008d04:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d06:	6859      	ldr	r1, [r3, #4]
10008d08:	430a      	orrs	r2, r1
10008d0a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d0c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
		break;
10008d0e:	e20c      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d10:	4bd5      	ldr	r3, [pc, #852]	; (10009068 <system_peripheral_reset+0x390>)
10008d12:	6859      	ldr	r1, [r3, #4]
10008d14:	2208      	movs	r2, #8
10008d16:	4391      	bics	r1, r2
10008d18:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d1a:	6859      	ldr	r1, [r3, #4]
10008d1c:	430a      	orrs	r2, r1
10008d1e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d20:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
		break;
10008d22:	e202      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d24:	4bd0      	ldr	r3, [pc, #832]	; (10009068 <system_peripheral_reset+0x390>)
10008d26:	6859      	ldr	r1, [r3, #4]
10008d28:	2210      	movs	r2, #16
10008d2a:	4391      	bics	r1, r2
10008d2c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d2e:	6859      	ldr	r1, [r3, #4]
10008d30:	430a      	orrs	r2, r1
10008d32:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d34:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
		break;
10008d36:	e1f8      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d38:	4bcb      	ldr	r3, [pc, #812]	; (10009068 <system_peripheral_reset+0x390>)
10008d3a:	6859      	ldr	r1, [r3, #4]
10008d3c:	2220      	movs	r2, #32
10008d3e:	4391      	bics	r1, r2
10008d40:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d42:	6859      	ldr	r1, [r3, #4]
10008d44:	430a      	orrs	r2, r1
10008d46:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d48:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
		break;
10008d4a:	e1ee      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d4c:	4bc6      	ldr	r3, [pc, #792]	; (10009068 <system_peripheral_reset+0x390>)
10008d4e:	6859      	ldr	r1, [r3, #4]
10008d50:	2240      	movs	r2, #64	; 0x40
10008d52:	4391      	bics	r1, r2
10008d54:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d56:	6859      	ldr	r1, [r3, #4]
10008d58:	430a      	orrs	r2, r1
10008d5a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d5c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
		break;
10008d5e:	e1e4      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d60:	4bc1      	ldr	r3, [pc, #772]	; (10009068 <system_peripheral_reset+0x390>)
10008d62:	6859      	ldr	r1, [r3, #4]
10008d64:	2280      	movs	r2, #128	; 0x80
10008d66:	4391      	bics	r1, r2
10008d68:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d6a:	6859      	ldr	r1, [r3, #4]
10008d6c:	430a      	orrs	r2, r1
10008d6e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d70:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
		break;
10008d72:	e1da      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d74:	4bbc      	ldr	r3, [pc, #752]	; (10009068 <system_peripheral_reset+0x390>)
10008d76:	6859      	ldr	r1, [r3, #4]
10008d78:	4abc      	ldr	r2, [pc, #752]	; (1000906c <system_peripheral_reset+0x394>)
10008d7a:	400a      	ands	r2, r1
10008d7c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d7e:	685a      	ldr	r2, [r3, #4]
10008d80:	2180      	movs	r1, #128	; 0x80
10008d82:	0049      	lsls	r1, r1, #1
10008d84:	430a      	orrs	r2, r1
10008d86:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d88:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
		break;
10008d8a:	e1ce      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d8c:	4bb6      	ldr	r3, [pc, #728]	; (10009068 <system_peripheral_reset+0x390>)
10008d8e:	6859      	ldr	r1, [r3, #4]
10008d90:	4ab7      	ldr	r2, [pc, #732]	; (10009070 <system_peripheral_reset+0x398>)
10008d92:	400a      	ands	r2, r1
10008d94:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d96:	685a      	ldr	r2, [r3, #4]
10008d98:	2180      	movs	r1, #128	; 0x80
10008d9a:	0089      	lsls	r1, r1, #2
10008d9c:	430a      	orrs	r2, r1
10008d9e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008da0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
		break;
10008da2:	e1c2      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008da4:	4bb0      	ldr	r3, [pc, #704]	; (10009068 <system_peripheral_reset+0x390>)
10008da6:	6859      	ldr	r1, [r3, #4]
10008da8:	4ab2      	ldr	r2, [pc, #712]	; (10009074 <system_peripheral_reset+0x39c>)
10008daa:	400a      	ands	r2, r1
10008dac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008dae:	685a      	ldr	r2, [r3, #4]
10008db0:	2180      	movs	r1, #128	; 0x80
10008db2:	00c9      	lsls	r1, r1, #3
10008db4:	430a      	orrs	r2, r1
10008db6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008db8:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
10008dba:	e1b6      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008dbc:	4baa      	ldr	r3, [pc, #680]	; (10009068 <system_peripheral_reset+0x390>)
10008dbe:	6859      	ldr	r1, [r3, #4]
10008dc0:	4aad      	ldr	r2, [pc, #692]	; (10009078 <system_peripheral_reset+0x3a0>)
10008dc2:	400a      	ands	r2, r1
10008dc4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008dc6:	685a      	ldr	r2, [r3, #4]
10008dc8:	2180      	movs	r1, #128	; 0x80
10008dca:	0109      	lsls	r1, r1, #4
10008dcc:	430a      	orrs	r2, r1
10008dce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dd0:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
		break;
10008dd2:	e1aa      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008dd4:	4ba4      	ldr	r3, [pc, #656]	; (10009068 <system_peripheral_reset+0x390>)
10008dd6:	6859      	ldr	r1, [r3, #4]
10008dd8:	4aa8      	ldr	r2, [pc, #672]	; (1000907c <system_peripheral_reset+0x3a4>)
10008dda:	400a      	ands	r2, r1
10008ddc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008dde:	685a      	ldr	r2, [r3, #4]
10008de0:	2180      	movs	r1, #128	; 0x80
10008de2:	0149      	lsls	r1, r1, #5
10008de4:	430a      	orrs	r2, r1
10008de6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008de8:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
		break;
10008dea:	e19e      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008dec:	4b9e      	ldr	r3, [pc, #632]	; (10009068 <system_peripheral_reset+0x390>)
10008dee:	6859      	ldr	r1, [r3, #4]
10008df0:	4aa3      	ldr	r2, [pc, #652]	; (10009080 <system_peripheral_reset+0x3a8>)
10008df2:	400a      	ands	r2, r1
10008df4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008df6:	685a      	ldr	r2, [r3, #4]
10008df8:	2180      	movs	r1, #128	; 0x80
10008dfa:	0189      	lsls	r1, r1, #6
10008dfc:	430a      	orrs	r2, r1
10008dfe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e00:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
		break;
10008e02:	e192      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e04:	4b98      	ldr	r3, [pc, #608]	; (10009068 <system_peripheral_reset+0x390>)
10008e06:	6859      	ldr	r1, [r3, #4]
10008e08:	4a9e      	ldr	r2, [pc, #632]	; (10009084 <system_peripheral_reset+0x3ac>)
10008e0a:	400a      	ands	r2, r1
10008e0c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e0e:	685a      	ldr	r2, [r3, #4]
10008e10:	2180      	movs	r1, #128	; 0x80
10008e12:	01c9      	lsls	r1, r1, #7
10008e14:	430a      	orrs	r2, r1
10008e16:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e18:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
		break;
10008e1a:	e186      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e1c:	4b92      	ldr	r3, [pc, #584]	; (10009068 <system_peripheral_reset+0x390>)
10008e1e:	6859      	ldr	r1, [r3, #4]
10008e20:	4a99      	ldr	r2, [pc, #612]	; (10009088 <system_peripheral_reset+0x3b0>)
10008e22:	400a      	ands	r2, r1
10008e24:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e26:	685a      	ldr	r2, [r3, #4]
10008e28:	2180      	movs	r1, #128	; 0x80
10008e2a:	0209      	lsls	r1, r1, #8
10008e2c:	430a      	orrs	r2, r1
10008e2e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e30:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
		break;
10008e32:	e17a      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e34:	4b8c      	ldr	r3, [pc, #560]	; (10009068 <system_peripheral_reset+0x390>)
10008e36:	6859      	ldr	r1, [r3, #4]
10008e38:	4a94      	ldr	r2, [pc, #592]	; (1000908c <system_peripheral_reset+0x3b4>)
10008e3a:	400a      	ands	r2, r1
10008e3c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e3e:	685a      	ldr	r2, [r3, #4]
10008e40:	2180      	movs	r1, #128	; 0x80
10008e42:	0249      	lsls	r1, r1, #9
10008e44:	430a      	orrs	r2, r1
10008e46:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e48:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
		break;
10008e4a:	e16e      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e4c:	4b86      	ldr	r3, [pc, #536]	; (10009068 <system_peripheral_reset+0x390>)
10008e4e:	6859      	ldr	r1, [r3, #4]
10008e50:	4a8f      	ldr	r2, [pc, #572]	; (10009090 <system_peripheral_reset+0x3b8>)
10008e52:	400a      	ands	r2, r1
10008e54:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e56:	685a      	ldr	r2, [r3, #4]
10008e58:	2180      	movs	r1, #128	; 0x80
10008e5a:	0289      	lsls	r1, r1, #10
10008e5c:	430a      	orrs	r2, r1
10008e5e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e60:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
		break;
10008e62:	e162      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e64:	4b80      	ldr	r3, [pc, #512]	; (10009068 <system_peripheral_reset+0x390>)
10008e66:	6859      	ldr	r1, [r3, #4]
10008e68:	4a8a      	ldr	r2, [pc, #552]	; (10009094 <system_peripheral_reset+0x3bc>)
10008e6a:	400a      	ands	r2, r1
10008e6c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e6e:	685a      	ldr	r2, [r3, #4]
10008e70:	2180      	movs	r1, #128	; 0x80
10008e72:	02c9      	lsls	r1, r1, #11
10008e74:	430a      	orrs	r2, r1
10008e76:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e78:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
10008e7a:	e156      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e7c:	4b7a      	ldr	r3, [pc, #488]	; (10009068 <system_peripheral_reset+0x390>)
10008e7e:	6859      	ldr	r1, [r3, #4]
10008e80:	4a85      	ldr	r2, [pc, #532]	; (10009098 <system_peripheral_reset+0x3c0>)
10008e82:	400a      	ands	r2, r1
10008e84:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e86:	685a      	ldr	r2, [r3, #4]
10008e88:	2180      	movs	r1, #128	; 0x80
10008e8a:	0309      	lsls	r1, r1, #12
10008e8c:	430a      	orrs	r2, r1
10008e8e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e90:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
10008e92:	e14a      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e94:	4b74      	ldr	r3, [pc, #464]	; (10009068 <system_peripheral_reset+0x390>)
10008e96:	6859      	ldr	r1, [r3, #4]
10008e98:	4a80      	ldr	r2, [pc, #512]	; (1000909c <system_peripheral_reset+0x3c4>)
10008e9a:	400a      	ands	r2, r1
10008e9c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e9e:	685a      	ldr	r2, [r3, #4]
10008ea0:	2180      	movs	r1, #128	; 0x80
10008ea2:	0349      	lsls	r1, r1, #13
10008ea4:	430a      	orrs	r2, r1
10008ea6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ea8:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
10008eaa:	e13e      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008eac:	4b6e      	ldr	r3, [pc, #440]	; (10009068 <system_peripheral_reset+0x390>)
10008eae:	6859      	ldr	r1, [r3, #4]
10008eb0:	4a7b      	ldr	r2, [pc, #492]	; (100090a0 <system_peripheral_reset+0x3c8>)
10008eb2:	400a      	ands	r2, r1
10008eb4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008eb6:	685a      	ldr	r2, [r3, #4]
10008eb8:	2180      	movs	r1, #128	; 0x80
10008eba:	0389      	lsls	r1, r1, #14
10008ebc:	430a      	orrs	r2, r1
10008ebe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ec0:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
10008ec2:	e132      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ec4:	4b68      	ldr	r3, [pc, #416]	; (10009068 <system_peripheral_reset+0x390>)
10008ec6:	6859      	ldr	r1, [r3, #4]
10008ec8:	4a76      	ldr	r2, [pc, #472]	; (100090a4 <system_peripheral_reset+0x3cc>)
10008eca:	400a      	ands	r2, r1
10008ecc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008ece:	685a      	ldr	r2, [r3, #4]
10008ed0:	2180      	movs	r1, #128	; 0x80
10008ed2:	03c9      	lsls	r1, r1, #15
10008ed4:	430a      	orrs	r2, r1
10008ed6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ed8:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
10008eda:	e126      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008edc:	4b62      	ldr	r3, [pc, #392]	; (10009068 <system_peripheral_reset+0x390>)
10008ede:	6859      	ldr	r1, [r3, #4]
10008ee0:	4a71      	ldr	r2, [pc, #452]	; (100090a8 <system_peripheral_reset+0x3d0>)
10008ee2:	400a      	ands	r2, r1
10008ee4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008ee6:	685a      	ldr	r2, [r3, #4]
10008ee8:	2180      	movs	r1, #128	; 0x80
10008eea:	0409      	lsls	r1, r1, #16
10008eec:	430a      	orrs	r2, r1
10008eee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ef0:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
10008ef2:	e11a      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ef4:	4b5c      	ldr	r3, [pc, #368]	; (10009068 <system_peripheral_reset+0x390>)
10008ef6:	6859      	ldr	r1, [r3, #4]
10008ef8:	4a6c      	ldr	r2, [pc, #432]	; (100090ac <system_peripheral_reset+0x3d4>)
10008efa:	400a      	ands	r2, r1
10008efc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008efe:	685a      	ldr	r2, [r3, #4]
10008f00:	2180      	movs	r1, #128	; 0x80
10008f02:	0449      	lsls	r1, r1, #17
10008f04:	430a      	orrs	r2, r1
10008f06:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f08:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
10008f0a:	e10e      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f0c:	4b56      	ldr	r3, [pc, #344]	; (10009068 <system_peripheral_reset+0x390>)
10008f0e:	6859      	ldr	r1, [r3, #4]
10008f10:	4a67      	ldr	r2, [pc, #412]	; (100090b0 <system_peripheral_reset+0x3d8>)
10008f12:	400a      	ands	r2, r1
10008f14:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f16:	685a      	ldr	r2, [r3, #4]
10008f18:	2180      	movs	r1, #128	; 0x80
10008f1a:	0489      	lsls	r1, r1, #18
10008f1c:	430a      	orrs	r2, r1
10008f1e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f20:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
		break;
10008f22:	e102      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f24:	4b50      	ldr	r3, [pc, #320]	; (10009068 <system_peripheral_reset+0x390>)
10008f26:	6859      	ldr	r1, [r3, #4]
10008f28:	4a62      	ldr	r2, [pc, #392]	; (100090b4 <system_peripheral_reset+0x3dc>)
10008f2a:	400a      	ands	r2, r1
10008f2c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f2e:	685a      	ldr	r2, [r3, #4]
10008f30:	2180      	movs	r1, #128	; 0x80
10008f32:	04c9      	lsls	r1, r1, #19
10008f34:	430a      	orrs	r2, r1
10008f36:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f38:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
		break;
10008f3a:	e0f6      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f3c:	4b4a      	ldr	r3, [pc, #296]	; (10009068 <system_peripheral_reset+0x390>)
10008f3e:	6859      	ldr	r1, [r3, #4]
10008f40:	4a5d      	ldr	r2, [pc, #372]	; (100090b8 <system_peripheral_reset+0x3e0>)
10008f42:	400a      	ands	r2, r1
10008f44:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f46:	685a      	ldr	r2, [r3, #4]
10008f48:	2180      	movs	r1, #128	; 0x80
10008f4a:	0509      	lsls	r1, r1, #20
10008f4c:	430a      	orrs	r2, r1
10008f4e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f50:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
		break;
10008f52:	e0ea      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f54:	4b44      	ldr	r3, [pc, #272]	; (10009068 <system_peripheral_reset+0x390>)
10008f56:	6859      	ldr	r1, [r3, #4]
10008f58:	4a58      	ldr	r2, [pc, #352]	; (100090bc <system_peripheral_reset+0x3e4>)
10008f5a:	400a      	ands	r2, r1
10008f5c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f5e:	685a      	ldr	r2, [r3, #4]
10008f60:	2180      	movs	r1, #128	; 0x80
10008f62:	0549      	lsls	r1, r1, #21
10008f64:	430a      	orrs	r2, r1
10008f66:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f68:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
		break;
10008f6a:	e0de      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f6c:	4b3e      	ldr	r3, [pc, #248]	; (10009068 <system_peripheral_reset+0x390>)
10008f6e:	6859      	ldr	r1, [r3, #4]
10008f70:	4a53      	ldr	r2, [pc, #332]	; (100090c0 <system_peripheral_reset+0x3e8>)
10008f72:	400a      	ands	r2, r1
10008f74:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f76:	685a      	ldr	r2, [r3, #4]
10008f78:	2180      	movs	r1, #128	; 0x80
10008f7a:	0589      	lsls	r1, r1, #22
10008f7c:	430a      	orrs	r2, r1
10008f7e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f80:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
		break;
10008f82:	e0d2      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f84:	4b38      	ldr	r3, [pc, #224]	; (10009068 <system_peripheral_reset+0x390>)
10008f86:	6859      	ldr	r1, [r3, #4]
10008f88:	4a4e      	ldr	r2, [pc, #312]	; (100090c4 <system_peripheral_reset+0x3ec>)
10008f8a:	400a      	ands	r2, r1
10008f8c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f8e:	685a      	ldr	r2, [r3, #4]
10008f90:	2180      	movs	r1, #128	; 0x80
10008f92:	05c9      	lsls	r1, r1, #23
10008f94:	430a      	orrs	r2, r1
10008f96:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f98:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
		break;
10008f9a:	e0c6      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f9c:	4a32      	ldr	r2, [pc, #200]	; (10009068 <system_peripheral_reset+0x390>)
10008f9e:	6853      	ldr	r3, [r2, #4]
10008fa0:	005b      	lsls	r3, r3, #1
10008fa2:	085b      	lsrs	r3, r3, #1
10008fa4:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008fa6:	6853      	ldr	r3, [r2, #4]
10008fa8:	2180      	movs	r1, #128	; 0x80
10008faa:	0609      	lsls	r1, r1, #24
10008fac:	430b      	orrs	r3, r1
10008fae:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fb0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
		break;
10008fb2:	e0ba      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008fb4:	4b2c      	ldr	r3, [pc, #176]	; (10009068 <system_peripheral_reset+0x390>)
10008fb6:	891a      	ldrh	r2, [r3, #8]
10008fb8:	2101      	movs	r1, #1
10008fba:	438a      	bics	r2, r1
10008fbc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008fbe:	8919      	ldrh	r1, [r3, #8]
10008fc0:	2201      	movs	r2, #1
10008fc2:	430a      	orrs	r2, r1
10008fc4:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fc6:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
		break;
10008fc8:	e0af      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008fca:	4b27      	ldr	r3, [pc, #156]	; (10009068 <system_peripheral_reset+0x390>)
10008fcc:	891a      	ldrh	r2, [r3, #8]
10008fce:	2102      	movs	r1, #2
10008fd0:	438a      	bics	r2, r1
10008fd2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008fd4:	8919      	ldrh	r1, [r3, #8]
10008fd6:	2202      	movs	r2, #2
10008fd8:	430a      	orrs	r2, r1
10008fda:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fdc:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
		break;
10008fde:	e0a4      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008fe0:	4b21      	ldr	r3, [pc, #132]	; (10009068 <system_peripheral_reset+0x390>)
10008fe2:	891a      	ldrh	r2, [r3, #8]
10008fe4:	2104      	movs	r1, #4
10008fe6:	438a      	bics	r2, r1
10008fe8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008fea:	8919      	ldrh	r1, [r3, #8]
10008fec:	2204      	movs	r2, #4
10008fee:	430a      	orrs	r2, r1
10008ff0:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ff2:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
		break;
10008ff4:	e099      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008ff6:	4b1c      	ldr	r3, [pc, #112]	; (10009068 <system_peripheral_reset+0x390>)
10008ff8:	891a      	ldrh	r2, [r3, #8]
10008ffa:	2108      	movs	r1, #8
10008ffc:	438a      	bics	r2, r1
10008ffe:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009000:	8919      	ldrh	r1, [r3, #8]
10009002:	2208      	movs	r2, #8
10009004:	430a      	orrs	r2, r1
10009006:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009008:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000900a:	e08e      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000900c:	4b16      	ldr	r3, [pc, #88]	; (10009068 <system_peripheral_reset+0x390>)
1000900e:	891a      	ldrh	r2, [r3, #8]
10009010:	2110      	movs	r1, #16
10009012:	438a      	bics	r2, r1
10009014:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009016:	8919      	ldrh	r1, [r3, #8]
10009018:	2210      	movs	r2, #16
1000901a:	430a      	orrs	r2, r1
1000901c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000901e:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
10009020:	e083      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009022:	4b11      	ldr	r3, [pc, #68]	; (10009068 <system_peripheral_reset+0x390>)
10009024:	891a      	ldrh	r2, [r3, #8]
10009026:	2120      	movs	r1, #32
10009028:	438a      	bics	r2, r1
1000902a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000902c:	8919      	ldrh	r1, [r3, #8]
1000902e:	2220      	movs	r2, #32
10009030:	430a      	orrs	r2, r1
10009032:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009034:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
10009036:	e078      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009038:	4b0b      	ldr	r3, [pc, #44]	; (10009068 <system_peripheral_reset+0x390>)
1000903a:	891a      	ldrh	r2, [r3, #8]
1000903c:	2140      	movs	r1, #64	; 0x40
1000903e:	438a      	bics	r2, r1
10009040:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009042:	8919      	ldrh	r1, [r3, #8]
10009044:	2240      	movs	r2, #64	; 0x40
10009046:	430a      	orrs	r2, r1
10009048:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000904a:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000904c:	e06d      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000904e:	4b06      	ldr	r3, [pc, #24]	; (10009068 <system_peripheral_reset+0x390>)
10009050:	891a      	ldrh	r2, [r3, #8]
10009052:	2180      	movs	r1, #128	; 0x80
10009054:	438a      	bics	r2, r1
10009056:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009058:	8919      	ldrh	r1, [r3, #8]
1000905a:	2280      	movs	r2, #128	; 0x80
1000905c:	430a      	orrs	r2, r1
1000905e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009060:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
		break;
10009062:	e062      	b.n	1000912a <system_peripheral_reset+0x452>
10009064:	100104a8 	.word	0x100104a8
10009068:	4000b000 	.word	0x4000b000
1000906c:	fffffeff 	.word	0xfffffeff
10009070:	fffffdff 	.word	0xfffffdff
10009074:	fffffbff 	.word	0xfffffbff
10009078:	fffff7ff 	.word	0xfffff7ff
1000907c:	ffffefff 	.word	0xffffefff
10009080:	ffffdfff 	.word	0xffffdfff
10009084:	ffffbfff 	.word	0xffffbfff
10009088:	ffff7fff 	.word	0xffff7fff
1000908c:	fffeffff 	.word	0xfffeffff
10009090:	fffdffff 	.word	0xfffdffff
10009094:	fffbffff 	.word	0xfffbffff
10009098:	fff7ffff 	.word	0xfff7ffff
1000909c:	ffefffff 	.word	0xffefffff
100090a0:	ffdfffff 	.word	0xffdfffff
100090a4:	ffbfffff 	.word	0xffbfffff
100090a8:	ff7fffff 	.word	0xff7fffff
100090ac:	feffffff 	.word	0xfeffffff
100090b0:	fdffffff 	.word	0xfdffffff
100090b4:	fbffffff 	.word	0xfbffffff
100090b8:	f7ffffff 	.word	0xf7ffffff
100090bc:	efffffff 	.word	0xefffffff
100090c0:	dfffffff 	.word	0xdfffffff
100090c4:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100090c8:	4b18      	ldr	r3, [pc, #96]	; (1000912c <system_peripheral_reset+0x454>)
100090ca:	8919      	ldrh	r1, [r3, #8]
100090cc:	4a18      	ldr	r2, [pc, #96]	; (10009130 <system_peripheral_reset+0x458>)
100090ce:	400a      	ands	r2, r1
100090d0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100090d2:	8919      	ldrh	r1, [r3, #8]
100090d4:	2280      	movs	r2, #128	; 0x80
100090d6:	0052      	lsls	r2, r2, #1
100090d8:	430a      	orrs	r2, r1
100090da:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090dc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
		break;
100090de:	e024      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100090e0:	4b12      	ldr	r3, [pc, #72]	; (1000912c <system_peripheral_reset+0x454>)
100090e2:	8919      	ldrh	r1, [r3, #8]
100090e4:	4a13      	ldr	r2, [pc, #76]	; (10009134 <system_peripheral_reset+0x45c>)
100090e6:	400a      	ands	r2, r1
100090e8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100090ea:	8919      	ldrh	r1, [r3, #8]
100090ec:	2280      	movs	r2, #128	; 0x80
100090ee:	0092      	lsls	r2, r2, #2
100090f0:	430a      	orrs	r2, r1
100090f2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090f4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
100090f6:	e018      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100090f8:	4b0c      	ldr	r3, [pc, #48]	; (1000912c <system_peripheral_reset+0x454>)
100090fa:	8919      	ldrh	r1, [r3, #8]
100090fc:	4a0e      	ldr	r2, [pc, #56]	; (10009138 <system_peripheral_reset+0x460>)
100090fe:	400a      	ands	r2, r1
10009100:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009102:	8919      	ldrh	r1, [r3, #8]
10009104:	2280      	movs	r2, #128	; 0x80
10009106:	00d2      	lsls	r2, r2, #3
10009108:	430a      	orrs	r2, r1
1000910a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000910c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000910e:	e00c      	b.n	1000912a <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009110:	4b06      	ldr	r3, [pc, #24]	; (1000912c <system_peripheral_reset+0x454>)
10009112:	8919      	ldrh	r1, [r3, #8]
10009114:	4a09      	ldr	r2, [pc, #36]	; (1000913c <system_peripheral_reset+0x464>)
10009116:	400a      	ands	r2, r1
10009118:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000911a:	8919      	ldrh	r1, [r3, #8]
1000911c:	2280      	movs	r2, #128	; 0x80
1000911e:	0112      	lsls	r2, r2, #4
10009120:	430a      	orrs	r2, r1
10009122:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009124:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
		break;
10009126:	e000      	b.n	1000912a <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
10009128:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000912a:	bd00      	pop	{pc}
1000912c:	4000b000 	.word	0x4000b000
10009130:	fffffeff 	.word	0xfffffeff
10009134:	fffffdff 	.word	0xfffffdff
10009138:	fffffbff 	.word	0xfffffbff
1000913c:	fffff7ff 	.word	0xfffff7ff

10009140 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
10009140:	2380      	movs	r3, #128	; 0x80
10009142:	04db      	lsls	r3, r3, #19
10009144:	469c      	mov	ip, r3
10009146:	4460      	add	r0, ip
10009148:	0080      	lsls	r0, r0, #2
1000914a:	6001      	str	r1, [r0, #0]
}
1000914c:	4770      	bx	lr
1000914e:	46c0      	nop			; (mov r8, r8)

10009150 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
10009150:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
10009152:	4b20      	ldr	r3, [pc, #128]	; (100091d4 <uart_rx0_isr_handler+0x84>)
10009154:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10009156:	6823      	ldr	r3, [r4, #0]
10009158:	7d1d      	ldrb	r5, [r3, #20]
1000915a:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000915c:	066a      	lsls	r2, r5, #25
1000915e:	d513      	bpl.n	10009188 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10009160:	211e      	movs	r1, #30
10009162:	2222      	movs	r2, #34	; 0x22
10009164:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
10009166:	7e1a      	ldrb	r2, [r3, #24]
10009168:	3123      	adds	r1, #35	; 0x23
1000916a:	438a      	bics	r2, r1
1000916c:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000916e:	2321      	movs	r3, #33	; 0x21
10009170:	5ce3      	ldrb	r3, [r4, r3]
10009172:	071b      	lsls	r3, r3, #28
10009174:	d506      	bpl.n	10009184 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
10009176:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009178:	5ce3      	ldrb	r3, [r4, r3]
1000917a:	071b      	lsls	r3, r3, #28
1000917c:	d502      	bpl.n	10009184 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000917e:	0020      	movs	r0, r4
10009180:	6923      	ldr	r3, [r4, #16]
10009182:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10009184:	6823      	ldr	r3, [r4, #0]
10009186:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009188:	07eb      	lsls	r3, r5, #31
1000918a:	d522      	bpl.n	100091d2 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000918c:	6823      	ldr	r3, [r4, #0]
1000918e:	7c1b      	ldrb	r3, [r3, #16]
10009190:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10009192:	6962      	ldr	r2, [r4, #20]
10009194:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10009196:	6963      	ldr	r3, [r4, #20]
10009198:	3301      	adds	r3, #1
1000919a:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000919c:	8ba3      	ldrh	r3, [r4, #28]
1000919e:	3b01      	subs	r3, #1
100091a0:	b29b      	uxth	r3, r3
100091a2:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
100091a4:	8ba3      	ldrh	r3, [r4, #28]
100091a6:	b29b      	uxth	r3, r3
100091a8:	2b00      	cmp	r3, #0
100091aa:	d112      	bne.n	100091d2 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
100091ac:	3321      	adds	r3, #33	; 0x21
100091ae:	5ce3      	ldrb	r3, [r4, r3]
100091b0:	075b      	lsls	r3, r3, #29
100091b2:	d50e      	bpl.n	100091d2 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
100091b4:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
100091b6:	5ce3      	ldrb	r3, [r4, r3]
100091b8:	075b      	lsls	r3, r3, #29
100091ba:	d50a      	bpl.n	100091d2 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
100091bc:	2200      	movs	r2, #0
100091be:	2322      	movs	r3, #34	; 0x22
100091c0:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
100091c2:	6822      	ldr	r2, [r4, #0]
100091c4:	7e13      	ldrb	r3, [r2, #24]
100091c6:	2101      	movs	r1, #1
100091c8:	438b      	bics	r3, r1
100091ca:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
100091cc:	68e3      	ldr	r3, [r4, #12]
100091ce:	0020      	movs	r0, r4
100091d0:	4798      	blx	r3
			}
		}
	}
}
100091d2:	bd70      	pop	{r4, r5, r6, pc}
100091d4:	10012b80 	.word	0x10012b80

100091d8 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
100091d8:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
100091da:	4b21      	ldr	r3, [pc, #132]	; (10009260 <uart_tx0_isr_handler+0x88>)
100091dc:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
100091de:	6823      	ldr	r3, [r4, #0]
100091e0:	791d      	ldrb	r5, [r3, #4]
100091e2:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
100091e4:	07ea      	lsls	r2, r5, #31
100091e6:	d517      	bpl.n	10009218 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
100091e8:	69a2      	ldr	r2, [r4, #24]
100091ea:	7811      	ldrb	r1, [r2, #0]
100091ec:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
100091ee:	3201      	adds	r2, #1
100091f0:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
100091f2:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
100091f4:	8be3      	ldrh	r3, [r4, #30]
100091f6:	3b01      	subs	r3, #1
100091f8:	b29b      	uxth	r3, r3
100091fa:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
100091fc:	8be3      	ldrh	r3, [r4, #30]
100091fe:	b29b      	uxth	r3, r3
10009200:	2b00      	cmp	r3, #0
10009202:	d109      	bne.n	10009218 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10009204:	6822      	ldr	r2, [r4, #0]
10009206:	7a13      	ldrb	r3, [r2, #8]
10009208:	2101      	movs	r1, #1
1000920a:	438b      	bics	r3, r1
1000920c:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000920e:	6822      	ldr	r2, [r4, #0]
10009210:	7a11      	ldrb	r1, [r2, #8]
10009212:	2310      	movs	r3, #16
10009214:	430b      	orrs	r3, r1
10009216:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10009218:	06eb      	lsls	r3, r5, #27
1000921a:	d512      	bpl.n	10009242 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000921c:	2321      	movs	r3, #33	; 0x21
1000921e:	5ce3      	ldrb	r3, [r4, r3]
10009220:	07db      	lsls	r3, r3, #31
10009222:	d50e      	bpl.n	10009242 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10009224:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009226:	5ce3      	ldrb	r3, [r4, r3]
10009228:	07db      	lsls	r3, r3, #31
1000922a:	d50a      	bpl.n	10009242 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000922c:	2200      	movs	r2, #0
1000922e:	2322      	movs	r3, #34	; 0x22
10009230:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
10009232:	6822      	ldr	r2, [r4, #0]
10009234:	7a13      	ldrb	r3, [r2, #8]
10009236:	2110      	movs	r1, #16
10009238:	438b      	bics	r3, r1
1000923a:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000923c:	0020      	movs	r0, r4
1000923e:	6863      	ldr	r3, [r4, #4]
10009240:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
10009242:	06ab      	lsls	r3, r5, #26
10009244:	d50a      	bpl.n	1000925c <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009246:	2321      	movs	r3, #33	; 0x21
10009248:	5ce3      	ldrb	r3, [r4, r3]
1000924a:	079b      	lsls	r3, r3, #30
1000924c:	d506      	bpl.n	1000925c <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000924e:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009250:	5ce3      	ldrb	r3, [r4, r3]
10009252:	079b      	lsls	r3, r3, #30
10009254:	d502      	bpl.n	1000925c <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10009256:	68a3      	ldr	r3, [r4, #8]
10009258:	0020      	movs	r0, r4
1000925a:	4798      	blx	r3
		}

	}
}
1000925c:	bd70      	pop	{r4, r5, r6, pc}
1000925e:	46c0      	nop			; (mov r8, r8)
10009260:	10012b80 	.word	0x10012b80

10009264 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
10009264:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
10009266:	4b20      	ldr	r3, [pc, #128]	; (100092e8 <uart_rx1_isr_handler+0x84>)
10009268:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000926a:	6823      	ldr	r3, [r4, #0]
1000926c:	7d1d      	ldrb	r5, [r3, #20]
1000926e:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
10009270:	066a      	lsls	r2, r5, #25
10009272:	d513      	bpl.n	1000929c <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10009274:	211e      	movs	r1, #30
10009276:	2222      	movs	r2, #34	; 0x22
10009278:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000927a:	7e1a      	ldrb	r2, [r3, #24]
1000927c:	3123      	adds	r1, #35	; 0x23
1000927e:	438a      	bics	r2, r1
10009280:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009282:	2321      	movs	r3, #33	; 0x21
10009284:	5ce3      	ldrb	r3, [r4, r3]
10009286:	071b      	lsls	r3, r3, #28
10009288:	d506      	bpl.n	10009298 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000928a:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000928c:	5ce3      	ldrb	r3, [r4, r3]
1000928e:	071b      	lsls	r3, r3, #28
10009290:	d502      	bpl.n	10009298 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
10009292:	0020      	movs	r0, r4
10009294:	6923      	ldr	r3, [r4, #16]
10009296:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10009298:	6823      	ldr	r3, [r4, #0]
1000929a:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000929c:	07eb      	lsls	r3, r5, #31
1000929e:	d522      	bpl.n	100092e6 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
100092a0:	6823      	ldr	r3, [r4, #0]
100092a2:	7c1b      	ldrb	r3, [r3, #16]
100092a4:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
100092a6:	6962      	ldr	r2, [r4, #20]
100092a8:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
100092aa:	6963      	ldr	r3, [r4, #20]
100092ac:	3301      	adds	r3, #1
100092ae:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
100092b0:	8ba3      	ldrh	r3, [r4, #28]
100092b2:	3b01      	subs	r3, #1
100092b4:	b29b      	uxth	r3, r3
100092b6:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
100092b8:	8ba3      	ldrh	r3, [r4, #28]
100092ba:	b29b      	uxth	r3, r3
100092bc:	2b00      	cmp	r3, #0
100092be:	d112      	bne.n	100092e6 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
100092c0:	3321      	adds	r3, #33	; 0x21
100092c2:	5ce3      	ldrb	r3, [r4, r3]
100092c4:	075b      	lsls	r3, r3, #29
100092c6:	d50e      	bpl.n	100092e6 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
100092c8:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
100092ca:	5ce3      	ldrb	r3, [r4, r3]
100092cc:	075b      	lsls	r3, r3, #29
100092ce:	d50a      	bpl.n	100092e6 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
100092d0:	2200      	movs	r2, #0
100092d2:	2322      	movs	r3, #34	; 0x22
100092d4:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
100092d6:	6822      	ldr	r2, [r4, #0]
100092d8:	7e13      	ldrb	r3, [r2, #24]
100092da:	2101      	movs	r1, #1
100092dc:	438b      	bics	r3, r1
100092de:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
100092e0:	68e3      	ldr	r3, [r4, #12]
100092e2:	0020      	movs	r0, r4
100092e4:	4798      	blx	r3
			}
		}
	}
}
100092e6:	bd70      	pop	{r4, r5, r6, pc}
100092e8:	10012b80 	.word	0x10012b80

100092ec <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
100092ec:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
100092ee:	4b21      	ldr	r3, [pc, #132]	; (10009374 <uart_tx1_isr_handler+0x88>)
100092f0:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
100092f2:	6823      	ldr	r3, [r4, #0]
100092f4:	791d      	ldrb	r5, [r3, #4]
100092f6:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
100092f8:	07ea      	lsls	r2, r5, #31
100092fa:	d517      	bpl.n	1000932c <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
100092fc:	69a2      	ldr	r2, [r4, #24]
100092fe:	7811      	ldrb	r1, [r2, #0]
10009300:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
10009302:	3201      	adds	r2, #1
10009304:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
10009306:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10009308:	8be3      	ldrh	r3, [r4, #30]
1000930a:	3b01      	subs	r3, #1
1000930c:	b29b      	uxth	r3, r3
1000930e:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
10009310:	8be3      	ldrh	r3, [r4, #30]
10009312:	b29b      	uxth	r3, r3
10009314:	2b00      	cmp	r3, #0
10009316:	d109      	bne.n	1000932c <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10009318:	6822      	ldr	r2, [r4, #0]
1000931a:	7a13      	ldrb	r3, [r2, #8]
1000931c:	2101      	movs	r1, #1
1000931e:	438b      	bics	r3, r1
10009320:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
10009322:	6822      	ldr	r2, [r4, #0]
10009324:	7a11      	ldrb	r1, [r2, #8]
10009326:	2310      	movs	r3, #16
10009328:	430b      	orrs	r3, r1
1000932a:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000932c:	06eb      	lsls	r3, r5, #27
1000932e:	d512      	bpl.n	10009356 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009330:	2321      	movs	r3, #33	; 0x21
10009332:	5ce3      	ldrb	r3, [r4, r3]
10009334:	07db      	lsls	r3, r3, #31
10009336:	d50e      	bpl.n	10009356 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10009338:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000933a:	5ce3      	ldrb	r3, [r4, r3]
1000933c:	07db      	lsls	r3, r3, #31
1000933e:	d50a      	bpl.n	10009356 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
10009340:	2200      	movs	r2, #0
10009342:	2322      	movs	r3, #34	; 0x22
10009344:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
10009346:	6822      	ldr	r2, [r4, #0]
10009348:	7a13      	ldrb	r3, [r2, #8]
1000934a:	2110      	movs	r1, #16
1000934c:	438b      	bics	r3, r1
1000934e:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
10009350:	0020      	movs	r0, r4
10009352:	6863      	ldr	r3, [r4, #4]
10009354:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
10009356:	06ab      	lsls	r3, r5, #26
10009358:	d50a      	bpl.n	10009370 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000935a:	2321      	movs	r3, #33	; 0x21
1000935c:	5ce3      	ldrb	r3, [r4, r3]
1000935e:	079b      	lsls	r3, r3, #30
10009360:	d506      	bpl.n	10009370 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
10009362:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009364:	5ce3      	ldrb	r3, [r4, r3]
10009366:	079b      	lsls	r3, r3, #30
10009368:	d502      	bpl.n	10009370 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000936a:	68a3      	ldr	r3, [r4, #8]
1000936c:	0020      	movs	r0, r4
1000936e:	4798      	blx	r3
		}

	}
}
10009370:	bd70      	pop	{r4, r5, r6, pc}
10009372:	46c0      	nop			; (mov r8, r8)
10009374:	10012b80 	.word	0x10012b80

10009378 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
10009378:	23e1      	movs	r3, #225	; 0xe1
1000937a:	025b      	lsls	r3, r3, #9
1000937c:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000937e:	2300      	movs	r3, #0
10009380:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
10009382:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
10009384:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
10009386:	71c3      	strb	r3, [r0, #7]
	config->pin_number_pad[0] = PIN_LP_GPIO_2_MUX2_UART0_RXD;
10009388:	3302      	adds	r3, #2
1000938a:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3_MUX2_UART0_TXD;
1000938c:	2203      	movs	r2, #3
1000938e:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4_MUX2_UART0_CTS;
10009390:	3201      	adds	r2, #1
10009392:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5_MUX2_UART0_RTS;
10009394:	3201      	adds	r2, #1
10009396:	6142      	str	r2, [r0, #20]
	
	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_MUX2_UART0_RXD;
10009398:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_MUX2_UART0_TXD;
1000939a:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_MUX2_UART0_CTS;
1000939c:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_MUX2_UART0_RTS;
1000939e:	6243      	str	r3, [r0, #36]	; 0x24
}
100093a0:	4770      	bx	lr
100093a2:	46c0      	nop			; (mov r8, r8)

100093a4 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
100093a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100093a6:	464f      	mov	r7, r9
100093a8:	4646      	mov	r6, r8
100093aa:	b4c0      	push	{r6, r7}
100093ac:	0005      	movs	r5, r0
100093ae:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
100093b0:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
100093b2:	2300      	movs	r3, #0
100093b4:	6043      	str	r3, [r0, #4]
100093b6:	6083      	str	r3, [r0, #8]
100093b8:	60c3      	str	r3, [r0, #12]
100093ba:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
100093bc:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
100093be:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
100093c0:	2200      	movs	r2, #0
100093c2:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
100093c4:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
100093c6:	3320      	adds	r3, #32
100093c8:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
100093ca:	3301      	adds	r3, #1
100093cc:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
100093ce:	3301      	adds	r3, #1
100093d0:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
100093d2:	4b55      	ldr	r3, [pc, #340]	; (10009528 <uart_init+0x184>)
100093d4:	4299      	cmp	r1, r3
100093d6:	d118      	bne.n	1000940a <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
100093d8:	2009      	movs	r0, #9
100093da:	4c54      	ldr	r4, [pc, #336]	; (1000952c <uart_init+0x188>)
100093dc:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
100093de:	200a      	movs	r0, #10
100093e0:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
100093e2:	2009      	movs	r0, #9
100093e4:	4c52      	ldr	r4, [pc, #328]	; (10009530 <uart_init+0x18c>)
100093e6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
100093e8:	200a      	movs	r0, #10
100093ea:	47a0      	blx	r4
		_uart_instances[0] = module;
100093ec:	4b51      	ldr	r3, [pc, #324]	; (10009534 <uart_init+0x190>)
100093ee:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
100093f0:	4951      	ldr	r1, [pc, #324]	; (10009538 <uart_init+0x194>)
100093f2:	2010      	movs	r0, #16
100093f4:	4c51      	ldr	r4, [pc, #324]	; (1000953c <uart_init+0x198>)
100093f6:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
100093f8:	4951      	ldr	r1, [pc, #324]	; (10009540 <uart_init+0x19c>)
100093fa:	2011      	movs	r0, #17
100093fc:	47a0      	blx	r4
100093fe:	4b51      	ldr	r3, [pc, #324]	; (10009544 <uart_init+0x1a0>)
10009400:	2201      	movs	r2, #1
10009402:	601a      	str	r2, [r3, #0]
10009404:	3201      	adds	r2, #1
10009406:	601a      	str	r2, [r3, #0]
10009408:	e01a      	b.n	10009440 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000940a:	4b4f      	ldr	r3, [pc, #316]	; (10009548 <uart_init+0x1a4>)
1000940c:	4299      	cmp	r1, r3
1000940e:	d117      	bne.n	10009440 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
10009410:	200b      	movs	r0, #11
10009412:	4c46      	ldr	r4, [pc, #280]	; (1000952c <uart_init+0x188>)
10009414:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
10009416:	200c      	movs	r0, #12
10009418:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000941a:	200b      	movs	r0, #11
1000941c:	4c44      	ldr	r4, [pc, #272]	; (10009530 <uart_init+0x18c>)
1000941e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
10009420:	200c      	movs	r0, #12
10009422:	47a0      	blx	r4
		_uart_instances[1] = module;
10009424:	4b43      	ldr	r3, [pc, #268]	; (10009534 <uart_init+0x190>)
10009426:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
10009428:	4948      	ldr	r1, [pc, #288]	; (1000954c <uart_init+0x1a8>)
1000942a:	2012      	movs	r0, #18
1000942c:	4c43      	ldr	r4, [pc, #268]	; (1000953c <uart_init+0x198>)
1000942e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
10009430:	4947      	ldr	r1, [pc, #284]	; (10009550 <uart_init+0x1ac>)
10009432:	2013      	movs	r0, #19
10009434:	47a0      	blx	r4
10009436:	4b43      	ldr	r3, [pc, #268]	; (10009544 <uart_init+0x1a0>)
10009438:	2204      	movs	r2, #4
1000943a:	601a      	str	r2, [r3, #0]
1000943c:	3204      	adds	r2, #4
1000943e:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
10009440:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
10009442:	2204      	movs	r2, #4
10009444:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
10009446:	2b00      	cmp	r3, #0
10009448:	d152      	bne.n	100094f0 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000944a:	3302      	adds	r3, #2
1000944c:	4698      	mov	r8, r3
1000944e:	e04f      	b.n	100094f0 <uart_init+0x14c>
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
10009450:	8a31      	ldrh	r1, [r6, #16]
10009452:	ce01      	ldmia	r6!, {r0}
10009454:	b2c0      	uxtb	r0, r0
10009456:	47c8      	blx	r9
	if(config->flow_control) {
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
10009458:	3401      	adds	r4, #1
1000945a:	b2e4      	uxtb	r4, r4
1000945c:	4544      	cmp	r4, r8
1000945e:	d3f7      	bcc.n	10009450 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009460:	682b      	ldr	r3, [r5, #0]
10009462:	7d1a      	ldrb	r2, [r3, #20]
10009464:	07d2      	lsls	r2, r2, #31
10009466:	d504      	bpl.n	10009472 <uart_init+0xce>
10009468:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000946a:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000946c:	7d1a      	ldrb	r2, [r3, #20]
1000946e:	420a      	tst	r2, r1
10009470:	d1fb      	bne.n	1000946a <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
10009472:	2100      	movs	r1, #0
10009474:	2220      	movs	r2, #32
10009476:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
10009478:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_UART_CONFIGURATION_CTS_ENABLE_1;
1000947a:	1e59      	subs	r1, r3, #1
1000947c:	418b      	sbcs	r3, r1
1000947e:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
10009480:	793b      	ldrb	r3, [r7, #4]
10009482:	797a      	ldrb	r2, [r7, #5]
10009484:	4313      	orrs	r3, r2
10009486:	430b      	orrs	r3, r1
	switch(config->parity) {
10009488:	79ba      	ldrb	r2, [r7, #6]
1000948a:	2a02      	cmp	r2, #2
1000948c:	d00d      	beq.n	100094aa <uart_init+0x106>
1000948e:	b2d1      	uxtb	r1, r2
10009490:	2902      	cmp	r1, #2
10009492:	d802      	bhi.n	1000949a <uart_init+0xf6>
10009494:	2a01      	cmp	r2, #1
10009496:	d005      	beq.n	100094a4 <uart_init+0x100>
10009498:	e00f      	b.n	100094ba <uart_init+0x116>
1000949a:	2a03      	cmp	r2, #3
1000949c:	d008      	beq.n	100094b0 <uart_init+0x10c>
1000949e:	2a04      	cmp	r2, #4
100094a0:	d009      	beq.n	100094b6 <uart_init+0x112>
100094a2:	e00a      	b.n	100094ba <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
100094a4:	2202      	movs	r2, #2
100094a6:	4313      	orrs	r3, r2
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_0;
			break;
100094a8:	e007      	b.n	100094ba <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_1;
100094aa:	2206      	movs	r2, #6
100094ac:	4313      	orrs	r3, r2
			break;
100094ae:	e004      	b.n	100094ba <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_2;
100094b0:	220a      	movs	r2, #10
100094b2:	4313      	orrs	r3, r2
			break;
100094b4:	e001      	b.n	100094ba <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_3;
100094b6:	220e      	movs	r2, #14
100094b8:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
100094ba:	2220      	movs	r2, #32
100094bc:	6829      	ldr	r1, [r5, #0]
100094be:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
100094c0:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
100094c2:	4b24      	ldr	r3, [pc, #144]	; (10009554 <uart_init+0x1b0>)
100094c4:	4798      	blx	r3
100094c6:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
100094c8:	0031      	movs	r1, r6
100094ca:	4b23      	ldr	r3, [pc, #140]	; (10009558 <uart_init+0x1b4>)
100094cc:	4798      	blx	r3
100094ce:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
100094d0:	0400      	lsls	r0, r0, #16
100094d2:	0c00      	lsrs	r0, r0, #16
100094d4:	4370      	muls	r0, r6
100094d6:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
100094d8:	0931      	lsrs	r1, r6, #4
100094da:	4288      	cmp	r0, r1
100094dc:	d906      	bls.n	100094ec <uart_init+0x148>
100094de:	2300      	movs	r3, #0
		i++;
100094e0:	3301      	adds	r3, #1
100094e2:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
100094e4:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
100094e6:	4288      	cmp	r0, r1
100094e8:	d8fa      	bhi.n	100094e0 <uart_init+0x13c>
100094ea:	e007      	b.n	100094fc <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
100094ec:	2300      	movs	r3, #0
100094ee:	e005      	b.n	100094fc <uart_init+0x158>
100094f0:	003e      	movs	r6, r7
100094f2:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
100094f4:	2400      	movs	r4, #0
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
100094f6:	4b19      	ldr	r3, [pc, #100]	; (1000955c <uart_init+0x1b8>)
100094f8:	4699      	mov	r9, r3
100094fa:	e7a9      	b.n	10009450 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_UART_CLOCK_SOURCE_CLOCK_SELECT_0;
100094fc:	2100      	movs	r1, #0
100094fe:	2028      	movs	r0, #40	; 0x28
10009500:	682c      	ldr	r4, [r5, #0]
10009502:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
10009504:	3301      	adds	r3, #1
10009506:	071b      	lsls	r3, r3, #28
10009508:	0f5b      	lsrs	r3, r3, #29
1000950a:	00d2      	lsls	r2, r2, #3
1000950c:	4313      	orrs	r3, r2
1000950e:	b29b      	uxth	r3, r3
10009510:	682a      	ldr	r2, [r5, #0]
10009512:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
10009514:	682b      	ldr	r3, [r5, #0]
10009516:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
10009518:	682b      	ldr	r3, [r5, #0]
1000951a:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000951c:	2000      	movs	r0, #0
1000951e:	bc0c      	pop	{r2, r3}
10009520:	4690      	mov	r8, r2
10009522:	4699      	mov	r9, r3
10009524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009526:	46c0      	nop			; (mov r8, r8)
10009528:	40004000 	.word	0x40004000
1000952c:	10008cd9 	.word	0x10008cd9
10009530:	1000897d 	.word	0x1000897d
10009534:	10012b80 	.word	0x10012b80
10009538:	10009151 	.word	0x10009151
1000953c:	10009141 	.word	0x10009141
10009540:	100091d9 	.word	0x100091d9
10009544:	e000e100 	.word	0xe000e100
10009548:	40005000 	.word	0x40005000
1000954c:	10009265 	.word	0x10009265
10009550:	100092ed 	.word	0x100092ed
10009554:	10008971 	.word	0x10008971
10009558:	1000e0a1 	.word	0x1000e0a1
1000955c:	100085cd 	.word	0x100085cd

10009560 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
10009560:	6802      	ldr	r2, [r0, #0]
10009562:	2001      	movs	r0, #1
10009564:	7913      	ldrb	r3, [r2, #4]
10009566:	4203      	tst	r3, r0
10009568:	d0fc      	beq.n	10009564 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000956a:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000956c:	2000      	movs	r0, #0
1000956e:	4770      	bx	lr

10009570 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
10009570:	6802      	ldr	r2, [r0, #0]
10009572:	2001      	movs	r0, #1
10009574:	7d13      	ldrb	r3, [r2, #20]
10009576:	4203      	tst	r3, r0
10009578:	d0fc      	beq.n	10009574 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000957a:	7c13      	ldrb	r3, [r2, #16]
1000957c:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000957e:	2000      	movs	r0, #0
10009580:	4770      	bx	lr
10009582:	46c0      	nop			; (mov r8, r8)

10009584 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10009584:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
10009586:	2a00      	cmp	r2, #0
10009588:	d00d      	beq.n	100095a6 <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000958a:	330b      	adds	r3, #11
1000958c:	5cc3      	ldrb	r3, [r0, r3]
1000958e:	b2db      	uxtb	r3, r3
10009590:	2b05      	cmp	r3, #5
10009592:	d008      	beq.n	100095a6 <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
10009594:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
10009596:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
10009598:	2205      	movs	r2, #5
1000959a:	2322      	movs	r3, #34	; 0x22
1000959c:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000959e:	6803      	ldr	r3, [r0, #0]
100095a0:	3a04      	subs	r2, #4
100095a2:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
100095a4:	2300      	movs	r3, #0
}
100095a6:	0018      	movs	r0, r3
100095a8:	4770      	bx	lr
100095aa:	46c0      	nop			; (mov r8, r8)

100095ac <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
100095ac:	0093      	lsls	r3, r2, #2
100095ae:	18c3      	adds	r3, r0, r3
100095b0:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
100095b2:	2120      	movs	r1, #32
100095b4:	2301      	movs	r3, #1
100095b6:	4093      	lsls	r3, r2
100095b8:	5c42      	ldrb	r2, [r0, r1]
100095ba:	4313      	orrs	r3, r2
100095bc:	5443      	strb	r3, [r0, r1]
}
100095be:	4770      	bx	lr

100095c0 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
100095c0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
100095c2:	2221      	movs	r2, #33	; 0x21
100095c4:	2301      	movs	r3, #1
100095c6:	408b      	lsls	r3, r1
100095c8:	5c84      	ldrb	r4, [r0, r2]
100095ca:	4323      	orrs	r3, r4
100095cc:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
100095ce:	2901      	cmp	r1, #1
100095d0:	d104      	bne.n	100095dc <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
100095d2:	6802      	ldr	r2, [r0, #0]
100095d4:	7a11      	ldrb	r1, [r2, #8]
100095d6:	2320      	movs	r3, #32
100095d8:	430b      	orrs	r3, r1
100095da:	7213      	strb	r3, [r2, #8]
	}
}
100095dc:	bd10      	pop	{r4, pc}
100095de:	46c0      	nop			; (mov r8, r8)

100095e0 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
100095e0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
100095e2:	2201      	movs	r2, #1
100095e4:	408a      	lsls	r2, r1
100095e6:	2421      	movs	r4, #33	; 0x21
100095e8:	5d03      	ldrb	r3, [r0, r4]
100095ea:	4393      	bics	r3, r2
100095ec:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
100095ee:	2901      	cmp	r1, #1
100095f0:	d104      	bne.n	100095fc <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
100095f2:	6802      	ldr	r2, [r0, #0]
100095f4:	7a13      	ldrb	r3, [r2, #8]
100095f6:	311f      	adds	r1, #31
100095f8:	438b      	bics	r3, r1
100095fa:	7213      	strb	r3, [r2, #8]
	}

}
100095fc:	bd10      	pop	{r4, pc}
100095fe:	46c0      	nop			; (mov r8, r8)

10009600 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
10009600:	b5f0      	push	{r4, r5, r6, r7, lr}
10009602:	4647      	mov	r7, r8
10009604:	b480      	push	{r7}
10009606:	000c      	movs	r4, r1
10009608:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000960a:	2800      	cmp	r0, #0
1000960c:	d10d      	bne.n	1000962a <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000960e:	2a00      	cmp	r2, #0
10009610:	dd0e      	ble.n	10009630 <_read+0x30>
10009612:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
10009614:	4e08      	ldr	r6, [pc, #32]	; (10009638 <_read+0x38>)
10009616:	4d09      	ldr	r5, [pc, #36]	; (1000963c <_read+0x3c>)
10009618:	6830      	ldr	r0, [r6, #0]
1000961a:	0021      	movs	r1, r4
1000961c:	682b      	ldr	r3, [r5, #0]
1000961e:	4798      	blx	r3
		ptr++;
10009620:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
10009622:	42a7      	cmp	r7, r4
10009624:	d1f8      	bne.n	10009618 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
10009626:	4640      	mov	r0, r8
10009628:	e003      	b.n	10009632 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000962a:	2001      	movs	r0, #1
1000962c:	4240      	negs	r0, r0
1000962e:	e000      	b.n	10009632 <_read+0x32>
	}

	for (; len > 0; --len) {
10009630:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
10009632:	bc04      	pop	{r2}
10009634:	4690      	mov	r8, r2
10009636:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009638:	10012b90 	.word	0x10012b90
1000963c:	10012b88 	.word	0x10012b88

10009640 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
10009640:	b5f0      	push	{r4, r5, r6, r7, lr}
10009642:	4647      	mov	r7, r8
10009644:	b480      	push	{r7}
10009646:	000e      	movs	r6, r1
10009648:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000964a:	3801      	subs	r0, #1
1000964c:	2802      	cmp	r0, #2
1000964e:	d811      	bhi.n	10009674 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
10009650:	2a00      	cmp	r2, #0
10009652:	d012      	beq.n	1000967a <_write+0x3a>
10009654:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
10009656:	4b0c      	ldr	r3, [pc, #48]	; (10009688 <_write+0x48>)
10009658:	4698      	mov	r8, r3
1000965a:	4f0c      	ldr	r7, [pc, #48]	; (1000968c <_write+0x4c>)
1000965c:	4643      	mov	r3, r8
1000965e:	6818      	ldr	r0, [r3, #0]
10009660:	5d31      	ldrb	r1, [r6, r4]
10009662:	683b      	ldr	r3, [r7, #0]
10009664:	4798      	blx	r3
10009666:	2800      	cmp	r0, #0
10009668:	db09      	blt.n	1000967e <_write+0x3e>
			return -1;
		}
		++nChars;
1000966a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000966c:	42a5      	cmp	r5, r4
1000966e:	d1f5      	bne.n	1000965c <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
10009670:	0020      	movs	r0, r4
10009672:	e006      	b.n	10009682 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
10009674:	2001      	movs	r0, #1
10009676:	4240      	negs	r0, r0
10009678:	e003      	b.n	10009682 <_write+0x42>
	}

	for (; len != 0; --len) {
1000967a:	2000      	movs	r0, #0
1000967c:	e001      	b.n	10009682 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000967e:	2001      	movs	r0, #1
10009680:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
10009682:	bc04      	pop	{r2}
10009684:	4690      	mov	r8, r2
10009686:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009688:	10012b90 	.word	0x10012b90
1000968c:	10012b8c 	.word	0x10012b8c

10009690 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
10009690:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
10009692:	4a06      	ldr	r2, [pc, #24]	; (100096ac <_sbrk+0x1c>)
10009694:	6812      	ldr	r2, [r2, #0]
10009696:	2a00      	cmp	r2, #0
10009698:	d102      	bne.n	100096a0 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000969a:	4905      	ldr	r1, [pc, #20]	; (100096b0 <_sbrk+0x20>)
1000969c:	4a03      	ldr	r2, [pc, #12]	; (100096ac <_sbrk+0x1c>)
1000969e:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
100096a0:	4a02      	ldr	r2, [pc, #8]	; (100096ac <_sbrk+0x1c>)
100096a2:	6810      	ldr	r0, [r2, #0]

	heap += incr;
100096a4:	18c3      	adds	r3, r0, r3
100096a6:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
100096a8:	4770      	bx	lr
100096aa:	46c0      	nop			; (mov r8, r8)
100096ac:	10011004 	.word	0x10011004
100096b0:	10014498 	.word	0x10014498

100096b4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
100096b4:	2001      	movs	r0, #1
100096b6:	4240      	negs	r0, r0
100096b8:	4770      	bx	lr
100096ba:	46c0      	nop			; (mov r8, r8)

100096bc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
100096bc:	2380      	movs	r3, #128	; 0x80
100096be:	019b      	lsls	r3, r3, #6
100096c0:	604b      	str	r3, [r1, #4]

	return 0;
}
100096c2:	2000      	movs	r0, #0
100096c4:	4770      	bx	lr
100096c6:	46c0      	nop			; (mov r8, r8)

100096c8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
100096c8:	2001      	movs	r0, #1
100096ca:	4770      	bx	lr

100096cc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
100096cc:	2000      	movs	r0, #0
100096ce:	4770      	bx	lr

100096d0 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
100096d0:	2000      	movs	r0, #0
100096d2:	4770      	bx	lr

100096d4 <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
100096d4:	2000      	movs	r0, #0
100096d6:	4770      	bx	lr

100096d8 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
100096d8:	78c0      	ldrb	r0, [r0, #3]
100096da:	2800      	cmp	r0, #0
100096dc:	d000      	beq.n	100096e0 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
100096de:	20e2      	movs	r0, #226	; 0xe2
}
100096e0:	4770      	bx	lr
100096e2:	46c0      	nop			; (mov r8, r8)

100096e4 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
100096e4:	2000      	movs	r0, #0
100096e6:	4770      	bx	lr

100096e8 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
100096e8:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
100096ea:	7800      	ldrb	r0, [r0, #0]
100096ec:	2800      	cmp	r0, #0
100096ee:	d006      	beq.n	100096fe <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
100096f0:	4803      	ldr	r0, [pc, #12]	; (10009700 <ble_scan_report_handler+0x18>)
100096f2:	4b04      	ldr	r3, [pc, #16]	; (10009704 <ble_scan_report_handler+0x1c>)
100096f4:	4798      	blx	r3
100096f6:	4804      	ldr	r0, [pc, #16]	; (10009708 <ble_scan_report_handler+0x20>)
100096f8:	4b04      	ldr	r3, [pc, #16]	; (1000970c <ble_scan_report_handler+0x24>)
100096fa:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
100096fc:	20e2      	movs	r0, #226	; 0xe2
}
100096fe:	bd10      	pop	{r4, pc}
10009700:	10010728 	.word	0x10010728
10009704:	1000f2ed 	.word	0x1000f2ed
10009708:	1001072c 	.word	0x1001072c
1000970c:	1000f1cd 	.word	0x1000f1cd

10009710 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
10009710:	b510      	push	{r4, lr}
10009712:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009714:	78c0      	ldrb	r0, [r0, #3]
10009716:	2800      	cmp	r0, #0
10009718:	d008      	beq.n	1000972c <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000971a:	4805      	ldr	r0, [pc, #20]	; (10009730 <ble_mtu_changed_cmd_complete_handler+0x20>)
1000971c:	4b05      	ldr	r3, [pc, #20]	; (10009734 <ble_mtu_changed_cmd_complete_handler+0x24>)
1000971e:	4798      	blx	r3
10009720:	78a2      	ldrb	r2, [r4, #2]
10009722:	8821      	ldrh	r1, [r4, #0]
10009724:	4804      	ldr	r0, [pc, #16]	; (10009738 <ble_mtu_changed_cmd_complete_handler+0x28>)
10009726:	4b05      	ldr	r3, [pc, #20]	; (1000973c <ble_mtu_changed_cmd_complete_handler+0x2c>)
10009728:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000972a:	20e2      	movs	r0, #226	; 0xe2
}
1000972c:	bd10      	pop	{r4, pc}
1000972e:	46c0      	nop			; (mov r8, r8)
10009730:	10010728 	.word	0x10010728
10009734:	1000f2ed 	.word	0x1000f2ed
10009738:	10010740 	.word	0x10010740
1000973c:	1000f1cd 	.word	0x1000f1cd

10009740 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
10009740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009742:	0004      	movs	r4, r0
10009744:	4b19      	ldr	r3, [pc, #100]	; (100097ac <ble_disconnected_state_handler+0x6c>)
10009746:	229b      	movs	r2, #155	; 0x9b
10009748:	0092      	lsls	r2, r2, #2
1000974a:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000974c:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000974e:	2600      	movs	r6, #0
10009750:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009752:	001a      	movs	r2, r3
10009754:	3a56      	subs	r2, #86	; 0x56
10009756:	8811      	ldrh	r1, [r2, #0]
10009758:	8822      	ldrh	r2, [r4, #0]
1000975a:	4291      	cmp	r1, r2
1000975c:	d119      	bne.n	10009792 <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000975e:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009760:	2a05      	cmp	r2, #5
10009762:	d001      	beq.n	10009768 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009764:	2a08      	cmp	r2, #8
10009766:	d101      	bne.n	1000976c <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009768:	7007      	strb	r7, [r0, #0]
1000976a:	e012      	b.n	10009792 <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000976c:	2a07      	cmp	r2, #7
1000976e:	d80f      	bhi.n	10009790 <ble_disconnected_state_handler+0x50>
10009770:	0092      	lsls	r2, r2, #2
10009772:	490f      	ldr	r1, [pc, #60]	; (100097b0 <ble_disconnected_state_handler+0x70>)
10009774:	588a      	ldr	r2, [r1, r2]
10009776:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009778:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
1000977a:	4a0e      	ldr	r2, [pc, #56]	; (100097b4 <ble_disconnected_state_handler+0x74>)
1000977c:	7812      	ldrb	r2, [r2, #0]
1000977e:	2a00      	cmp	r2, #0
10009780:	d007      	beq.n	10009792 <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
10009782:	4a0c      	ldr	r2, [pc, #48]	; (100097b4 <ble_disconnected_state_handler+0x74>)
10009784:	7812      	ldrb	r2, [r2, #0]
10009786:	3a01      	subs	r2, #1
10009788:	b2d2      	uxtb	r2, r2
1000978a:	490a      	ldr	r1, [pc, #40]	; (100097b4 <ble_disconnected_state_handler+0x74>)
1000978c:	700a      	strb	r2, [r1, #0]
1000978e:	e000      	b.n	10009792 <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009790:	7006      	strb	r6, [r0, #0]
10009792:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009794:	42ab      	cmp	r3, r5
10009796:	d1db      	bne.n	10009750 <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
10009798:	4807      	ldr	r0, [pc, #28]	; (100097b8 <ble_disconnected_state_handler+0x78>)
1000979a:	4b08      	ldr	r3, [pc, #32]	; (100097bc <ble_disconnected_state_handler+0x7c>)
1000979c:	4798      	blx	r3
1000979e:	8822      	ldrh	r2, [r4, #0]
100097a0:	78a1      	ldrb	r1, [r4, #2]
100097a2:	4807      	ldr	r0, [pc, #28]	; (100097c0 <ble_disconnected_state_handler+0x80>)
100097a4:	4b07      	ldr	r3, [pc, #28]	; (100097c4 <ble_disconnected_state_handler+0x84>)
100097a6:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
100097a8:	2000      	movs	r0, #0
100097aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100097ac:	10012c0a 	.word	0x10012c0a
100097b0:	100105b8 	.word	0x100105b8
100097b4:	10012e18 	.word	0x10012e18
100097b8:	10010728 	.word	0x10010728
100097bc:	1000f2ed 	.word	0x1000f2ed
100097c0:	10010778 	.word	0x10010778
100097c4:	1000f1cd 	.word	0x1000f1cd

100097c8 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
100097c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100097ca:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
100097cc:	8801      	ldrh	r1, [r0, #0]
100097ce:	4b28      	ldr	r3, [pc, #160]	; (10009870 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100097d0:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
100097d2:	891a      	ldrh	r2, [r3, #8]
100097d4:	428a      	cmp	r2, r1
100097d6:	d104      	bne.n	100097e2 <ble_encryption_status_change_handler+0x1a>
100097d8:	001a      	movs	r2, r3
100097da:	325e      	adds	r2, #94	; 0x5e
100097dc:	7812      	ldrb	r2, [r2, #0]
100097de:	2a06      	cmp	r2, #6
100097e0:	d02e      	beq.n	10009840 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100097e2:	3401      	adds	r4, #1
100097e4:	b2e4      	uxtb	r4, r4
100097e6:	337c      	adds	r3, #124	; 0x7c
100097e8:	2c05      	cmp	r4, #5
100097ea:	d1f2      	bne.n	100097d2 <ble_encryption_status_change_handler+0xa>
100097ec:	e039      	b.n	10009862 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
100097ee:	4920      	ldr	r1, [pc, #128]	; (10009870 <ble_encryption_status_change_handler+0xa8>)
100097f0:	0163      	lsls	r3, r4, #5
100097f2:	1b1a      	subs	r2, r3, r4
100097f4:	0092      	lsls	r2, r2, #2
100097f6:	188a      	adds	r2, r1, r2
100097f8:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
100097fa:	0014      	movs	r4, r2
100097fc:	345e      	adds	r4, #94	; 0x5e
100097fe:	2307      	movs	r3, #7
10009800:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
10009802:	481c      	ldr	r0, [pc, #112]	; (10009874 <ble_encryption_status_change_handler+0xac>)
10009804:	4b1c      	ldr	r3, [pc, #112]	; (10009878 <ble_encryption_status_change_handler+0xb0>)
10009806:	4798      	blx	r3
10009808:	481c      	ldr	r0, [pc, #112]	; (1000987c <ble_encryption_status_change_handler+0xb4>)
1000980a:	4b1d      	ldr	r3, [pc, #116]	; (10009880 <ble_encryption_status_change_handler+0xb8>)
1000980c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000980e:	25e2      	movs	r5, #226	; 0xe2
10009810:	e02b      	b.n	1000986a <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
10009812:	4818      	ldr	r0, [pc, #96]	; (10009874 <ble_encryption_status_change_handler+0xac>)
10009814:	4b18      	ldr	r3, [pc, #96]	; (10009878 <ble_encryption_status_change_handler+0xb0>)
10009816:	4798      	blx	r3
10009818:	481a      	ldr	r0, [pc, #104]	; (10009884 <ble_encryption_status_change_handler+0xbc>)
1000981a:	4b19      	ldr	r3, [pc, #100]	; (10009880 <ble_encryption_status_change_handler+0xb8>)
1000981c:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000981e:	4914      	ldr	r1, [pc, #80]	; (10009870 <ble_encryption_status_change_handler+0xa8>)
10009820:	0163      	lsls	r3, r4, #5
10009822:	1b1a      	subs	r2, r3, r4
10009824:	0092      	lsls	r2, r2, #2
10009826:	188a      	adds	r2, r1, r2
10009828:	0010      	movs	r0, r2
1000982a:	305e      	adds	r0, #94	; 0x5e
1000982c:	2708      	movs	r7, #8
1000982e:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
10009830:	78f0      	ldrb	r0, [r6, #3]
10009832:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
10009834:	78b2      	ldrb	r2, [r6, #2]
10009836:	1b1c      	subs	r4, r3, r4
10009838:	00a4      	lsls	r4, r4, #2
1000983a:	190c      	adds	r4, r1, r4
1000983c:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000983e:	e014      	b.n	1000986a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009840:	78b5      	ldrb	r5, [r6, #2]
10009842:	2d00      	cmp	r5, #0
10009844:	d0e5      	beq.n	10009812 <ble_encryption_status_change_handler+0x4a>
10009846:	e7d2      	b.n	100097ee <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
10009848:	4e0a      	ldr	r6, [pc, #40]	; (10009874 <ble_encryption_status_change_handler+0xac>)
1000984a:	0030      	movs	r0, r6
1000984c:	4d0a      	ldr	r5, [pc, #40]	; (10009878 <ble_encryption_status_change_handler+0xb0>)
1000984e:	47a8      	blx	r5
10009850:	480c      	ldr	r0, [pc, #48]	; (10009884 <ble_encryption_status_change_handler+0xbc>)
10009852:	4c0b      	ldr	r4, [pc, #44]	; (10009880 <ble_encryption_status_change_handler+0xb8>)
10009854:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
10009856:	0030      	movs	r0, r6
10009858:	47a8      	blx	r5
1000985a:	480b      	ldr	r0, [pc, #44]	; (10009888 <ble_encryption_status_change_handler+0xc0>)
1000985c:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000985e:	25e2      	movs	r5, #226	; 0xe2
10009860:	e003      	b.n	1000986a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009862:	78b5      	ldrb	r5, [r6, #2]
10009864:	2d00      	cmp	r5, #0
10009866:	d1c2      	bne.n	100097ee <ble_encryption_status_change_handler+0x26>
10009868:	e7ee      	b.n	10009848 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000986a:	0028      	movs	r0, r5
1000986c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000986e:	46c0      	nop			; (mov r8, r8)
10009870:	10012bac 	.word	0x10012bac
10009874:	10010728 	.word	0x10010728
10009878:	1000f2ed 	.word	0x1000f2ed
1000987c:	100107a8 	.word	0x100107a8
10009880:	1000f1cd 	.word	0x1000f1cd
10009884:	100107bc 	.word	0x100107bc
10009888:	100107e0 	.word	0x100107e0

1000988c <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000988c:	b510      	push	{r4, lr}
1000988e:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
10009890:	4b15      	ldr	r3, [pc, #84]	; (100098e8 <ble_scan_info_handler+0x5c>)
10009892:	781b      	ldrb	r3, [r3, #0]
10009894:	b2db      	uxtb	r3, r3
10009896:	2b13      	cmp	r3, #19
10009898:	d812      	bhi.n	100098c0 <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000989a:	4c13      	ldr	r4, [pc, #76]	; (100098e8 <ble_scan_info_handler+0x5c>)
1000989c:	7823      	ldrb	r3, [r4, #0]
1000989e:	b2db      	uxtb	r3, r3
100098a0:	0098      	lsls	r0, r3, #2
100098a2:	18c0      	adds	r0, r0, r3
100098a4:	00c0      	lsls	r0, r0, #3
100098a6:	18c3      	adds	r3, r0, r3
100098a8:	4810      	ldr	r0, [pc, #64]	; (100098ec <ble_scan_info_handler+0x60>)
100098aa:	1818      	adds	r0, r3, r0
100098ac:	2229      	movs	r2, #41	; 0x29
100098ae:	4b10      	ldr	r3, [pc, #64]	; (100098f0 <ble_scan_info_handler+0x64>)
100098b0:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
100098b2:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
100098b4:	7823      	ldrb	r3, [r4, #0]
100098b6:	3301      	adds	r3, #1
100098b8:	b2db      	uxtb	r3, r3
100098ba:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
100098bc:	2300      	movs	r3, #0
100098be:	e011      	b.n	100098e4 <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
100098c0:	480c      	ldr	r0, [pc, #48]	; (100098f4 <ble_scan_info_handler+0x68>)
100098c2:	4b0d      	ldr	r3, [pc, #52]	; (100098f8 <ble_scan_info_handler+0x6c>)
100098c4:	4798      	blx	r3
100098c6:	480d      	ldr	r0, [pc, #52]	; (100098fc <ble_scan_info_handler+0x70>)
100098c8:	4b0d      	ldr	r3, [pc, #52]	; (10009900 <ble_scan_info_handler+0x74>)
100098ca:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
100098cc:	4b0d      	ldr	r3, [pc, #52]	; (10009904 <ble_scan_info_handler+0x78>)
100098ce:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
100098d0:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
100098d2:	2800      	cmp	r0, #0
100098d4:	d006      	beq.n	100098e4 <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
100098d6:	4807      	ldr	r0, [pc, #28]	; (100098f4 <ble_scan_info_handler+0x68>)
100098d8:	4b07      	ldr	r3, [pc, #28]	; (100098f8 <ble_scan_info_handler+0x6c>)
100098da:	4798      	blx	r3
100098dc:	480a      	ldr	r0, [pc, #40]	; (10009908 <ble_scan_info_handler+0x7c>)
100098de:	4b08      	ldr	r3, [pc, #32]	; (10009900 <ble_scan_info_handler+0x74>)
100098e0:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
100098e2:	23e2      	movs	r3, #226	; 0xe2
	}
}
100098e4:	0018      	movs	r0, r3
100098e6:	bd10      	pop	{r4, pc}
100098e8:	100118ec 	.word	0x100118ec
100098ec:	10012e90 	.word	0x10012e90
100098f0:	1000f1ab 	.word	0x1000f1ab
100098f4:	10010728 	.word	0x10010728
100098f8:	1000f2ed 	.word	0x1000f2ed
100098fc:	10010808 	.word	0x10010808
10009900:	1000f1cd 	.word	0x1000f1cd
10009904:	1000c235 	.word	0x1000c235
10009908:	10010840 	.word	0x10010840

1000990c <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000990c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000990e:	464f      	mov	r7, r9
10009910:	4646      	mov	r6, r8
10009912:	b4c0      	push	{r6, r7}
10009914:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009916:	8841      	ldrh	r1, [r0, #2]
10009918:	4b3a      	ldr	r3, [pc, #232]	; (10009a04 <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000991a:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000991c:	891a      	ldrh	r2, [r3, #8]
1000991e:	428a      	cmp	r2, r1
10009920:	d104      	bne.n	1000992c <ble_pair_done_handler+0x20>
10009922:	001a      	movs	r2, r3
10009924:	325e      	adds	r2, #94	; 0x5e
10009926:	7812      	ldrb	r2, [r2, #0]
10009928:	2a03      	cmp	r2, #3
1000992a:	d062      	beq.n	100099f2 <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000992c:	3401      	adds	r4, #1
1000992e:	b2e4      	uxtb	r4, r4
10009930:	337c      	adds	r3, #124	; 0x7c
10009932:	2c05      	cmp	r4, #5
10009934:	d1f2      	bne.n	1000991c <ble_pair_done_handler+0x10>
10009936:	e02b      	b.n	10009990 <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
10009938:	0163      	lsls	r3, r4, #5
1000993a:	1b1c      	subs	r4, r3, r4
1000993c:	00a4      	lsls	r4, r4, #2
1000993e:	4b31      	ldr	r3, [pc, #196]	; (10009a04 <ble_pair_done_handler+0xf8>)
10009940:	191c      	adds	r4, r3, r4
10009942:	345e      	adds	r4, #94	; 0x5e
10009944:	7823      	ldrb	r3, [r4, #0]
10009946:	2b01      	cmp	r3, #1
10009948:	d913      	bls.n	10009972 <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
1000994a:	482f      	ldr	r0, [pc, #188]	; (10009a08 <ble_pair_done_handler+0xfc>)
1000994c:	4b2f      	ldr	r3, [pc, #188]	; (10009a0c <ble_pair_done_handler+0x100>)
1000994e:	4798      	blx	r3
10009950:	482f      	ldr	r0, [pc, #188]	; (10009a10 <ble_pair_done_handler+0x104>)
10009952:	4b30      	ldr	r3, [pc, #192]	; (10009a14 <ble_pair_done_handler+0x108>)
10009954:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
10009956:	8868      	ldrh	r0, [r5, #2]
10009958:	2113      	movs	r1, #19
1000995a:	4b2f      	ldr	r3, [pc, #188]	; (10009a18 <ble_pair_done_handler+0x10c>)
1000995c:	4798      	blx	r3
1000995e:	1e06      	subs	r6, r0, #0
10009960:	d04b      	beq.n	100099fa <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
10009962:	4829      	ldr	r0, [pc, #164]	; (10009a08 <ble_pair_done_handler+0xfc>)
10009964:	4b29      	ldr	r3, [pc, #164]	; (10009a0c <ble_pair_done_handler+0x100>)
10009966:	4798      	blx	r3
10009968:	482c      	ldr	r0, [pc, #176]	; (10009a1c <ble_pair_done_handler+0x110>)
1000996a:	4b2a      	ldr	r3, [pc, #168]	; (10009a14 <ble_pair_done_handler+0x108>)
1000996c:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000996e:	26e2      	movs	r6, #226	; 0xe2
10009970:	e043      	b.n	100099fa <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
10009972:	2600      	movs	r6, #0
10009974:	e041      	b.n	100099fa <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
10009976:	4e24      	ldr	r6, [pc, #144]	; (10009a08 <ble_pair_done_handler+0xfc>)
10009978:	0030      	movs	r0, r6
1000997a:	4d24      	ldr	r5, [pc, #144]	; (10009a0c <ble_pair_done_handler+0x100>)
1000997c:	47a8      	blx	r5
1000997e:	4828      	ldr	r0, [pc, #160]	; (10009a20 <ble_pair_done_handler+0x114>)
10009980:	4c24      	ldr	r4, [pc, #144]	; (10009a14 <ble_pair_done_handler+0x108>)
10009982:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
10009984:	0030      	movs	r0, r6
10009986:	47a8      	blx	r5
10009988:	4826      	ldr	r0, [pc, #152]	; (10009a24 <ble_pair_done_handler+0x118>)
1000998a:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000998c:	26e2      	movs	r6, #226	; 0xe2
1000998e:	e034      	b.n	100099fa <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009990:	792b      	ldrb	r3, [r5, #4]
10009992:	2b00      	cmp	r3, #0
10009994:	d1d0      	bne.n	10009938 <ble_pair_done_handler+0x2c>
10009996:	e7ee      	b.n	10009976 <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
10009998:	481b      	ldr	r0, [pc, #108]	; (10009a08 <ble_pair_done_handler+0xfc>)
1000999a:	4b1c      	ldr	r3, [pc, #112]	; (10009a0c <ble_pair_done_handler+0x100>)
1000999c:	4798      	blx	r3
1000999e:	4820      	ldr	r0, [pc, #128]	; (10009a20 <ble_pair_done_handler+0x114>)
100099a0:	4b1c      	ldr	r3, [pc, #112]	; (10009a14 <ble_pair_done_handler+0x108>)
100099a2:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
100099a4:	782a      	ldrb	r2, [r5, #0]
100099a6:	4b17      	ldr	r3, [pc, #92]	; (10009a04 <ble_pair_done_handler+0xf8>)
100099a8:	4699      	mov	r9, r3
100099aa:	0167      	lsls	r7, r4, #5
100099ac:	1b3b      	subs	r3, r7, r4
100099ae:	009b      	lsls	r3, r3, #2
100099b0:	444b      	add	r3, r9
100099b2:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
100099b4:	792a      	ldrb	r2, [r5, #4]
100099b6:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
100099b8:	335e      	adds	r3, #94	; 0x5e
100099ba:	2205      	movs	r2, #5
100099bc:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
100099be:	1b38      	subs	r0, r7, r4
100099c0:	0080      	lsls	r0, r0, #2
100099c2:	4448      	add	r0, r9
100099c4:	3036      	adds	r0, #54	; 0x36
100099c6:	0029      	movs	r1, r5
100099c8:	3122      	adds	r1, #34	; 0x22
100099ca:	320b      	adds	r2, #11
100099cc:	4b16      	ldr	r3, [pc, #88]	; (10009a28 <ble_pair_done_handler+0x11c>)
100099ce:	4698      	mov	r8, r3
100099d0:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
100099d2:	1b38      	subs	r0, r7, r4
100099d4:	0080      	lsls	r0, r0, #2
100099d6:	4448      	add	r0, r9
100099d8:	3046      	adds	r0, #70	; 0x46
100099da:	0029      	movs	r1, r5
100099dc:	3132      	adds	r1, #50	; 0x32
100099de:	2217      	movs	r2, #23
100099e0:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
100099e2:	1b38      	subs	r0, r7, r4
100099e4:	0080      	lsls	r0, r0, #2
100099e6:	4448      	add	r0, r9
100099e8:	301a      	adds	r0, #26
100099ea:	1da9      	adds	r1, r5, #6
100099ec:	221c      	movs	r2, #28
100099ee:	47c0      	blx	r8
100099f0:	e003      	b.n	100099fa <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
100099f2:	792e      	ldrb	r6, [r5, #4]
100099f4:	2e00      	cmp	r6, #0
100099f6:	d0cf      	beq.n	10009998 <ble_pair_done_handler+0x8c>
100099f8:	e79e      	b.n	10009938 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
100099fa:	0030      	movs	r0, r6
100099fc:	bc0c      	pop	{r2, r3}
100099fe:	4690      	mov	r8, r2
10009a00:	4699      	mov	r9, r3
10009a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009a04:	10012bac 	.word	0x10012bac
10009a08:	10010728 	.word	0x10010728
10009a0c:	1000f2ed 	.word	0x1000f2ed
10009a10:	10010858 	.word	0x10010858
10009a14:	1000f1cd 	.word	0x1000f1cd
10009a18:	1000c255 	.word	0x1000c255
10009a1c:	10010878 	.word	0x10010878
10009a20:	10010894 	.word	0x10010894
10009a24:	100108c0 	.word	0x100108c0
10009a28:	1000f1ab 	.word	0x1000f1ab

10009a2c <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
10009a2c:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
10009a2e:	8800      	ldrh	r0, [r0, #0]
10009a30:	2378      	movs	r3, #120	; 0x78
10009a32:	2201      	movs	r2, #1
10009a34:	2101      	movs	r1, #1
10009a36:	4c02      	ldr	r4, [pc, #8]	; (10009a40 <ble_conn_param_update_req+0x14>)
10009a38:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
10009a3a:	2000      	movs	r0, #0
10009a3c:	bd10      	pop	{r4, pc}
10009a3e:	46c0      	nop			; (mov r8, r8)
10009a40:	1000c275 	.word	0x1000c275

10009a44 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
10009a44:	b5f0      	push	{r4, r5, r6, r7, lr}
10009a46:	4657      	mov	r7, sl
10009a48:	464e      	mov	r6, r9
10009a4a:	4645      	mov	r5, r8
10009a4c:	b4e0      	push	{r5, r6, r7}
10009a4e:	b084      	sub	sp, #16
10009a50:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
10009a52:	2209      	movs	r2, #9
10009a54:	2100      	movs	r1, #0
10009a56:	a801      	add	r0, sp, #4
10009a58:	4b6b      	ldr	r3, [pc, #428]	; (10009c08 <ble_slave_security_request_handler+0x1c4>)
10009a5a:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009a5c:	8825      	ldrh	r5, [r4, #0]
10009a5e:	496b      	ldr	r1, [pc, #428]	; (10009c0c <ble_slave_security_request_handler+0x1c8>)
10009a60:	000a      	movs	r2, r1
10009a62:	2300      	movs	r3, #0
10009a64:	8910      	ldrh	r0, [r2, #8]
10009a66:	42a8      	cmp	r0, r5
10009a68:	d116      	bne.n	10009a98 <ble_slave_security_request_handler+0x54>
10009a6a:	0010      	movs	r0, r2
10009a6c:	305e      	adds	r0, #94	; 0x5e
10009a6e:	7800      	ldrb	r0, [r0, #0]
10009a70:	2802      	cmp	r0, #2
10009a72:	d111      	bne.n	10009a98 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
10009a74:	4865      	ldr	r0, [pc, #404]	; (10009c0c <ble_slave_security_request_handler+0x1c8>)
10009a76:	015a      	lsls	r2, r3, #5
10009a78:	1ad6      	subs	r6, r2, r3
10009a7a:	00b6      	lsls	r6, r6, #2
10009a7c:	1986      	adds	r6, r0, r6
10009a7e:	365e      	adds	r6, #94	; 0x5e
10009a80:	2206      	movs	r2, #6
10009a82:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009a84:	32f9      	adds	r2, #249	; 0xf9
10009a86:	4013      	ands	r3, r2
10009a88:	015a      	lsls	r2, r3, #5
10009a8a:	1ad2      	subs	r2, r2, r3
10009a8c:	0092      	lsls	r2, r2, #2
10009a8e:	1882      	adds	r2, r0, r2
10009a90:	7d12      	ldrb	r2, [r2, #20]
10009a92:	07d0      	lsls	r0, r2, #31
10009a94:	d405      	bmi.n	10009aa2 <ble_slave_security_request_handler+0x5e>
10009a96:	e01b      	b.n	10009ad0 <ble_slave_security_request_handler+0x8c>
10009a98:	3301      	adds	r3, #1
10009a9a:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009a9c:	2b05      	cmp	r3, #5
10009a9e:	d1e1      	bne.n	10009a64 <ble_slave_security_request_handler+0x20>
10009aa0:	e01e      	b.n	10009ae0 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009aa2:	78e0      	ldrb	r0, [r4, #3]
10009aa4:	2800      	cmp	r0, #0
10009aa6:	d013      	beq.n	10009ad0 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
10009aa8:	0159      	lsls	r1, r3, #5
10009aaa:	1ac9      	subs	r1, r1, r3
10009aac:	008b      	lsls	r3, r1, #2
10009aae:	4957      	ldr	r1, [pc, #348]	; (10009c0c <ble_slave_security_request_handler+0x1c8>)
10009ab0:	18c9      	adds	r1, r1, r3
10009ab2:	311a      	adds	r1, #26
10009ab4:	8820      	ldrh	r0, [r4, #0]
10009ab6:	4b56      	ldr	r3, [pc, #344]	; (10009c10 <ble_slave_security_request_handler+0x1cc>)
10009ab8:	4798      	blx	r3
10009aba:	2800      	cmp	r0, #0
10009abc:	d100      	bne.n	10009ac0 <ble_slave_security_request_handler+0x7c>
10009abe:	e09d      	b.n	10009bfc <ble_slave_security_request_handler+0x1b8>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
10009ac0:	4854      	ldr	r0, [pc, #336]	; (10009c14 <ble_slave_security_request_handler+0x1d0>)
10009ac2:	4b55      	ldr	r3, [pc, #340]	; (10009c18 <ble_slave_security_request_handler+0x1d4>)
10009ac4:	4798      	blx	r3
10009ac6:	4855      	ldr	r0, [pc, #340]	; (10009c1c <ble_slave_security_request_handler+0x1d8>)
10009ac8:	4b55      	ldr	r3, [pc, #340]	; (10009c20 <ble_slave_security_request_handler+0x1dc>)
10009aca:	4798      	blx	r3
				return AT_BLE_FAILURE;
10009acc:	20e2      	movs	r0, #226	; 0xe2
10009ace:	e095      	b.n	10009bfc <ble_slave_security_request_handler+0x1b8>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009ad0:	015a      	lsls	r2, r3, #5
10009ad2:	1ad3      	subs	r3, r2, r3
10009ad4:	009b      	lsls	r3, r3, #2
10009ad6:	4a4d      	ldr	r2, [pc, #308]	; (10009c0c <ble_slave_security_request_handler+0x1c8>)
10009ad8:	18d3      	adds	r3, r2, r3
10009ada:	335e      	adds	r3, #94	; 0x5e
10009adc:	2202      	movs	r2, #2
10009ade:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009ae0:	8825      	ldrh	r5, [r4, #0]
10009ae2:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009ae4:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009ae6:	0016      	movs	r6, r2
10009ae8:	8908      	ldrh	r0, [r1, #8]
10009aea:	42a8      	cmp	r0, r5
10009aec:	d10d      	bne.n	10009b0a <ble_slave_security_request_handler+0xc6>
10009aee:	0008      	movs	r0, r1
10009af0:	305e      	adds	r0, #94	; 0x5e
10009af2:	7800      	ldrb	r0, [r0, #0]
10009af4:	2802      	cmp	r0, #2
10009af6:	d108      	bne.n	10009b0a <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
10009af8:	0152      	lsls	r2, r2, #5
10009afa:	1b92      	subs	r2, r2, r6
10009afc:	0096      	lsls	r6, r2, #2
10009afe:	4a43      	ldr	r2, [pc, #268]	; (10009c0c <ble_slave_security_request_handler+0x1c8>)
10009b00:	1992      	adds	r2, r2, r6
10009b02:	325e      	adds	r2, #94	; 0x5e
10009b04:	2103      	movs	r1, #3
10009b06:	7011      	strb	r1, [r2, #0]
			break;
10009b08:	e005      	b.n	10009b16 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009b0a:	3301      	adds	r3, #1
10009b0c:	b2db      	uxtb	r3, r3
10009b0e:	3201      	adds	r2, #1
10009b10:	317c      	adds	r1, #124	; 0x7c
10009b12:	2b05      	cmp	r3, #5
10009b14:	d1e7      	bne.n	10009ae6 <ble_slave_security_request_handler+0xa2>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
10009b16:	aa01      	add	r2, sp, #4
10009b18:	2102      	movs	r1, #2
10009b1a:	7211      	strb	r1, [r2, #8]
	features.bond = slave_sec_req->bond;
10009b1c:	78e1      	ldrb	r1, [r4, #3]
10009b1e:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
10009b20:	2101      	movs	r1, #1
10009b22:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
10009b24:	3103      	adds	r1, #3
10009b26:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009b28:	001f      	movs	r7, r3
10009b2a:	015a      	lsls	r2, r3, #5
10009b2c:	1ad2      	subs	r2, r2, r3
10009b2e:	0092      	lsls	r2, r2, #2
10009b30:	4936      	ldr	r1, [pc, #216]	; (10009c0c <ble_slave_security_request_handler+0x1c8>)
10009b32:	5c52      	ldrb	r2, [r2, r1]
10009b34:	2a02      	cmp	r2, #2
10009b36:	d104      	bne.n	10009b42 <ble_slave_security_request_handler+0xfe>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009b38:	aa01      	add	r2, sp, #4
10009b3a:	2103      	movs	r1, #3
10009b3c:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009b3e:	71d1      	strb	r1, [r2, #7]
10009b40:	e003      	b.n	10009b4a <ble_slave_security_request_handler+0x106>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
10009b42:	aa01      	add	r2, sp, #4
10009b44:	2101      	movs	r1, #1
10009b46:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
10009b48:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
10009b4a:	aa01      	add	r2, sp, #4
10009b4c:	2110      	movs	r1, #16
10009b4e:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
10009b50:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
10009b52:	017a      	lsls	r2, r7, #5
10009b54:	1bd2      	subs	r2, r2, r7
10009b56:	0092      	lsls	r2, r2, #2
10009b58:	492c      	ldr	r1, [pc, #176]	; (10009c0c <ble_slave_security_request_handler+0x1c8>)
10009b5a:	188a      	adds	r2, r1, r2
10009b5c:	7e12      	ldrb	r2, [r2, #24]
10009b5e:	2a40      	cmp	r2, #64	; 0x40
10009b60:	d134      	bne.n	10009bcc <ble_slave_security_request_handler+0x188>
10009b62:	015a      	lsls	r2, r3, #5
10009b64:	1ad3      	subs	r3, r2, r3
10009b66:	009b      	lsls	r3, r3, #2
10009b68:	469a      	mov	sl, r3
10009b6a:	001e      	movs	r6, r3
10009b6c:	3660      	adds	r6, #96	; 0x60
10009b6e:	1876      	adds	r6, r6, r1
10009b70:	4655      	mov	r5, sl
10009b72:	3568      	adds	r5, #104	; 0x68
10009b74:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009b76:	4b2b      	ldr	r3, [pc, #172]	; (10009c24 <ble_slave_security_request_handler+0x1e0>)
10009b78:	4699      	mov	r9, r3
10009b7a:	230f      	movs	r3, #15
10009b7c:	4698      	mov	r8, r3
10009b7e:	47c8      	blx	r9
10009b80:	4643      	mov	r3, r8
10009b82:	4018      	ands	r0, r3
10009b84:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
10009b86:	47c8      	blx	r9
10009b88:	4643      	mov	r3, r8
10009b8a:	4018      	ands	r0, r3
10009b8c:	74b0      	strb	r0, [r6, #18]
10009b8e:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
10009b90:	42ae      	cmp	r6, r5
10009b92:	d1f4      	bne.n	10009b7e <ble_slave_security_request_handler+0x13a>
10009b94:	4656      	mov	r6, sl
10009b96:	3670      	adds	r6, #112	; 0x70
10009b98:	4a1c      	ldr	r2, [pc, #112]	; (10009c0c <ble_slave_security_request_handler+0x1c8>)
10009b9a:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009b9c:	4b21      	ldr	r3, [pc, #132]	; (10009c24 <ble_slave_security_request_handler+0x1e0>)
10009b9e:	4699      	mov	r9, r3
10009ba0:	230f      	movs	r3, #15
10009ba2:	4698      	mov	r8, r3
10009ba4:	47c8      	blx	r9
10009ba6:	4643      	mov	r3, r8
10009ba8:	4018      	ands	r0, r3
10009baa:	7028      	strb	r0, [r5, #0]
10009bac:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
10009bae:	42b5      	cmp	r5, r6
10009bb0:	d1f8      	bne.n	10009ba4 <ble_slave_security_request_handler+0x160>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
10009bb2:	4b1c      	ldr	r3, [pc, #112]	; (10009c24 <ble_slave_security_request_handler+0x1e0>)
10009bb4:	4798      	blx	r3
10009bb6:	017b      	lsls	r3, r7, #5
10009bb8:	1bdb      	subs	r3, r3, r7
10009bba:	009b      	lsls	r3, r3, #2
10009bbc:	4a13      	ldr	r2, [pc, #76]	; (10009c0c <ble_slave_security_request_handler+0x1c8>)
10009bbe:	18d3      	adds	r3, r2, r3
10009bc0:	001a      	movs	r2, r3
10009bc2:	3270      	adds	r2, #112	; 0x70
10009bc4:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
10009bc6:	337a      	adds	r3, #122	; 0x7a
10009bc8:	2210      	movs	r2, #16
10009bca:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
10009bcc:	017a      	lsls	r2, r7, #5
10009bce:	1bd7      	subs	r7, r2, r7
10009bd0:	00bf      	lsls	r7, r7, #2
10009bd2:	3760      	adds	r7, #96	; 0x60
10009bd4:	4a0d      	ldr	r2, [pc, #52]	; (10009c0c <ble_slave_security_request_handler+0x1c8>)
10009bd6:	18ba      	adds	r2, r7, r2
10009bd8:	8820      	ldrh	r0, [r4, #0]
10009bda:	2300      	movs	r3, #0
10009bdc:	a901      	add	r1, sp, #4
10009bde:	4c12      	ldr	r4, [pc, #72]	; (10009c28 <ble_slave_security_request_handler+0x1e4>)
10009be0:	47a0      	blx	r4
10009be2:	2800      	cmp	r0, #0
10009be4:	d00a      	beq.n	10009bfc <ble_slave_security_request_handler+0x1b8>
	{
		features.bond = false;
10009be6:	ab01      	add	r3, sp, #4
10009be8:	2200      	movs	r2, #0
10009bea:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
10009bec:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
10009bee:	4809      	ldr	r0, [pc, #36]	; (10009c14 <ble_slave_security_request_handler+0x1d0>)
10009bf0:	4b09      	ldr	r3, [pc, #36]	; (10009c18 <ble_slave_security_request_handler+0x1d4>)
10009bf2:	4798      	blx	r3
10009bf4:	480d      	ldr	r0, [pc, #52]	; (10009c2c <ble_slave_security_request_handler+0x1e8>)
10009bf6:	4b0a      	ldr	r3, [pc, #40]	; (10009c20 <ble_slave_security_request_handler+0x1dc>)
10009bf8:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009bfa:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
10009bfc:	b004      	add	sp, #16
10009bfe:	bc1c      	pop	{r2, r3, r4}
10009c00:	4690      	mov	r8, r2
10009c02:	4699      	mov	r9, r3
10009c04:	46a2      	mov	sl, r4
10009c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009c08:	1000f1bd 	.word	0x1000f1bd
10009c0c:	10012bac 	.word	0x10012bac
10009c10:	1000c7ad 	.word	0x1000c7ad
10009c14:	10010728 	.word	0x10010728
10009c18:	1000f2ed 	.word	0x1000f2ed
10009c1c:	100108f0 	.word	0x100108f0
10009c20:	1000f1cd 	.word	0x1000f1cd
10009c24:	1000f301 	.word	0x1000f301
10009c28:	1000c5c1 	.word	0x1000c5c1
10009c2c:	10010908 	.word	0x10010908

10009c30 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
10009c30:	b5f0      	push	{r4, r5, r6, r7, lr}
10009c32:	465f      	mov	r7, fp
10009c34:	4656      	mov	r6, sl
10009c36:	464d      	mov	r5, r9
10009c38:	4644      	mov	r4, r8
10009c3a:	b4f0      	push	{r4, r5, r6, r7}
10009c3c:	b085      	sub	sp, #20
10009c3e:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009c40:	8804      	ldrh	r4, [r0, #0]
10009c42:	4a49      	ldr	r2, [pc, #292]	; (10009d68 <ble_pair_request_handler+0x138>)
10009c44:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009c46:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009c48:	8910      	ldrh	r0, [r2, #8]
10009c4a:	42a0      	cmp	r0, r4
10009c4c:	d10d      	bne.n	10009c6a <ble_pair_request_handler+0x3a>
10009c4e:	0010      	movs	r0, r2
10009c50:	305e      	adds	r0, #94	; 0x5e
10009c52:	7800      	ldrb	r0, [r0, #0]
10009c54:	2802      	cmp	r0, #2
10009c56:	d108      	bne.n	10009c6a <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
10009c58:	014a      	lsls	r2, r1, #5
10009c5a:	1a52      	subs	r2, r2, r1
10009c5c:	0095      	lsls	r5, r2, #2
10009c5e:	4a42      	ldr	r2, [pc, #264]	; (10009d68 <ble_pair_request_handler+0x138>)
10009c60:	1952      	adds	r2, r2, r5
10009c62:	325e      	adds	r2, #94	; 0x5e
10009c64:	2103      	movs	r1, #3
10009c66:	7011      	strb	r1, [r2, #0]
			break;
10009c68:	e005      	b.n	10009c76 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009c6a:	3301      	adds	r3, #1
10009c6c:	b2db      	uxtb	r3, r3
10009c6e:	3101      	adds	r1, #1
10009c70:	327c      	adds	r2, #124	; 0x7c
10009c72:	2b05      	cmp	r3, #5
10009c74:	d1e8      	bne.n	10009c48 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
10009c76:	aa01      	add	r2, sp, #4
10009c78:	2102      	movs	r1, #2
10009c7a:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
10009c7c:	3901      	subs	r1, #1
10009c7e:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
10009c80:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
10009c82:	2100      	movs	r1, #0
10009c84:	7011      	strb	r1, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
10009c86:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009c88:	001f      	movs	r7, r3
10009c8a:	015a      	lsls	r2, r3, #5
10009c8c:	1ad2      	subs	r2, r2, r3
10009c8e:	0092      	lsls	r2, r2, #2
10009c90:	4935      	ldr	r1, [pc, #212]	; (10009d68 <ble_pair_request_handler+0x138>)
10009c92:	5c52      	ldrb	r2, [r2, r1]
10009c94:	2a02      	cmp	r2, #2
10009c96:	d104      	bne.n	10009ca2 <ble_pair_request_handler+0x72>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009c98:	aa01      	add	r2, sp, #4
10009c9a:	2103      	movs	r1, #3
10009c9c:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009c9e:	71d1      	strb	r1, [r2, #7]
10009ca0:	e003      	b.n	10009caa <ble_pair_request_handler+0x7a>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
10009ca2:	aa01      	add	r2, sp, #4
10009ca4:	2101      	movs	r1, #1
10009ca6:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
10009ca8:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
10009caa:	aa01      	add	r2, sp, #4
10009cac:	2110      	movs	r1, #16
10009cae:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
10009cb0:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
10009cb2:	017a      	lsls	r2, r7, #5
10009cb4:	1bd2      	subs	r2, r2, r7
10009cb6:	0092      	lsls	r2, r2, #2
10009cb8:	492b      	ldr	r1, [pc, #172]	; (10009d68 <ble_pair_request_handler+0x138>)
10009cba:	188a      	adds	r2, r1, r2
10009cbc:	7e12      	ldrb	r2, [r2, #24]
10009cbe:	2a40      	cmp	r2, #64	; 0x40
10009cc0:	d131      	bne.n	10009d26 <ble_pair_request_handler+0xf6>
10009cc2:	015a      	lsls	r2, r3, #5
10009cc4:	1ad3      	subs	r3, r2, r3
10009cc6:	009b      	lsls	r3, r3, #2
10009cc8:	469a      	mov	sl, r3
10009cca:	001d      	movs	r5, r3
10009ccc:	3560      	adds	r5, #96	; 0x60
10009cce:	186d      	adds	r5, r5, r1
10009cd0:	4654      	mov	r4, sl
10009cd2:	3468      	adds	r4, #104	; 0x68
10009cd4:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009cd6:	4b25      	ldr	r3, [pc, #148]	; (10009d6c <ble_pair_request_handler+0x13c>)
10009cd8:	4699      	mov	r9, r3
10009cda:	260f      	movs	r6, #15
10009cdc:	47c8      	blx	r9
10009cde:	4030      	ands	r0, r6
10009ce0:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
10009ce2:	47c8      	blx	r9
10009ce4:	4030      	ands	r0, r6
10009ce6:	74a8      	strb	r0, [r5, #18]
10009ce8:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
10009cea:	42a5      	cmp	r5, r4
10009cec:	d1f6      	bne.n	10009cdc <ble_pair_request_handler+0xac>
10009cee:	4655      	mov	r5, sl
10009cf0:	3570      	adds	r5, #112	; 0x70
10009cf2:	4a1d      	ldr	r2, [pc, #116]	; (10009d68 <ble_pair_request_handler+0x138>)
10009cf4:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009cf6:	4b1d      	ldr	r3, [pc, #116]	; (10009d6c <ble_pair_request_handler+0x13c>)
10009cf8:	4699      	mov	r9, r3
10009cfa:	230f      	movs	r3, #15
10009cfc:	4698      	mov	r8, r3
10009cfe:	47c8      	blx	r9
10009d00:	4643      	mov	r3, r8
10009d02:	4018      	ands	r0, r3
10009d04:	7020      	strb	r0, [r4, #0]
10009d06:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
10009d08:	42ac      	cmp	r4, r5
10009d0a:	d1f8      	bne.n	10009cfe <ble_pair_request_handler+0xce>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
10009d0c:	4b17      	ldr	r3, [pc, #92]	; (10009d6c <ble_pair_request_handler+0x13c>)
10009d0e:	4798      	blx	r3
10009d10:	017b      	lsls	r3, r7, #5
10009d12:	1bdb      	subs	r3, r3, r7
10009d14:	009b      	lsls	r3, r3, #2
10009d16:	4a14      	ldr	r2, [pc, #80]	; (10009d68 <ble_pair_request_handler+0x138>)
10009d18:	18d3      	adds	r3, r2, r3
10009d1a:	001a      	movs	r2, r3
10009d1c:	3270      	adds	r2, #112	; 0x70
10009d1e:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
10009d20:	337a      	adds	r3, #122	; 0x7a
10009d22:	2210      	movs	r2, #16
10009d24:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
10009d26:	017a      	lsls	r2, r7, #5
10009d28:	1bd7      	subs	r7, r2, r7
10009d2a:	00bf      	lsls	r7, r7, #2
10009d2c:	3760      	adds	r7, #96	; 0x60
10009d2e:	4a0e      	ldr	r2, [pc, #56]	; (10009d68 <ble_pair_request_handler+0x138>)
10009d30:	18ba      	adds	r2, r7, r2
10009d32:	465b      	mov	r3, fp
10009d34:	8818      	ldrh	r0, [r3, #0]
10009d36:	2300      	movs	r3, #0
10009d38:	a901      	add	r1, sp, #4
10009d3a:	4c0d      	ldr	r4, [pc, #52]	; (10009d70 <ble_pair_request_handler+0x140>)
10009d3c:	47a0      	blx	r4
10009d3e:	2800      	cmp	r0, #0
10009d40:	d00a      	beq.n	10009d58 <ble_pair_request_handler+0x128>
	{
		features.bond = false;
10009d42:	ab01      	add	r3, sp, #4
10009d44:	2200      	movs	r2, #0
10009d46:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
10009d48:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
10009d4a:	480a      	ldr	r0, [pc, #40]	; (10009d74 <ble_pair_request_handler+0x144>)
10009d4c:	4b0a      	ldr	r3, [pc, #40]	; (10009d78 <ble_pair_request_handler+0x148>)
10009d4e:	4798      	blx	r3
10009d50:	480a      	ldr	r0, [pc, #40]	; (10009d7c <ble_pair_request_handler+0x14c>)
10009d52:	4b0b      	ldr	r3, [pc, #44]	; (10009d80 <ble_pair_request_handler+0x150>)
10009d54:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009d56:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
10009d58:	b005      	add	sp, #20
10009d5a:	bc3c      	pop	{r2, r3, r4, r5}
10009d5c:	4690      	mov	r8, r2
10009d5e:	4699      	mov	r9, r3
10009d60:	46a2      	mov	sl, r4
10009d62:	46ab      	mov	fp, r5
10009d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009d66:	46c0      	nop			; (mov r8, r8)
10009d68:	10012bac 	.word	0x10012bac
10009d6c:	1000f301 	.word	0x1000f301
10009d70:	1000c5c1 	.word	0x1000c5c1
10009d74:	10010728 	.word	0x10010728
10009d78:	1000f2ed 	.word	0x1000f2ed
10009d7c:	10010934 	.word	0x10010934
10009d80:	1000f1cd 	.word	0x1000f1cd

10009d84 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
10009d84:	b5f0      	push	{r4, r5, r6, r7, lr}
10009d86:	b085      	sub	sp, #20
10009d88:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
10009d8a:	2206      	movs	r2, #6
10009d8c:	493d      	ldr	r1, [pc, #244]	; (10009e84 <ble_pair_key_request_handler+0x100>)
10009d8e:	a802      	add	r0, sp, #8
10009d90:	4e3d      	ldr	r6, [pc, #244]	; (10009e88 <ble_pair_key_request_handler+0x104>)
10009d92:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
10009d94:	ac01      	add	r4, sp, #4
10009d96:	2204      	movs	r2, #4
10009d98:	0029      	movs	r1, r5
10009d9a:	0020      	movs	r0, r4
10009d9c:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
10009d9e:	78e3      	ldrb	r3, [r4, #3]
10009da0:	2b00      	cmp	r3, #0
10009da2:	d162      	bne.n	10009e6a <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
10009da4:	4839      	ldr	r0, [pc, #228]	; (10009e8c <ble_pair_key_request_handler+0x108>)
10009da6:	4b3a      	ldr	r3, [pc, #232]	; (10009e90 <ble_pair_key_request_handler+0x10c>)
10009da8:	4798      	blx	r3
10009daa:	483a      	ldr	r0, [pc, #232]	; (10009e94 <ble_pair_key_request_handler+0x110>)
10009dac:	4b3a      	ldr	r3, [pc, #232]	; (10009e98 <ble_pair_key_request_handler+0x114>)
10009dae:	4798      	blx	r3
10009db0:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
10009db2:	4c3a      	ldr	r4, [pc, #232]	; (10009e9c <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
10009db4:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
10009db6:	201e      	movs	r0, #30
10009db8:	47a0      	blx	r4
10009dba:	b2c3      	uxtb	r3, r0

			if (!pin) {
10009dbc:	2b00      	cmp	r3, #0
10009dbe:	d11a      	bne.n	10009df6 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
10009dc0:	4f32      	ldr	r7, [pc, #200]	; (10009e8c <ble_pair_key_request_handler+0x108>)
10009dc2:	0038      	movs	r0, r7
10009dc4:	4e32      	ldr	r6, [pc, #200]	; (10009e90 <ble_pair_key_request_handler+0x10c>)
10009dc6:	47b0      	blx	r6
10009dc8:	4835      	ldr	r0, [pc, #212]	; (10009ea0 <ble_pair_key_request_handler+0x11c>)
10009dca:	4c33      	ldr	r4, [pc, #204]	; (10009e98 <ble_pair_key_request_handler+0x114>)
10009dcc:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
10009dce:	0038      	movs	r0, r7
10009dd0:	47b0      	blx	r6
10009dd2:	4834      	ldr	r0, [pc, #208]	; (10009ea4 <ble_pair_key_request_handler+0x120>)
10009dd4:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
10009dd6:	8828      	ldrh	r0, [r5, #0]
10009dd8:	2113      	movs	r1, #19
10009dda:	4b33      	ldr	r3, [pc, #204]	; (10009ea8 <ble_pair_key_request_handler+0x124>)
10009ddc:	4798      	blx	r3
10009dde:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
10009de0:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
10009de2:	2b00      	cmp	r3, #0
10009de4:	d04c      	beq.n	10009e80 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
10009de6:	4829      	ldr	r0, [pc, #164]	; (10009e8c <ble_pair_key_request_handler+0x108>)
10009de8:	4b29      	ldr	r3, [pc, #164]	; (10009e90 <ble_pair_key_request_handler+0x10c>)
10009dea:	4798      	blx	r3
10009dec:	482f      	ldr	r0, [pc, #188]	; (10009eac <ble_pair_key_request_handler+0x128>)
10009dee:	4b2a      	ldr	r3, [pc, #168]	; (10009e98 <ble_pair_key_request_handler+0x114>)
10009df0:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
10009df2:	20e2      	movs	r0, #226	; 0xe2
10009df4:	e044      	b.n	10009e80 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
10009df6:	001a      	movs	r2, r3
10009df8:	3a30      	subs	r2, #48	; 0x30
10009dfa:	2a09      	cmp	r2, #9
10009dfc:	d8db      	bhi.n	10009db6 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
10009dfe:	aa02      	add	r2, sp, #8
10009e00:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
10009e02:	4038      	ands	r0, r7
10009e04:	4b2a      	ldr	r3, [pc, #168]	; (10009eb0 <ble_pair_key_request_handler+0x12c>)
10009e06:	4798      	blx	r3
10009e08:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
10009e0a:	2e06      	cmp	r6, #6
10009e0c:	d026      	beq.n	10009e5c <ble_pair_key_request_handler+0xd8>
10009e0e:	e7d2      	b.n	10009db6 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
10009e10:	481e      	ldr	r0, [pc, #120]	; (10009e8c <ble_pair_key_request_handler+0x108>)
10009e12:	4b1f      	ldr	r3, [pc, #124]	; (10009e90 <ble_pair_key_request_handler+0x10c>)
10009e14:	4798      	blx	r3
10009e16:	4827      	ldr	r0, [pc, #156]	; (10009eb4 <ble_pair_key_request_handler+0x130>)
10009e18:	4b1f      	ldr	r3, [pc, #124]	; (10009e98 <ble_pair_key_request_handler+0x114>)
10009e1a:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
10009e1c:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
10009e1e:	4e24      	ldr	r6, [pc, #144]	; (10009eb0 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
10009e20:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
10009e22:	5ce0      	ldrb	r0, [r4, r3]
10009e24:	47b0      	blx	r6
10009e26:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
10009e28:	2c06      	cmp	r4, #6
10009e2a:	d1f9      	bne.n	10009e20 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!(at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS)
10009e2c:	ab01      	add	r3, sp, #4
10009e2e:	7899      	ldrb	r1, [r3, #2]
10009e30:	8828      	ldrh	r0, [r5, #0]
10009e32:	aa02      	add	r2, sp, #8
10009e34:	4b20      	ldr	r3, [pc, #128]	; (10009eb8 <ble_pair_key_request_handler+0x134>)
10009e36:	4798      	blx	r3
10009e38:	2800      	cmp	r0, #0
10009e3a:	d021      	beq.n	10009e80 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
10009e3c:	4813      	ldr	r0, [pc, #76]	; (10009e8c <ble_pair_key_request_handler+0x108>)
10009e3e:	4b14      	ldr	r3, [pc, #80]	; (10009e90 <ble_pair_key_request_handler+0x10c>)
10009e40:	4798      	blx	r3
10009e42:	481e      	ldr	r0, [pc, #120]	; (10009ebc <ble_pair_key_request_handler+0x138>)
10009e44:	4b14      	ldr	r3, [pc, #80]	; (10009e98 <ble_pair_key_request_handler+0x114>)
10009e46:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
10009e48:	2000      	movs	r0, #0
10009e4a:	e019      	b.n	10009e80 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
10009e4c:	480f      	ldr	r0, [pc, #60]	; (10009e8c <ble_pair_key_request_handler+0x108>)
10009e4e:	4b10      	ldr	r3, [pc, #64]	; (10009e90 <ble_pair_key_request_handler+0x10c>)
10009e50:	4798      	blx	r3
10009e52:	481b      	ldr	r0, [pc, #108]	; (10009ec0 <ble_pair_key_request_handler+0x13c>)
10009e54:	4b10      	ldr	r3, [pc, #64]	; (10009e98 <ble_pair_key_request_handler+0x114>)
10009e56:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
10009e58:	2000      	movs	r0, #0
10009e5a:	e011      	b.n	10009e80 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
10009e5c:	480b      	ldr	r0, [pc, #44]	; (10009e8c <ble_pair_key_request_handler+0x108>)
10009e5e:	4b0c      	ldr	r3, [pc, #48]	; (10009e90 <ble_pair_key_request_handler+0x10c>)
10009e60:	4798      	blx	r3
10009e62:	4818      	ldr	r0, [pc, #96]	; (10009ec4 <ble_pair_key_request_handler+0x140>)
10009e64:	4b0c      	ldr	r3, [pc, #48]	; (10009e98 <ble_pair_key_request_handler+0x114>)
10009e66:	4798      	blx	r3
10009e68:	e7d8      	b.n	10009e1c <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
10009e6a:	ab01      	add	r3, sp, #4
10009e6c:	885a      	ldrh	r2, [r3, #2]
10009e6e:	2380      	movs	r3, #128	; 0x80
10009e70:	005b      	lsls	r3, r3, #1
10009e72:	429a      	cmp	r2, r3
10009e74:	d0cc      	beq.n	10009e10 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
10009e76:	ab01      	add	r3, sp, #4
10009e78:	789b      	ldrb	r3, [r3, #2]
10009e7a:	2b01      	cmp	r3, #1
10009e7c:	d0e6      	beq.n	10009e4c <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
10009e7e:	2000      	movs	r0, #0
}
10009e80:	b005      	add	sp, #20
10009e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009e84:	100106e4 	.word	0x100106e4
10009e88:	1000f1ab 	.word	0x1000f1ab
10009e8c:	10010728 	.word	0x10010728
10009e90:	1000f2ed 	.word	0x1000f2ed
10009e94:	1001095c 	.word	0x1001095c
10009e98:	1000f1cd 	.word	0x1000f1cd
10009e9c:	1000aaf1 	.word	0x1000aaf1
10009ea0:	10010984 	.word	0x10010984
10009ea4:	10010990 	.word	0x10010990
10009ea8:	1000c255 	.word	0x1000c255
10009eac:	10010878 	.word	0x10010878
10009eb0:	1000f201 	.word	0x1000f201
10009eb4:	100109a4 	.word	0x100109a4
10009eb8:	1000c6f1 	.word	0x1000c6f1
10009ebc:	100109dc 	.word	0x100109dc
10009ec0:	100109f4 	.word	0x100109f4
10009ec4:	10010a10 	.word	0x10010a10

10009ec8 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
10009ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009eca:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
10009ecc:	8805      	ldrh	r5, [r0, #0]
10009ece:	4b2f      	ldr	r3, [pc, #188]	; (10009f8c <ble_encryption_request_handler+0xc4>)
10009ed0:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009ed2:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
10009ed4:	0010      	movs	r0, r2
10009ed6:	8919      	ldrh	r1, [r3, #8]
10009ed8:	42a9      	cmp	r1, r5
10009eda:	d116      	bne.n	10009f0a <ble_encryption_request_handler+0x42>
10009edc:	0019      	movs	r1, r3
10009ede:	315e      	adds	r1, #94	; 0x5e
10009ee0:	7809      	ldrb	r1, [r1, #0]
10009ee2:	2901      	cmp	r1, #1
10009ee4:	d911      	bls.n	10009f0a <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
10009ee6:	4929      	ldr	r1, [pc, #164]	; (10009f8c <ble_encryption_request_handler+0xc4>)
10009ee8:	0152      	lsls	r2, r2, #5
10009eea:	1a10      	subs	r0, r2, r0
10009eec:	0080      	lsls	r0, r0, #2
10009eee:	1808      	adds	r0, r1, r0
10009ef0:	305e      	adds	r0, #94	; 0x5e
10009ef2:	2306      	movs	r3, #6
10009ef4:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
10009ef6:	0162      	lsls	r2, r4, #5
10009ef8:	1b13      	subs	r3, r2, r4
10009efa:	009b      	lsls	r3, r3, #2
10009efc:	18cb      	adds	r3, r1, r3
10009efe:	3370      	adds	r3, #112	; 0x70
10009f00:	881a      	ldrh	r2, [r3, #0]
10009f02:	8873      	ldrh	r3, [r6, #2]
10009f04:	429a      	cmp	r2, r3
10009f06:	d113      	bne.n	10009f30 <ble_encryption_request_handler+0x68>
10009f08:	e006      	b.n	10009f18 <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009f0a:	3401      	adds	r4, #1
10009f0c:	b2e4      	uxtb	r4, r4
10009f0e:	3201      	adds	r2, #1
10009f10:	337c      	adds	r3, #124	; 0x7c
10009f12:	2c05      	cmp	r4, #5
10009f14:	d1de      	bne.n	10009ed4 <ble_encryption_request_handler+0xc>
10009f16:	e00b      	b.n	10009f30 <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
10009f18:	0161      	lsls	r1, r4, #5
10009f1a:	1b09      	subs	r1, r1, r4
10009f1c:	0089      	lsls	r1, r1, #2
10009f1e:	4b1b      	ldr	r3, [pc, #108]	; (10009f8c <ble_encryption_request_handler+0xc4>)
10009f20:	1859      	adds	r1, r3, r1
10009f22:	3172      	adds	r1, #114	; 0x72
10009f24:	1d30      	adds	r0, r6, #4
10009f26:	2208      	movs	r2, #8
10009f28:	4b19      	ldr	r3, [pc, #100]	; (10009f90 <ble_encryption_request_handler+0xc8>)
10009f2a:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
10009f2c:	2800      	cmp	r0, #0
10009f2e:	d015      	beq.n	10009f5c <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
10009f30:	4f18      	ldr	r7, [pc, #96]	; (10009f94 <ble_encryption_request_handler+0xcc>)
10009f32:	0038      	movs	r0, r7
10009f34:	4e18      	ldr	r6, [pc, #96]	; (10009f98 <ble_encryption_request_handler+0xd0>)
10009f36:	47b0      	blx	r6
10009f38:	4818      	ldr	r0, [pc, #96]	; (10009f9c <ble_encryption_request_handler+0xd4>)
10009f3a:	4d19      	ldr	r5, [pc, #100]	; (10009fa0 <ble_encryption_request_handler+0xd8>)
10009f3c:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
10009f3e:	0038      	movs	r0, r7
10009f40:	47b0      	blx	r6
10009f42:	4818      	ldr	r0, [pc, #96]	; (10009fa4 <ble_encryption_request_handler+0xdc>)
10009f44:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
10009f46:	0163      	lsls	r3, r4, #5
10009f48:	1b1c      	subs	r4, r3, r4
10009f4a:	00a4      	lsls	r4, r4, #2
10009f4c:	4b0f      	ldr	r3, [pc, #60]	; (10009f8c <ble_encryption_request_handler+0xc4>)
10009f4e:	191c      	adds	r4, r3, r4
10009f50:	8920      	ldrh	r0, [r4, #8]
10009f52:	2105      	movs	r1, #5
10009f54:	4b14      	ldr	r3, [pc, #80]	; (10009fa8 <ble_encryption_request_handler+0xe0>)
10009f56:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009f58:	20e2      	movs	r0, #226	; 0xe2
10009f5a:	e016      	b.n	10009f8a <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
10009f5c:	0162      	lsls	r2, r4, #5
10009f5e:	1b13      	subs	r3, r2, r4
10009f60:	009b      	lsls	r3, r3, #2
10009f62:	3360      	adds	r3, #96	; 0x60
10009f64:	4909      	ldr	r1, [pc, #36]	; (10009f8c <ble_encryption_request_handler+0xc4>)
10009f66:	185b      	adds	r3, r3, r1
10009f68:	1b14      	subs	r4, r2, r4
10009f6a:	00a4      	lsls	r4, r4, #2
10009f6c:	190c      	adds	r4, r1, r4
10009f6e:	7d21      	ldrb	r1, [r4, #20]
10009f70:	8830      	ldrh	r0, [r6, #0]
10009f72:	2201      	movs	r2, #1
10009f74:	4c0d      	ldr	r4, [pc, #52]	; (10009fac <ble_encryption_request_handler+0xe4>)
10009f76:	47a0      	blx	r4
10009f78:	2800      	cmp	r0, #0
10009f7a:	d006      	beq.n	10009f8a <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
10009f7c:	4805      	ldr	r0, [pc, #20]	; (10009f94 <ble_encryption_request_handler+0xcc>)
10009f7e:	4b06      	ldr	r3, [pc, #24]	; (10009f98 <ble_encryption_request_handler+0xd0>)
10009f80:	4798      	blx	r3
10009f82:	480b      	ldr	r0, [pc, #44]	; (10009fb0 <ble_encryption_request_handler+0xe8>)
10009f84:	4b06      	ldr	r3, [pc, #24]	; (10009fa0 <ble_encryption_request_handler+0xd8>)
10009f86:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
10009f88:	2000      	movs	r0, #0
}
10009f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009f8c:	10012bac 	.word	0x10012bac
10009f90:	1000f18d 	.word	0x1000f18d
10009f94:	10010728 	.word	0x10010728
10009f98:	1000f2ed 	.word	0x1000f2ed
10009f9c:	10010a24 	.word	0x10010a24
10009fa0:	1000f1cd 	.word	0x1000f1cd
10009fa4:	10010a5c 	.word	0x10010a5c
10009fa8:	1000c255 	.word	0x1000c255
10009fac:	1000c825 	.word	0x1000c825
10009fb0:	10010ab4 	.word	0x10010ab4

10009fb4 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
10009fb4:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
10009fb6:	2a00      	cmp	r2, #0
10009fb8:	d047      	beq.n	1000a04a <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
10009fba:	2906      	cmp	r1, #6
10009fbc:	d847      	bhi.n	1000a04e <ble_mgr_events_callback_handler+0x9a>
10009fbe:	0089      	lsls	r1, r1, #2
10009fc0:	4b28      	ldr	r3, [pc, #160]	; (1000a064 <ble_mgr_events_callback_handler+0xb0>)
10009fc2:	585b      	ldr	r3, [r3, r1]
10009fc4:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
10009fc6:	4b28      	ldr	r3, [pc, #160]	; (1000a068 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
10009fc8:	2405      	movs	r4, #5
10009fca:	e00a      	b.n	10009fe2 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
10009fcc:	4b27      	ldr	r3, [pc, #156]	; (1000a06c <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
10009fce:	2401      	movs	r4, #1
			}
			break;
10009fd0:	e007      	b.n	10009fe2 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
10009fd2:	4b27      	ldr	r3, [pc, #156]	; (1000a070 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
10009fd4:	2405      	movs	r4, #5
			}
			break;
10009fd6:	e004      	b.n	10009fe2 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
10009fd8:	4b26      	ldr	r3, [pc, #152]	; (1000a074 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
10009fda:	2401      	movs	r4, #1
			}
			break;
10009fdc:	e001      	b.n	10009fe2 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
10009fde:	4b26      	ldr	r3, [pc, #152]	; (1000a078 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
10009fe0:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
10009fe2:	2800      	cmp	r0, #0
10009fe4:	d116      	bne.n	1000a014 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
10009fe6:	6819      	ldr	r1, [r3, #0]
10009fe8:	2900      	cmp	r1, #0
10009fea:	d10b      	bne.n	1000a004 <ble_mgr_events_callback_handler+0x50>
10009fec:	e006      	b.n	10009ffc <ble_mgr_events_callback_handler+0x48>
10009fee:	001d      	movs	r5, r3
10009ff0:	3304      	adds	r3, #4
10009ff2:	1f18      	subs	r0, r3, #4
10009ff4:	6800      	ldr	r0, [r0, #0]
10009ff6:	2800      	cmp	r0, #0
10009ff8:	d106      	bne.n	1000a008 <ble_mgr_events_callback_handler+0x54>
10009ffa:	e000      	b.n	10009ffe <ble_mgr_events_callback_handler+0x4a>
10009ffc:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
10009ffe:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000a000:	2101      	movs	r1, #1
						break;
1000a002:	e02c      	b.n	1000a05e <ble_mgr_events_callback_handler+0xaa>
1000a004:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a006:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a008:	3101      	adds	r1, #1
1000a00a:	b2c9      	uxtb	r1, r1
1000a00c:	42a1      	cmp	r1, r4
1000a00e:	d3ee      	bcc.n	10009fee <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a010:	2100      	movs	r1, #0
1000a012:	e024      	b.n	1000a05e <ble_mgr_events_callback_handler+0xaa>
1000a014:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000a016:	2801      	cmp	r0, #1
1000a018:	d121      	bne.n	1000a05e <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a01a:	6819      	ldr	r1, [r3, #0]
1000a01c:	428a      	cmp	r2, r1
1000a01e:	d10c      	bne.n	1000a03a <ble_mgr_events_callback_handler+0x86>
1000a020:	e006      	b.n	1000a030 <ble_mgr_events_callback_handler+0x7c>
1000a022:	001d      	movs	r5, r3
1000a024:	3304      	adds	r3, #4
1000a026:	1f18      	subs	r0, r3, #4
1000a028:	6800      	ldr	r0, [r0, #0]
1000a02a:	4282      	cmp	r2, r0
1000a02c:	d107      	bne.n	1000a03e <ble_mgr_events_callback_handler+0x8a>
1000a02e:	e000      	b.n	1000a032 <ble_mgr_events_callback_handler+0x7e>
1000a030:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000a032:	2300      	movs	r3, #0
1000a034:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000a036:	2101      	movs	r1, #1
						break;
1000a038:	e011      	b.n	1000a05e <ble_mgr_events_callback_handler+0xaa>
1000a03a:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a03c:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a03e:	3101      	adds	r1, #1
1000a040:	b2c9      	uxtb	r1, r1
1000a042:	42a1      	cmp	r1, r4
1000a044:	d3ed      	bcc.n	1000a022 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a046:	2100      	movs	r1, #0
1000a048:	e009      	b.n	1000a05e <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000a04a:	2100      	movs	r1, #0
1000a04c:	e007      	b.n	1000a05e <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000a04e:	2100      	movs	r1, #0
1000a050:	e005      	b.n	1000a05e <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000a052:	4b0a      	ldr	r3, [pc, #40]	; (1000a07c <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000a054:	2405      	movs	r4, #5
1000a056:	e7c4      	b.n	10009fe2 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000a058:	4b09      	ldr	r3, [pc, #36]	; (1000a080 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000a05a:	2401      	movs	r4, #1
1000a05c:	e7c1      	b.n	10009fe2 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000a05e:	0008      	movs	r0, r1
1000a060:	bd30      	pop	{r4, r5, pc}
1000a062:	46c0      	nop			; (mov r8, r8)
1000a064:	100105d8 	.word	0x100105d8
1000a068:	10012b98 	.word	0x10012b98
1000a06c:	10012b94 	.word	0x10012b94
1000a070:	10012e1c 	.word	0x10012e1c
1000a074:	100133d0 	.word	0x100133d0
1000a078:	10012e30 	.word	0x10012e30
1000a07c:	10012e44 	.word	0x10012e44
1000a080:	10012e8c 	.word	0x10012e8c

1000a084 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000a084:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a086:	465f      	mov	r7, fp
1000a088:	4656      	mov	r6, sl
1000a08a:	464d      	mov	r5, r9
1000a08c:	4644      	mov	r4, r8
1000a08e:	b4f0      	push	{r4, r5, r6, r7}
1000a090:	b091      	sub	sp, #68	; 0x44
1000a092:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000a094:	2400      	movs	r4, #0
1000a096:	4b7e      	ldr	r3, [pc, #504]	; (1000a290 <ble_device_init+0x20c>)
1000a098:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a09a:	2207      	movs	r2, #7
1000a09c:	2100      	movs	r1, #0
1000a09e:	487d      	ldr	r0, [pc, #500]	; (1000a294 <ble_device_init+0x210>)
1000a0a0:	4e7d      	ldr	r6, [pc, #500]	; (1000a298 <ble_device_init+0x214>)
1000a0a2:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000a0a4:	2212      	movs	r2, #18
1000a0a6:	2100      	movs	r1, #0
1000a0a8:	487c      	ldr	r0, [pc, #496]	; (1000a29c <ble_device_init+0x218>)
1000a0aa:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000a0ac:	4a7c      	ldr	r2, [pc, #496]	; (1000a2a0 <ble_device_init+0x21c>)
1000a0ae:	2100      	movs	r1, #0
1000a0b0:	487c      	ldr	r0, [pc, #496]	; (1000a2a4 <ble_device_init+0x220>)
1000a0b2:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000a0b4:	4b7c      	ldr	r3, [pc, #496]	; (1000a2a8 <ble_device_init+0x224>)
1000a0b6:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000a0b8:	22cd      	movs	r2, #205	; 0xcd
1000a0ba:	0092      	lsls	r2, r2, #2
1000a0bc:	2100      	movs	r1, #0
1000a0be:	487b      	ldr	r0, [pc, #492]	; (1000a2ac <ble_device_init+0x228>)
1000a0c0:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000a0c2:	4b7b      	ldr	r3, [pc, #492]	; (1000a2b0 <ble_device_init+0x22c>)
1000a0c4:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000a0c6:	2283      	movs	r2, #131	; 0x83
1000a0c8:	0092      	lsls	r2, r2, #2
1000a0ca:	2100      	movs	r1, #0
1000a0cc:	4879      	ldr	r0, [pc, #484]	; (1000a2b4 <ble_device_init+0x230>)
1000a0ce:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000a0d0:	4b79      	ldr	r3, [pc, #484]	; (1000a2b8 <ble_device_init+0x234>)
1000a0d2:	469b      	mov	fp, r3
1000a0d4:	2380      	movs	r3, #128	; 0x80
1000a0d6:	00db      	lsls	r3, r3, #3
1000a0d8:	469a      	mov	sl, r3
1000a0da:	001a      	movs	r2, r3
1000a0dc:	2100      	movs	r1, #0
1000a0de:	4658      	mov	r0, fp
1000a0e0:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000a0e2:	4b76      	ldr	r3, [pc, #472]	; (1000a2bc <ble_device_init+0x238>)
1000a0e4:	4699      	mov	r9, r3
1000a0e6:	2380      	movs	r3, #128	; 0x80
1000a0e8:	015b      	lsls	r3, r3, #5
1000a0ea:	4698      	mov	r8, r3
1000a0ec:	001a      	movs	r2, r3
1000a0ee:	2100      	movs	r1, #0
1000a0f0:	4648      	mov	r0, r9
1000a0f2:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000a0f4:	4f72      	ldr	r7, [pc, #456]	; (1000a2c0 <ble_device_init+0x23c>)
1000a0f6:	221c      	movs	r2, #28
1000a0f8:	2100      	movs	r1, #0
1000a0fa:	0038      	movs	r0, r7
1000a0fc:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000a0fe:	465b      	mov	r3, fp
1000a100:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000a102:	4653      	mov	r3, sl
1000a104:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000a106:	464b      	mov	r3, r9
1000a108:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000a10a:	4643      	mov	r3, r8
1000a10c:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000a10e:	4b6d      	ldr	r3, [pc, #436]	; (1000a2c4 <ble_device_init+0x240>)
1000a110:	601c      	str	r4, [r3, #0]
1000a112:	605c      	str	r4, [r3, #4]
1000a114:	609c      	str	r4, [r3, #8]
1000a116:	60dc      	str	r4, [r3, #12]
1000a118:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000a11a:	4b6b      	ldr	r3, [pc, #428]	; (1000a2c8 <ble_device_init+0x244>)
1000a11c:	601c      	str	r4, [r3, #0]
1000a11e:	605c      	str	r4, [r3, #4]
1000a120:	609c      	str	r4, [r3, #8]
1000a122:	60dc      	str	r4, [r3, #12]
1000a124:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000a126:	4b69      	ldr	r3, [pc, #420]	; (1000a2cc <ble_device_init+0x248>)
1000a128:	601c      	str	r4, [r3, #0]
1000a12a:	605c      	str	r4, [r3, #4]
1000a12c:	609c      	str	r4, [r3, #8]
1000a12e:	60dc      	str	r4, [r3, #12]
1000a130:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000a132:	4b67      	ldr	r3, [pc, #412]	; (1000a2d0 <ble_device_init+0x24c>)
1000a134:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000a136:	4b67      	ldr	r3, [pc, #412]	; (1000a2d4 <ble_device_init+0x250>)
1000a138:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000a13a:	4b67      	ldr	r3, [pc, #412]	; (1000a2d8 <ble_device_init+0x254>)
1000a13c:	601c      	str	r4, [r3, #0]
1000a13e:	605c      	str	r4, [r3, #4]
1000a140:	609c      	str	r4, [r3, #8]
1000a142:	60dc      	str	r4, [r3, #12]
1000a144:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000a146:	4b65      	ldr	r3, [pc, #404]	; (1000a2dc <ble_device_init+0x258>)
1000a148:	601c      	str	r4, [r3, #0]
1000a14a:	4c65      	ldr	r4, [pc, #404]	; (1000a2e0 <ble_device_init+0x25c>)
1000a14c:	239b      	movs	r3, #155	; 0x9b
1000a14e:	009b      	lsls	r3, r3, #2
1000a150:	4698      	mov	r8, r3
1000a152:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a154:	4f50      	ldr	r7, [pc, #320]	; (1000a298 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a156:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a158:	227c      	movs	r2, #124	; 0x7c
1000a15a:	2100      	movs	r1, #0
1000a15c:	0020      	movs	r0, r4
1000a15e:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a160:	0023      	movs	r3, r4
1000a162:	335e      	adds	r3, #94	; 0x5e
1000a164:	2200      	movs	r2, #0
1000a166:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a168:	7626      	strb	r6, [r4, #24]
1000a16a:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a16c:	45a0      	cmp	r8, r4
1000a16e:	d1f3      	bne.n	1000a158 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000a170:	4b5c      	ldr	r3, [pc, #368]	; (1000a2e4 <ble_device_init+0x260>)
1000a172:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000a174:	4c52      	ldr	r4, [pc, #328]	; (1000a2c0 <ble_device_init+0x23c>)
1000a176:	4b4a      	ldr	r3, [pc, #296]	; (1000a2a0 <ble_device_init+0x21c>)
1000a178:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000a17a:	4b4a      	ldr	r3, [pc, #296]	; (1000a2a4 <ble_device_init+0x220>)
1000a17c:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000a17e:	485a      	ldr	r0, [pc, #360]	; (1000a2e8 <ble_device_init+0x264>)
1000a180:	4b5a      	ldr	r3, [pc, #360]	; (1000a2ec <ble_device_init+0x268>)
1000a182:	4798      	blx	r3
1000a184:	485a      	ldr	r0, [pc, #360]	; (1000a2f0 <ble_device_init+0x26c>)
1000a186:	4b5b      	ldr	r3, [pc, #364]	; (1000a2f4 <ble_device_init+0x270>)
1000a188:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000a18a:	0020      	movs	r0, r4
1000a18c:	4b5a      	ldr	r3, [pc, #360]	; (1000a2f8 <ble_device_init+0x274>)
1000a18e:	4798      	blx	r3
1000a190:	2800      	cmp	r0, #0
1000a192:	d00b      	beq.n	1000a1ac <ble_device_init+0x128>
	{
		DBG_LOG("SAMB11 Initialization failed");
1000a194:	4e54      	ldr	r6, [pc, #336]	; (1000a2e8 <ble_device_init+0x264>)
1000a196:	0030      	movs	r0, r6
1000a198:	4d54      	ldr	r5, [pc, #336]	; (1000a2ec <ble_device_init+0x268>)
1000a19a:	47a8      	blx	r5
1000a19c:	4857      	ldr	r0, [pc, #348]	; (1000a2fc <ble_device_init+0x278>)
1000a19e:	4c55      	ldr	r4, [pc, #340]	; (1000a2f4 <ble_device_init+0x270>)
1000a1a0:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
1000a1a2:	0030      	movs	r0, r6
1000a1a4:	47a8      	blx	r5
1000a1a6:	4856      	ldr	r0, [pc, #344]	; (1000a300 <ble_device_init+0x27c>)
1000a1a8:	47a0      	blx	r4
1000a1aa:	e7fe      	b.n	1000a1aa <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000a1ac:	4a55      	ldr	r2, [pc, #340]	; (1000a304 <ble_device_init+0x280>)
1000a1ae:	2100      	movs	r1, #0
1000a1b0:	2000      	movs	r0, #0
1000a1b2:	4c55      	ldr	r4, [pc, #340]	; (1000a308 <ble_device_init+0x284>)
1000a1b4:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000a1b6:	4a55      	ldr	r2, [pc, #340]	; (1000a30c <ble_device_init+0x288>)
1000a1b8:	2102      	movs	r1, #2
1000a1ba:	2000      	movs	r0, #0
1000a1bc:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000a1be:	2109      	movs	r1, #9
1000a1c0:	4853      	ldr	r0, [pc, #332]	; (1000a310 <ble_device_init+0x28c>)
1000a1c2:	4b54      	ldr	r3, [pc, #336]	; (1000a314 <ble_device_init+0x290>)
1000a1c4:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000a1c6:	2800      	cmp	r0, #0
1000a1c8:	d005      	beq.n	1000a1d6 <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000a1ca:	4847      	ldr	r0, [pc, #284]	; (1000a2e8 <ble_device_init+0x264>)
1000a1cc:	4b47      	ldr	r3, [pc, #284]	; (1000a2ec <ble_device_init+0x268>)
1000a1ce:	4798      	blx	r3
1000a1d0:	4851      	ldr	r0, [pc, #324]	; (1000a318 <ble_device_init+0x294>)
1000a1d2:	4b48      	ldr	r3, [pc, #288]	; (1000a2f4 <ble_device_init+0x270>)
1000a1d4:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000a1d6:	2207      	movs	r2, #7
1000a1d8:	4950      	ldr	r1, [pc, #320]	; (1000a31c <ble_device_init+0x298>)
1000a1da:	3108      	adds	r1, #8
1000a1dc:	a804      	add	r0, sp, #16
1000a1de:	4b50      	ldr	r3, [pc, #320]	; (1000a320 <ble_device_init+0x29c>)
1000a1e0:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000a1e2:	2226      	movs	r2, #38	; 0x26
1000a1e4:	2100      	movs	r1, #0
1000a1e6:	a806      	add	r0, sp, #24
1000a1e8:	4b2b      	ldr	r3, [pc, #172]	; (1000a298 <ble_device_init+0x214>)
1000a1ea:	4798      	blx	r3
	
	if (addr == NULL)
1000a1ec:	2d00      	cmp	r5, #0
1000a1ee:	d10c      	bne.n	1000a20a <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a1f0:	a804      	add	r0, sp, #16
1000a1f2:	4b4c      	ldr	r3, [pc, #304]	; (1000a324 <ble_device_init+0x2a0>)
1000a1f4:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a1f6:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a1f8:	2800      	cmp	r0, #0
1000a1fa:	d006      	beq.n	1000a20a <ble_device_init+0x186>
		{
			DBG_LOG("BD address get failed");
1000a1fc:	483a      	ldr	r0, [pc, #232]	; (1000a2e8 <ble_device_init+0x264>)
1000a1fe:	4b3b      	ldr	r3, [pc, #236]	; (1000a2ec <ble_device_init+0x268>)
1000a200:	4798      	blx	r3
1000a202:	4849      	ldr	r0, [pc, #292]	; (1000a328 <ble_device_init+0x2a4>)
1000a204:	4b3b      	ldr	r3, [pc, #236]	; (1000a2f4 <ble_device_init+0x270>)
1000a206:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a208:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000a20a:	4837      	ldr	r0, [pc, #220]	; (1000a2e8 <ble_device_init+0x264>)
1000a20c:	4b37      	ldr	r3, [pc, #220]	; (1000a2ec <ble_device_init+0x268>)
1000a20e:	4798      	blx	r3
1000a210:	792b      	ldrb	r3, [r5, #4]
1000a212:	796a      	ldrb	r2, [r5, #5]
1000a214:	79a9      	ldrb	r1, [r5, #6]
1000a216:	7828      	ldrb	r0, [r5, #0]
1000a218:	9003      	str	r0, [sp, #12]
1000a21a:	7868      	ldrb	r0, [r5, #1]
1000a21c:	9002      	str	r0, [sp, #8]
1000a21e:	78a8      	ldrb	r0, [r5, #2]
1000a220:	9001      	str	r0, [sp, #4]
1000a222:	78e8      	ldrb	r0, [r5, #3]
1000a224:	9000      	str	r0, [sp, #0]
1000a226:	4841      	ldr	r0, [pc, #260]	; (1000a32c <ble_device_init+0x2a8>)
1000a228:	4c32      	ldr	r4, [pc, #200]	; (1000a2f4 <ble_device_init+0x270>)
1000a22a:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000a22c:	ac06      	add	r4, sp, #24
1000a22e:	230f      	movs	r3, #15
1000a230:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000a232:	4b3f      	ldr	r3, [pc, #252]	; (1000a330 <ble_device_init+0x2ac>)
1000a234:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000a236:	2207      	movs	r2, #7
1000a238:	0029      	movs	r1, r5
1000a23a:	a807      	add	r0, sp, #28
1000a23c:	4b38      	ldr	r3, [pc, #224]	; (1000a320 <ble_device_init+0x29c>)
1000a23e:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000a240:	2300      	movs	r3, #0
1000a242:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000a244:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000a246:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000a248:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000a24a:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a24c:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a24e:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000a250:	2380      	movs	r3, #128	; 0x80
1000a252:	009b      	lsls	r3, r3, #2
1000a254:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000a256:	0020      	movs	r0, r4
1000a258:	4b36      	ldr	r3, [pc, #216]	; (1000a334 <ble_device_init+0x2b0>)
1000a25a:	4798      	blx	r3
1000a25c:	2800      	cmp	r0, #0
1000a25e:	d005      	beq.n	1000a26c <ble_device_init+0x1e8>
	{
		DBG_LOG("Set BLE Device configuration failed");
1000a260:	4821      	ldr	r0, [pc, #132]	; (1000a2e8 <ble_device_init+0x264>)
1000a262:	4b22      	ldr	r3, [pc, #136]	; (1000a2ec <ble_device_init+0x268>)
1000a264:	4798      	blx	r3
1000a266:	4834      	ldr	r0, [pc, #208]	; (1000a338 <ble_device_init+0x2b4>)
1000a268:	4b22      	ldr	r3, [pc, #136]	; (1000a2f4 <ble_device_init+0x270>)
1000a26a:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000a26c:	0028      	movs	r0, r5
1000a26e:	4b33      	ldr	r3, [pc, #204]	; (1000a33c <ble_device_init+0x2b8>)
1000a270:	4798      	blx	r3
1000a272:	2800      	cmp	r0, #0
1000a274:	d005      	beq.n	1000a282 <ble_device_init+0x1fe>
	{
		DBG_LOG("Set BLE Device Address failed");
1000a276:	481c      	ldr	r0, [pc, #112]	; (1000a2e8 <ble_device_init+0x264>)
1000a278:	4b1c      	ldr	r3, [pc, #112]	; (1000a2ec <ble_device_init+0x268>)
1000a27a:	4798      	blx	r3
1000a27c:	4830      	ldr	r0, [pc, #192]	; (1000a340 <ble_device_init+0x2bc>)
1000a27e:	4b1d      	ldr	r3, [pc, #116]	; (1000a2f4 <ble_device_init+0x270>)
1000a280:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000a282:	b011      	add	sp, #68	; 0x44
1000a284:	bc3c      	pop	{r2, r3, r4, r5}
1000a286:	4690      	mov	r8, r2
1000a288:	4699      	mov	r9, r3
1000a28a:	46a2      	mov	sl, r4
1000a28c:	46ab      	mov	fp, r5
1000a28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a290:	100118e8 	.word	0x100118e8
1000a294:	100118f0 	.word	0x100118f0
1000a298:	1000f1bd 	.word	0x1000f1bd
1000a29c:	10012e58 	.word	0x10012e58
1000a2a0:	000004e2 	.word	0x000004e2
1000a2a4:	10011408 	.word	0x10011408
1000a2a8:	100118ec 	.word	0x100118ec
1000a2ac:	10012e90 	.word	0x10012e90
1000a2b0:	10012e88 	.word	0x10012e88
1000a2b4:	100131c4 	.word	0x100131c4
1000a2b8:	10011008 	.word	0x10011008
1000a2bc:	100118f8 	.word	0x100118f8
1000a2c0:	10012e6c 	.word	0x10012e6c
1000a2c4:	10012e30 	.word	0x10012e30
1000a2c8:	10012e44 	.word	0x10012e44
1000a2cc:	10012b98 	.word	0x10012b98
1000a2d0:	10012e8c 	.word	0x10012e8c
1000a2d4:	10012b94 	.word	0x10012b94
1000a2d8:	10012e1c 	.word	0x10012e1c
1000a2dc:	100133d0 	.word	0x100133d0
1000a2e0:	10012bac 	.word	0x10012bac
1000a2e4:	10012e18 	.word	0x10012e18
1000a2e8:	10010728 	.word	0x10010728
1000a2ec:	1000f2ed 	.word	0x1000f2ed
1000a2f0:	10010ad4 	.word	0x10010ad4
1000a2f4:	1000f1cd 	.word	0x1000f1cd
1000a2f8:	1000be6d 	.word	0x1000be6d
1000a2fc:	10010ae8 	.word	0x10010ae8
1000a300:	10010b08 	.word	0x10010b08
1000a304:	10010d40 	.word	0x10010d40
1000a308:	10009fb5 	.word	0x10009fb5
1000a30c:	10010700 	.word	0x10010700
1000a310:	10010b44 	.word	0x10010b44
1000a314:	1000bd85 	.word	0x1000bd85
1000a318:	10010b50 	.word	0x10010b50
1000a31c:	100106e4 	.word	0x100106e4
1000a320:	1000f1ab 	.word	0x1000f1ab
1000a324:	1000bdb9 	.word	0x1000bdb9
1000a328:	10010b68 	.word	0x10010b68
1000a32c:	10010b80 	.word	0x10010b80
1000a330:	00003a98 	.word	0x00003a98
1000a334:	1000bddd 	.word	0x1000bddd
1000a338:	10010bb8 	.word	0x10010bb8
1000a33c:	1000c021 	.word	0x1000c021
1000a340:	10010bdc 	.word	0x10010bdc

1000a344 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000a344:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000a346:	2201      	movs	r2, #1
1000a348:	2101      	movs	r1, #1
1000a34a:	4b06      	ldr	r3, [pc, #24]	; (1000a364 <ble_send_slave_sec_request+0x20>)
1000a34c:	4798      	blx	r3
1000a34e:	2800      	cmp	r0, #0
1000a350:	d006      	beq.n	1000a360 <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000a352:	4805      	ldr	r0, [pc, #20]	; (1000a368 <ble_send_slave_sec_request+0x24>)
1000a354:	4b05      	ldr	r3, [pc, #20]	; (1000a36c <ble_send_slave_sec_request+0x28>)
1000a356:	4798      	blx	r3
1000a358:	4805      	ldr	r0, [pc, #20]	; (1000a370 <ble_send_slave_sec_request+0x2c>)
1000a35a:	4b06      	ldr	r3, [pc, #24]	; (1000a374 <ble_send_slave_sec_request+0x30>)
1000a35c:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000a35e:	20e2      	movs	r0, #226	; 0xe2
}
1000a360:	bd10      	pop	{r4, pc}
1000a362:	46c0      	nop			; (mov r8, r8)
1000a364:	1000c76d 	.word	0x1000c76d
1000a368:	10010728 	.word	0x10010728
1000a36c:	1000f2ed 	.word	0x1000f2ed
1000a370:	10010c18 	.word	0x10010c18
1000a374:	1000f1cd 	.word	0x1000f1cd

1000a378 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a378:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a37a:	465f      	mov	r7, fp
1000a37c:	464e      	mov	r6, r9
1000a37e:	4645      	mov	r5, r8
1000a380:	b4e0      	push	{r5, r6, r7}
1000a382:	b09a      	sub	sp, #104	; 0x68
1000a384:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000a386:	7a86      	ldrb	r6, [r0, #10]
1000a388:	2e00      	cmp	r6, #0
1000a38a:	d000      	beq.n	1000a38e <ble_connected_state_handler+0x16>
1000a38c:	e0c6      	b.n	1000a51c <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000a38e:	4875      	ldr	r0, [pc, #468]	; (1000a564 <ble_connected_state_handler+0x1ec>)
1000a390:	4f75      	ldr	r7, [pc, #468]	; (1000a568 <ble_connected_state_handler+0x1f0>)
1000a392:	47b8      	blx	r7
1000a394:	792b      	ldrb	r3, [r5, #4]
1000a396:	796a      	ldrb	r2, [r5, #5]
1000a398:	79a9      	ldrb	r1, [r5, #6]
1000a39a:	7868      	ldrb	r0, [r5, #1]
1000a39c:	9002      	str	r0, [sp, #8]
1000a39e:	78a8      	ldrb	r0, [r5, #2]
1000a3a0:	9001      	str	r0, [sp, #4]
1000a3a2:	78e8      	ldrb	r0, [r5, #3]
1000a3a4:	9000      	str	r0, [sp, #0]
1000a3a6:	4871      	ldr	r0, [pc, #452]	; (1000a56c <ble_connected_state_handler+0x1f4>)
1000a3a8:	4c71      	ldr	r4, [pc, #452]	; (1000a570 <ble_connected_state_handler+0x1f8>)
1000a3aa:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000a3ac:	486d      	ldr	r0, [pc, #436]	; (1000a564 <ble_connected_state_handler+0x1ec>)
1000a3ae:	47b8      	blx	r7
1000a3b0:	8929      	ldrh	r1, [r5, #8]
1000a3b2:	4870      	ldr	r0, [pc, #448]	; (1000a574 <ble_connected_state_handler+0x1fc>)
1000a3b4:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000a3b6:	2212      	movs	r2, #18
1000a3b8:	0029      	movs	r1, r5
1000a3ba:	486f      	ldr	r0, [pc, #444]	; (1000a578 <ble_connected_state_handler+0x200>)
1000a3bc:	4b6f      	ldr	r3, [pc, #444]	; (1000a57c <ble_connected_state_handler+0x204>)
1000a3be:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a3c0:	9504      	str	r5, [sp, #16]
1000a3c2:	2207      	movs	r2, #7
1000a3c4:	0029      	movs	r1, r5
1000a3c6:	486e      	ldr	r0, [pc, #440]	; (1000a580 <ble_connected_state_handler+0x208>)
1000a3c8:	4b6e      	ldr	r3, [pc, #440]	; (1000a584 <ble_connected_state_handler+0x20c>)
1000a3ca:	4798      	blx	r3
1000a3cc:	2800      	cmp	r0, #0
1000a3ce:	d100      	bne.n	1000a3d2 <ble_connected_state_handler+0x5a>
1000a3d0:	e0ad      	b.n	1000a52e <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000a3d2:	782b      	ldrb	r3, [r5, #0]
1000a3d4:	2b02      	cmp	r3, #2
1000a3d6:	d000      	beq.n	1000a3da <ble_connected_state_handler+0x62>
1000a3d8:	e0a9      	b.n	1000a52e <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000a3da:	2250      	movs	r2, #80	; 0x50
1000a3dc:	2100      	movs	r1, #0
1000a3de:	a806      	add	r0, sp, #24
1000a3e0:	4b69      	ldr	r3, [pc, #420]	; (1000a588 <ble_connected_state_handler+0x210>)
1000a3e2:	4798      	blx	r3
1000a3e4:	4f69      	ldr	r7, [pc, #420]	; (1000a58c <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000a3e6:	2300      	movs	r3, #0
1000a3e8:	e00b      	b.n	1000a402 <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a3ea:	1c59      	adds	r1, r3, #1
1000a3ec:	7814      	ldrb	r4, [r2, #0]
1000a3ee:	a806      	add	r0, sp, #24
1000a3f0:	54c4      	strb	r4, [r0, r3]
1000a3f2:	3201      	adds	r2, #1
1000a3f4:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000a3f6:	42b3      	cmp	r3, r6
1000a3f8:	d1f7      	bne.n	1000a3ea <ble_connected_state_handler+0x72>
1000a3fa:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a3fc:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000a3fe:	2b50      	cmp	r3, #80	; 0x50
1000a400:	d004      	beq.n	1000a40c <ble_connected_state_handler+0x94>
1000a402:	001e      	movs	r6, r3
1000a404:	3610      	adds	r6, #16
1000a406:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a408:	003a      	movs	r2, r7
1000a40a:	e7ee      	b.n	1000a3ea <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000a40c:	aa06      	add	r2, sp, #24
1000a40e:	0029      	movs	r1, r5
1000a410:	2005      	movs	r0, #5
1000a412:	4b5f      	ldr	r3, [pc, #380]	; (1000a590 <ble_connected_state_handler+0x218>)
1000a414:	4798      	blx	r3
1000a416:	1e06      	subs	r6, r0, #0
1000a418:	d100      	bne.n	1000a41c <ble_connected_state_handler+0xa4>
1000a41a:	e09c      	b.n	1000a556 <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000a41c:	4851      	ldr	r0, [pc, #324]	; (1000a564 <ble_connected_state_handler+0x1ec>)
1000a41e:	4b52      	ldr	r3, [pc, #328]	; (1000a568 <ble_connected_state_handler+0x1f0>)
1000a420:	4798      	blx	r3
1000a422:	485c      	ldr	r0, [pc, #368]	; (1000a594 <ble_connected_state_handler+0x21c>)
1000a424:	4b52      	ldr	r3, [pc, #328]	; (1000a570 <ble_connected_state_handler+0x1f8>)
1000a426:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000a428:	26e2      	movs	r6, #226	; 0xe2
1000a42a:	e094      	b.n	1000a556 <ble_connected_state_handler+0x1de>
1000a42c:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a42e:	9405      	str	r4, [sp, #20]
1000a430:	2207      	movs	r2, #7
1000a432:	9904      	ldr	r1, [sp, #16]
1000a434:	4648      	mov	r0, r9
1000a436:	47d8      	blx	fp
1000a438:	2800      	cmp	r0, #0
1000a43a:	d109      	bne.n	1000a450 <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a43c:	9a05      	ldr	r2, [sp, #20]
1000a43e:	0153      	lsls	r3, r2, #5
1000a440:	1a9b      	subs	r3, r3, r2
1000a442:	009a      	lsls	r2, r3, #2
1000a444:	4b54      	ldr	r3, [pc, #336]	; (1000a598 <ble_connected_state_handler+0x220>)
1000a446:	189b      	adds	r3, r3, r2
1000a448:	335e      	adds	r3, #94	; 0x5e
1000a44a:	2202      	movs	r2, #2
1000a44c:	701a      	strb	r2, [r3, #0]
1000a44e:	e02b      	b.n	1000a4a8 <ble_connected_state_handler+0x130>
1000a450:	3401      	adds	r4, #1
1000a452:	237c      	movs	r3, #124	; 0x7c
1000a454:	469c      	mov	ip, r3
1000a456:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a458:	2c05      	cmp	r4, #5
1000a45a:	d1e7      	bne.n	1000a42c <ble_connected_state_handler+0xb4>
1000a45c:	e072      	b.n	1000a544 <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a45e:	001c      	movs	r4, r3
1000a460:	7811      	ldrb	r1, [r2, #0]
1000a462:	2900      	cmp	r1, #0
1000a464:	d11a      	bne.n	1000a49c <ble_connected_state_handler+0x124>
1000a466:	e001      	b.n	1000a46c <ble_connected_state_handler+0xf4>
1000a468:	2400      	movs	r4, #0
1000a46a:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000a46c:	0163      	lsls	r3, r4, #5
1000a46e:	4699      	mov	r9, r3
1000a470:	1b18      	subs	r0, r3, r4
1000a472:	0080      	lsls	r0, r0, #2
1000a474:	4b48      	ldr	r3, [pc, #288]	; (1000a598 <ble_connected_state_handler+0x220>)
1000a476:	4698      	mov	r8, r3
1000a478:	4440      	add	r0, r8
1000a47a:	2212      	movs	r2, #18
1000a47c:	0029      	movs	r1, r5
1000a47e:	4b3f      	ldr	r3, [pc, #252]	; (1000a57c <ble_connected_state_handler+0x204>)
1000a480:	4798      	blx	r3
						ble_device_count++;
1000a482:	4a46      	ldr	r2, [pc, #280]	; (1000a59c <ble_connected_state_handler+0x224>)
1000a484:	7813      	ldrb	r3, [r2, #0]
1000a486:	3301      	adds	r3, #1
1000a488:	b2db      	uxtb	r3, r3
1000a48a:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a48c:	464b      	mov	r3, r9
1000a48e:	1b1b      	subs	r3, r3, r4
1000a490:	009b      	lsls	r3, r3, #2
1000a492:	4443      	add	r3, r8
1000a494:	335e      	adds	r3, #94	; 0x5e
1000a496:	2202      	movs	r2, #2
1000a498:	701a      	strb	r2, [r3, #0]
						break;
1000a49a:	e005      	b.n	1000a4a8 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a49c:	1c79      	adds	r1, r7, #1
1000a49e:	b2cf      	uxtb	r7, r1
1000a4a0:	3301      	adds	r3, #1
1000a4a2:	327c      	adds	r2, #124	; 0x7c
1000a4a4:	2f05      	cmp	r7, #5
1000a4a6:	d1da      	bne.n	1000a45e <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a4a8:	2207      	movs	r2, #7
1000a4aa:	0029      	movs	r1, r5
1000a4ac:	4834      	ldr	r0, [pc, #208]	; (1000a580 <ble_connected_state_handler+0x208>)
1000a4ae:	4b35      	ldr	r3, [pc, #212]	; (1000a584 <ble_connected_state_handler+0x20c>)
1000a4b0:	4798      	blx	r3
1000a4b2:	2800      	cmp	r0, #0
1000a4b4:	d10c      	bne.n	1000a4d0 <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000a4b6:	017b      	lsls	r3, r7, #5
1000a4b8:	1bdb      	subs	r3, r3, r7
1000a4ba:	009b      	lsls	r3, r3, #2
1000a4bc:	4a36      	ldr	r2, [pc, #216]	; (1000a598 <ble_connected_state_handler+0x220>)
1000a4be:	18d3      	adds	r3, r2, r3
1000a4c0:	2205      	movs	r2, #5
1000a4c2:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a4c4:	3202      	adds	r2, #2
1000a4c6:	2100      	movs	r1, #0
1000a4c8:	482d      	ldr	r0, [pc, #180]	; (1000a580 <ble_connected_state_handler+0x208>)
1000a4ca:	4b2f      	ldr	r3, [pc, #188]	; (1000a588 <ble_connected_state_handler+0x210>)
1000a4cc:	4798      	blx	r3
1000a4ce:	e042      	b.n	1000a556 <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a4d0:	4b31      	ldr	r3, [pc, #196]	; (1000a598 <ble_connected_state_handler+0x220>)
1000a4d2:	4698      	mov	r8, r3
1000a4d4:	017c      	lsls	r4, r7, #5
1000a4d6:	1be3      	subs	r3, r4, r7
1000a4d8:	009b      	lsls	r3, r3, #2
1000a4da:	4443      	add	r3, r8
1000a4dc:	220a      	movs	r2, #10
1000a4de:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a4e0:	3a03      	subs	r2, #3
1000a4e2:	2100      	movs	r1, #0
1000a4e4:	4826      	ldr	r0, [pc, #152]	; (1000a580 <ble_connected_state_handler+0x208>)
1000a4e6:	4b28      	ldr	r3, [pc, #160]	; (1000a588 <ble_connected_state_handler+0x210>)
1000a4e8:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000a4ea:	1be4      	subs	r4, r4, r7
1000a4ec:	00a4      	lsls	r4, r4, #2
1000a4ee:	4444      	add	r4, r8
1000a4f0:	7ca3      	ldrb	r3, [r4, #18]
1000a4f2:	2b0a      	cmp	r3, #10
1000a4f4:	d12f      	bne.n	1000a556 <ble_connected_state_handler+0x1de>
1000a4f6:	e00d      	b.n	1000a514 <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000a4f8:	481a      	ldr	r0, [pc, #104]	; (1000a564 <ble_connected_state_handler+0x1ec>)
1000a4fa:	4b1b      	ldr	r3, [pc, #108]	; (1000a568 <ble_connected_state_handler+0x1f0>)
1000a4fc:	4798      	blx	r3
1000a4fe:	4b27      	ldr	r3, [pc, #156]	; (1000a59c <ble_connected_state_handler+0x224>)
1000a500:	7819      	ldrb	r1, [r3, #0]
1000a502:	b2c9      	uxtb	r1, r1
1000a504:	4826      	ldr	r0, [pc, #152]	; (1000a5a0 <ble_connected_state_handler+0x228>)
1000a506:	4b1a      	ldr	r3, [pc, #104]	; (1000a570 <ble_connected_state_handler+0x1f8>)
1000a508:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000a50a:	8928      	ldrh	r0, [r5, #8]
1000a50c:	2113      	movs	r1, #19
1000a50e:	4b25      	ldr	r3, [pc, #148]	; (1000a5a4 <ble_connected_state_handler+0x22c>)
1000a510:	4798      	blx	r3
1000a512:	e020      	b.n	1000a556 <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000a514:	8928      	ldrh	r0, [r5, #8]
1000a516:	4b24      	ldr	r3, [pc, #144]	; (1000a5a8 <ble_connected_state_handler+0x230>)
1000a518:	4798      	blx	r3
1000a51a:	e01c      	b.n	1000a556 <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000a51c:	4811      	ldr	r0, [pc, #68]	; (1000a564 <ble_connected_state_handler+0x1ec>)
1000a51e:	4b12      	ldr	r3, [pc, #72]	; (1000a568 <ble_connected_state_handler+0x1f0>)
1000a520:	4798      	blx	r3
1000a522:	7aa9      	ldrb	r1, [r5, #10]
1000a524:	4821      	ldr	r0, [pc, #132]	; (1000a5ac <ble_connected_state_handler+0x234>)
1000a526:	4b12      	ldr	r3, [pc, #72]	; (1000a570 <ble_connected_state_handler+0x1f8>)
1000a528:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000a52a:	2600      	movs	r6, #0
1000a52c:	e013      	b.n	1000a556 <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000a52e:	4b1b      	ldr	r3, [pc, #108]	; (1000a59c <ble_connected_state_handler+0x224>)
1000a530:	781b      	ldrb	r3, [r3, #0]
1000a532:	b2db      	uxtb	r3, r3
1000a534:	2b04      	cmp	r3, #4
1000a536:	d8df      	bhi.n	1000a4f8 <ble_connected_state_handler+0x180>
1000a538:	4b17      	ldr	r3, [pc, #92]	; (1000a598 <ble_connected_state_handler+0x220>)
1000a53a:	4699      	mov	r9, r3
1000a53c:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a53e:	4b11      	ldr	r3, [pc, #68]	; (1000a584 <ble_connected_state_handler+0x20c>)
1000a540:	469b      	mov	fp, r3
1000a542:	e773      	b.n	1000a42c <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a544:	235e      	movs	r3, #94	; 0x5e
1000a546:	4a14      	ldr	r2, [pc, #80]	; (1000a598 <ble_connected_state_handler+0x220>)
1000a548:	5cd3      	ldrb	r3, [r2, r3]
1000a54a:	2b00      	cmp	r3, #0
1000a54c:	d08c      	beq.n	1000a468 <ble_connected_state_handler+0xf0>
1000a54e:	4a18      	ldr	r2, [pc, #96]	; (1000a5b0 <ble_connected_state_handler+0x238>)
1000a550:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a552:	2701      	movs	r7, #1
1000a554:	e783      	b.n	1000a45e <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000a556:	0030      	movs	r0, r6
1000a558:	b01a      	add	sp, #104	; 0x68
1000a55a:	bc1c      	pop	{r2, r3, r4}
1000a55c:	4690      	mov	r8, r2
1000a55e:	4699      	mov	r9, r3
1000a560:	46a3      	mov	fp, r4
1000a562:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a564:	10010728 	.word	0x10010728
1000a568:	1000f2ed 	.word	0x1000f2ed
1000a56c:	10010c38 	.word	0x10010c38
1000a570:	1000f1cd 	.word	0x1000f1cd
1000a574:	10010c7c 	.word	0x10010c7c
1000a578:	10012e58 	.word	0x10012e58
1000a57c:	1000f1ab 	.word	0x1000f1ab
1000a580:	100118f0 	.word	0x100118f0
1000a584:	1000f18d 	.word	0x1000f18d
1000a588:	1000f1bd 	.word	0x1000f1bd
1000a58c:	10012bf2 	.word	0x10012bf2
1000a590:	1000c281 	.word	0x1000c281
1000a594:	10010c94 	.word	0x10010c94
1000a598:	10012bac 	.word	0x10012bac
1000a59c:	10012e18 	.word	0x10012e18
1000a5a0:	10010cb8 	.word	0x10010cb8
1000a5a4:	1000c255 	.word	0x1000c255
1000a5a8:	1000a345 	.word	0x1000a345
1000a5ac:	10010cf4 	.word	0x10010cf4
1000a5b0:	10012c86 	.word	0x10012c86

1000a5b4 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000a5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a5b6:	4647      	mov	r7, r8
1000a5b8:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000a5ba:	7803      	ldrb	r3, [r0, #0]
1000a5bc:	2b00      	cmp	r3, #0
1000a5be:	d141      	bne.n	1000a644 <ble_resolv_rand_addr_handler+0x90>
1000a5c0:	4d2f      	ldr	r5, [pc, #188]	; (1000a680 <ble_resolv_rand_addr_handler+0xcc>)
1000a5c2:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000a5c4:	1c46      	adds	r6, r0, #1
1000a5c6:	4f2f      	ldr	r7, [pc, #188]	; (1000a684 <ble_resolv_rand_addr_handler+0xd0>)
1000a5c8:	2210      	movs	r2, #16
1000a5ca:	0029      	movs	r1, r5
1000a5cc:	0030      	movs	r0, r6
1000a5ce:	47b8      	blx	r7
1000a5d0:	2800      	cmp	r0, #0
1000a5d2:	d03f      	beq.n	1000a654 <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a5d4:	3401      	adds	r4, #1
1000a5d6:	b2e4      	uxtb	r4, r4
1000a5d8:	357c      	adds	r5, #124	; 0x7c
1000a5da:	2c05      	cmp	r4, #5
1000a5dc:	d1f4      	bne.n	1000a5c8 <ble_resolv_rand_addr_handler+0x14>
1000a5de:	e031      	b.n	1000a644 <ble_resolv_rand_addr_handler+0x90>
1000a5e0:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a5e2:	001c      	movs	r4, r3
1000a5e4:	7811      	ldrb	r1, [r2, #0]
1000a5e6:	2900      	cmp	r1, #0
1000a5e8:	d122      	bne.n	1000a630 <ble_resolv_rand_addr_handler+0x7c>
1000a5ea:	e001      	b.n	1000a5f0 <ble_resolv_rand_addr_handler+0x3c>
1000a5ec:	2400      	movs	r4, #0
1000a5ee:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000a5f0:	4b25      	ldr	r3, [pc, #148]	; (1000a688 <ble_resolv_rand_addr_handler+0xd4>)
1000a5f2:	4698      	mov	r8, r3
1000a5f4:	0166      	lsls	r6, r4, #5
1000a5f6:	1b37      	subs	r7, r6, r4
1000a5f8:	00bf      	lsls	r7, r7, #2
1000a5fa:	4447      	add	r7, r8
1000a5fc:	2212      	movs	r2, #18
1000a5fe:	4923      	ldr	r1, [pc, #140]	; (1000a68c <ble_resolv_rand_addr_handler+0xd8>)
1000a600:	0038      	movs	r0, r7
1000a602:	4b23      	ldr	r3, [pc, #140]	; (1000a690 <ble_resolv_rand_addr_handler+0xdc>)
1000a604:	4798      	blx	r3
				ble_device_count++;
1000a606:	4a23      	ldr	r2, [pc, #140]	; (1000a694 <ble_resolv_rand_addr_handler+0xe0>)
1000a608:	7813      	ldrb	r3, [r2, #0]
1000a60a:	3301      	adds	r3, #1
1000a60c:	b2db      	uxtb	r3, r3
1000a60e:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a610:	375e      	adds	r7, #94	; 0x5e
1000a612:	2302      	movs	r3, #2
1000a614:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a616:	1b34      	subs	r4, r6, r4
1000a618:	00a4      	lsls	r4, r4, #2
1000a61a:	4444      	add	r4, r8
1000a61c:	3308      	adds	r3, #8
1000a61e:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000a620:	016b      	lsls	r3, r5, #5
1000a622:	1b5d      	subs	r5, r3, r5
1000a624:	00ad      	lsls	r5, r5, #2
1000a626:	4445      	add	r5, r8
1000a628:	7cab      	ldrb	r3, [r5, #18]
1000a62a:	2b0a      	cmp	r3, #10
1000a62c:	d123      	bne.n	1000a676 <ble_resolv_rand_addr_handler+0xc2>
1000a62e:	e004      	b.n	1000a63a <ble_resolv_rand_addr_handler+0x86>
1000a630:	3301      	adds	r3, #1
1000a632:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a634:	2b05      	cmp	r3, #5
1000a636:	d1d3      	bne.n	1000a5e0 <ble_resolv_rand_addr_handler+0x2c>
1000a638:	e01d      	b.n	1000a676 <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000a63a:	4b14      	ldr	r3, [pc, #80]	; (1000a68c <ble_resolv_rand_addr_handler+0xd8>)
1000a63c:	8918      	ldrh	r0, [r3, #8]
1000a63e:	4b16      	ldr	r3, [pc, #88]	; (1000a698 <ble_resolv_rand_addr_handler+0xe4>)
1000a640:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000a642:	e018      	b.n	1000a676 <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a644:	235e      	movs	r3, #94	; 0x5e
1000a646:	4a10      	ldr	r2, [pc, #64]	; (1000a688 <ble_resolv_rand_addr_handler+0xd4>)
1000a648:	5cd3      	ldrb	r3, [r2, r3]
1000a64a:	2b00      	cmp	r3, #0
1000a64c:	d0ce      	beq.n	1000a5ec <ble_resolv_rand_addr_handler+0x38>
1000a64e:	4a13      	ldr	r2, [pc, #76]	; (1000a69c <ble_resolv_rand_addr_handler+0xe8>)
1000a650:	2301      	movs	r3, #1
1000a652:	e7c5      	b.n	1000a5e0 <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a654:	480c      	ldr	r0, [pc, #48]	; (1000a688 <ble_resolv_rand_addr_handler+0xd4>)
1000a656:	0163      	lsls	r3, r4, #5
1000a658:	1b1a      	subs	r2, r3, r4
1000a65a:	0092      	lsls	r2, r2, #2
1000a65c:	1882      	adds	r2, r0, r2
1000a65e:	0011      	movs	r1, r2
1000a660:	315e      	adds	r1, #94	; 0x5e
1000a662:	2502      	movs	r5, #2
1000a664:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a666:	210a      	movs	r1, #10
1000a668:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000a66a:	0010      	movs	r0, r2
1000a66c:	2212      	movs	r2, #18
1000a66e:	4907      	ldr	r1, [pc, #28]	; (1000a68c <ble_resolv_rand_addr_handler+0xd8>)
1000a670:	4b07      	ldr	r3, [pc, #28]	; (1000a690 <ble_resolv_rand_addr_handler+0xdc>)
1000a672:	4798      	blx	r3
1000a674:	e7e1      	b.n	1000a63a <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000a676:	2000      	movs	r0, #0
1000a678:	bc04      	pop	{r2}
1000a67a:	4690      	mov	r8, r2
1000a67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a67e:	46c0      	nop			; (mov r8, r8)
1000a680:	10012bf2 	.word	0x10012bf2
1000a684:	1000f18d 	.word	0x1000f18d
1000a688:	10012bac 	.word	0x10012bac
1000a68c:	10012e58 	.word	0x10012e58
1000a690:	1000f1ab 	.word	0x1000f1ab
1000a694:	10012e18 	.word	0x10012e18
1000a698:	1000a345 	.word	0x1000a345
1000a69c:	10012c86 	.word	0x10012c86

1000a6a0 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000a6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a6a2:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
1000a6a4:	283b      	cmp	r0, #59	; 0x3b
1000a6a6:	d872      	bhi.n	1000a78e <ble_event_manager+0xee>
1000a6a8:	0083      	lsls	r3, r0, #2
1000a6aa:	4a3c      	ldr	r2, [pc, #240]	; (1000a79c <ble_event_manager+0xfc>)
1000a6ac:	58d3      	ldr	r3, [r2, r3]
1000a6ae:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a6b0:	0084      	lsls	r4, r0, #2
1000a6b2:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000a6b4:	4f3a      	ldr	r7, [pc, #232]	; (1000a7a0 <ble_event_manager+0x100>)
1000a6b6:	59bb      	ldr	r3, [r7, r6]
1000a6b8:	2b00      	cmp	r3, #0
1000a6ba:	d004      	beq.n	1000a6c6 <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a6bc:	591b      	ldr	r3, [r3, r4]
1000a6be:	2b00      	cmp	r3, #0
1000a6c0:	d001      	beq.n	1000a6c6 <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000a6c2:	0028      	movs	r0, r5
1000a6c4:	4798      	blx	r3
1000a6c6:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000a6c8:	2e14      	cmp	r6, #20
1000a6ca:	d1f4      	bne.n	1000a6b6 <ble_event_manager+0x16>
1000a6cc:	e065      	b.n	1000a79a <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a6ce:	3813      	subs	r0, #19
1000a6d0:	b2c4      	uxtb	r4, r0
1000a6d2:	00a4      	lsls	r4, r4, #2
1000a6d4:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000a6d6:	4f33      	ldr	r7, [pc, #204]	; (1000a7a4 <ble_event_manager+0x104>)
1000a6d8:	59bb      	ldr	r3, [r7, r6]
1000a6da:	2b00      	cmp	r3, #0
1000a6dc:	d004      	beq.n	1000a6e8 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a6de:	591b      	ldr	r3, [r3, r4]
1000a6e0:	2b00      	cmp	r3, #0
1000a6e2:	d001      	beq.n	1000a6e8 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000a6e4:	0028      	movs	r0, r5
1000a6e6:	4798      	blx	r3
1000a6e8:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000a6ea:	2e14      	cmp	r6, #20
1000a6ec:	d1f4      	bne.n	1000a6d8 <ble_event_manager+0x38>
1000a6ee:	e054      	b.n	1000a79a <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a6f0:	381d      	subs	r0, #29
1000a6f2:	b2c4      	uxtb	r4, r0
1000a6f4:	00a4      	lsls	r4, r4, #2
1000a6f6:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000a6f8:	4f2b      	ldr	r7, [pc, #172]	; (1000a7a8 <ble_event_manager+0x108>)
1000a6fa:	59bb      	ldr	r3, [r7, r6]
1000a6fc:	2b00      	cmp	r3, #0
1000a6fe:	d004      	beq.n	1000a70a <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a700:	591b      	ldr	r3, [r3, r4]
1000a702:	2b00      	cmp	r3, #0
1000a704:	d001      	beq.n	1000a70a <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000a706:	0028      	movs	r0, r5
1000a708:	4798      	blx	r3
1000a70a:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000a70c:	2e14      	cmp	r6, #20
1000a70e:	d1f4      	bne.n	1000a6fa <ble_event_manager+0x5a>
1000a710:	e043      	b.n	1000a79a <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000a712:	3827      	subs	r0, #39	; 0x27
1000a714:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000a716:	4b25      	ldr	r3, [pc, #148]	; (1000a7ac <ble_event_manager+0x10c>)
1000a718:	681b      	ldr	r3, [r3, #0]
1000a71a:	2b00      	cmp	r3, #0
1000a71c:	d03d      	beq.n	1000a79a <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a71e:	0080      	lsls	r0, r0, #2
1000a720:	58c3      	ldr	r3, [r0, r3]
1000a722:	2b00      	cmp	r3, #0
1000a724:	d039      	beq.n	1000a79a <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000a726:	0008      	movs	r0, r1
1000a728:	4798      	blx	r3
1000a72a:	e036      	b.n	1000a79a <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000a72c:	382d      	subs	r0, #45	; 0x2d
1000a72e:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000a730:	4b1f      	ldr	r3, [pc, #124]	; (1000a7b0 <ble_event_manager+0x110>)
1000a732:	681b      	ldr	r3, [r3, #0]
1000a734:	2b00      	cmp	r3, #0
1000a736:	d030      	beq.n	1000a79a <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a738:	0080      	lsls	r0, r0, #2
1000a73a:	58c3      	ldr	r3, [r0, r3]
1000a73c:	2b00      	cmp	r3, #0
1000a73e:	d02c      	beq.n	1000a79a <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000a740:	0008      	movs	r0, r1
1000a742:	4798      	blx	r3
1000a744:	e029      	b.n	1000a79a <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a746:	3836      	subs	r0, #54	; 0x36
1000a748:	b2c4      	uxtb	r4, r0
1000a74a:	00a4      	lsls	r4, r4, #2
1000a74c:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000a74e:	4f19      	ldr	r7, [pc, #100]	; (1000a7b4 <ble_event_manager+0x114>)
1000a750:	59bb      	ldr	r3, [r7, r6]
1000a752:	2b00      	cmp	r3, #0
1000a754:	d004      	beq.n	1000a760 <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a756:	591b      	ldr	r3, [r3, r4]
1000a758:	2b00      	cmp	r3, #0
1000a75a:	d001      	beq.n	1000a760 <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000a75c:	0028      	movs	r0, r5
1000a75e:	4798      	blx	r3
1000a760:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000a762:	2e14      	cmp	r6, #20
1000a764:	d1f4      	bne.n	1000a750 <ble_event_manager+0xb0>
1000a766:	e018      	b.n	1000a79a <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000a768:	3838      	subs	r0, #56	; 0x38
1000a76a:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000a76c:	4b12      	ldr	r3, [pc, #72]	; (1000a7b8 <ble_event_manager+0x118>)
1000a76e:	681b      	ldr	r3, [r3, #0]
1000a770:	2b00      	cmp	r3, #0
1000a772:	d012      	beq.n	1000a79a <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a774:	0080      	lsls	r0, r0, #2
1000a776:	58c3      	ldr	r3, [r0, r3]
1000a778:	2b00      	cmp	r3, #0
1000a77a:	d00e      	beq.n	1000a79a <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000a77c:	0008      	movs	r0, r1
1000a77e:	4798      	blx	r3
1000a780:	e00b      	b.n	1000a79a <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000a782:	4b0e      	ldr	r3, [pc, #56]	; (1000a7bc <ble_event_manager+0x11c>)
1000a784:	681b      	ldr	r3, [r3, #0]
1000a786:	2b00      	cmp	r3, #0
1000a788:	d007      	beq.n	1000a79a <ble_event_manager+0xfa>
			ble_user_event_cb();
1000a78a:	4798      	blx	r3
1000a78c:	e005      	b.n	1000a79a <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000a78e:	4d0c      	ldr	r5, [pc, #48]	; (1000a7c0 <ble_event_manager+0x120>)
1000a790:	0028      	movs	r0, r5
1000a792:	4c0c      	ldr	r4, [pc, #48]	; (1000a7c4 <ble_event_manager+0x124>)
1000a794:	47a0      	blx	r4
1000a796:	0028      	movs	r0, r5
1000a798:	47a0      	blx	r4
	}
	break;		
	}
}
1000a79a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a79c:	100105f4 	.word	0x100105f4
1000a7a0:	10012e30 	.word	0x10012e30
1000a7a4:	10012e44 	.word	0x10012e44
1000a7a8:	10012b98 	.word	0x10012b98
1000a7ac:	10012e8c 	.word	0x10012e8c
1000a7b0:	10012b94 	.word	0x10012b94
1000a7b4:	10012e1c 	.word	0x10012e1c
1000a7b8:	100133d0 	.word	0x100133d0
1000a7bc:	100118e8 	.word	0x100118e8
1000a7c0:	10010728 	.word	0x10010728
1000a7c4:	1000f2ed 	.word	0x1000f2ed

1000a7c8 <ble_event_task>:
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000a7c8:	b510      	push	{r4, lr}
1000a7ca:	0002      	movs	r2, r0
	at_ble_status_t status = at_ble_event_get(&event, ble_event_params, timeout);
1000a7cc:	4906      	ldr	r1, [pc, #24]	; (1000a7e8 <ble_event_task+0x20>)
1000a7ce:	4807      	ldr	r0, [pc, #28]	; (1000a7ec <ble_event_task+0x24>)
1000a7d0:	4b07      	ldr	r3, [pc, #28]	; (1000a7f0 <ble_event_task+0x28>)
1000a7d2:	4798      	blx	r3
1000a7d4:	1e04      	subs	r4, r0, #0
    if (status == AT_BLE_SUCCESS) 
1000a7d6:	d104      	bne.n	1000a7e2 <ble_event_task+0x1a>
    {
            ble_event_manager(event, ble_event_params);
1000a7d8:	4b04      	ldr	r3, [pc, #16]	; (1000a7ec <ble_event_task+0x24>)
1000a7da:	7818      	ldrb	r0, [r3, #0]
1000a7dc:	4902      	ldr	r1, [pc, #8]	; (1000a7e8 <ble_event_task+0x20>)
1000a7de:	4b05      	ldr	r3, [pc, #20]	; (1000a7f4 <ble_event_task+0x2c>)
1000a7e0:	4798      	blx	r3
            return AT_BLE_SUCCESS;
    }
    
    return status;
}
1000a7e2:	0020      	movs	r0, r4
1000a7e4:	bd10      	pop	{r4, pc}
1000a7e6:	46c0      	nop			; (mov r8, r8)
1000a7e8:	100131c4 	.word	0x100131c4
1000a7ec:	10012e88 	.word	0x10012e88
1000a7f0:	1000b615 	.word	0x1000b615
1000a7f4:	1000a6a1 	.word	0x1000a6a1

1000a7f8 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000a7f8:	b570      	push	{r4, r5, r6, lr}
1000a7fa:	b090      	sub	sp, #64	; 0x40
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000a7fc:	ac08      	add	r4, sp, #32
1000a7fe:	230a      	movs	r3, #10
1000a800:	7023      	strb	r3, [r4, #0]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000a802:	2609      	movs	r6, #9
1000a804:	7066      	strb	r6, [r4, #1]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000a806:	2209      	movs	r2, #9
1000a808:	4911      	ldr	r1, [pc, #68]	; (1000a850 <ble_advertisement_data_set+0x58>)
1000a80a:	2022      	movs	r0, #34	; 0x22
1000a80c:	4468      	add	r0, sp
1000a80e:	4d11      	ldr	r5, [pc, #68]	; (1000a854 <ble_advertisement_data_set+0x5c>)
1000a810:	47a8      	blx	r5
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000a812:	2300      	movs	r3, #0
1000a814:	466a      	mov	r2, sp
1000a816:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000a818:	3315      	adds	r3, #21
1000a81a:	7053      	strb	r3, [r2, #1]
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
	#if (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000a81c:	72e6      	strb	r6, [r4, #11]
		adv_buf[adv_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000a81e:	33ea      	adds	r3, #234	; 0xea
1000a820:	7323      	strb	r3, [r4, #12]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000a822:	2208      	movs	r2, #8
1000a824:	490c      	ldr	r1, [pc, #48]	; (1000a858 <ble_advertisement_data_set+0x60>)
1000a826:	3110      	adds	r1, #16
1000a828:	202d      	movs	r0, #45	; 0x2d
1000a82a:	4468      	add	r0, sp
1000a82c:	47a8      	blx	r5
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000a82e:	2300      	movs	r3, #0
1000a830:	466a      	mov	r2, sp
1000a832:	2115      	movs	r1, #21
1000a834:	0020      	movs	r0, r4
1000a836:	4c09      	ldr	r4, [pc, #36]	; (1000a85c <ble_advertisement_data_set+0x64>)
1000a838:	47a0      	blx	r4
1000a83a:	2800      	cmp	r0, #0
1000a83c:	d005      	beq.n	1000a84a <ble_advertisement_data_set+0x52>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000a83e:	4808      	ldr	r0, [pc, #32]	; (1000a860 <ble_advertisement_data_set+0x68>)
1000a840:	4b08      	ldr	r3, [pc, #32]	; (1000a864 <ble_advertisement_data_set+0x6c>)
1000a842:	4798      	blx	r3
1000a844:	4808      	ldr	r0, [pc, #32]	; (1000a868 <ble_advertisement_data_set+0x70>)
1000a846:	4b09      	ldr	r3, [pc, #36]	; (1000a86c <ble_advertisement_data_set+0x74>)
1000a848:	4798      	blx	r3
		return status;
		} else {
		DBG_LOG_DEV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
	}
}
1000a84a:	2000      	movs	r0, #0
1000a84c:	b010      	add	sp, #64	; 0x40
1000a84e:	bd70      	pop	{r4, r5, r6, pc}
1000a850:	10010b44 	.word	0x10010b44
1000a854:	1000f1ab 	.word	0x1000f1ab
1000a858:	100106e4 	.word	0x100106e4
1000a85c:	1000c075 	.word	0x1000c075
1000a860:	10010728 	.word	0x10010728
1000a864:	1000f2ed 	.word	0x1000f2ed
1000a868:	10010d1c 	.word	0x10010d1c
1000a86c:	1000f1cd 	.word	0x1000f1cd

1000a870 <dualtimer_callback2>:
extern struct uart_module uart_instance;

void dualtimer_callback2(void)
{
	//puts("Timer2 trigger\r\n");
}
1000a870:	4770      	bx	lr
1000a872:	46c0      	nop			; (mov r8, r8)

1000a874 <hw_timer_init>:

void hw_timer_init(void)
{
1000a874:	b500      	push	{lr}
1000a876:	b089      	sub	sp, #36	; 0x24
	struct dualtimer_config config_dualtimer;
	dualtimer_get_config_defaults(&config_dualtimer);
1000a878:	a801      	add	r0, sp, #4
1000a87a:	4b05      	ldr	r3, [pc, #20]	; (1000a890 <hw_timer_init+0x1c>)
1000a87c:	4798      	blx	r3

	config_dualtimer.timer1.load_value = CONF_DUALTIMER_TIMER1_LOAD;
1000a87e:	4b05      	ldr	r3, [pc, #20]	; (1000a894 <hw_timer_init+0x20>)
1000a880:	9303      	str	r3, [sp, #12]
	config_dualtimer.timer2.load_value = CONF_DUALTIMER_TIMER2_LOAD;
1000a882:	4b05      	ldr	r3, [pc, #20]	; (1000a898 <hw_timer_init+0x24>)
1000a884:	9306      	str	r3, [sp, #24]

	dualtimer_init(&config_dualtimer);
1000a886:	a801      	add	r0, sp, #4
1000a888:	4b04      	ldr	r3, [pc, #16]	; (1000a89c <hw_timer_init+0x28>)
1000a88a:	4798      	blx	r3
}
1000a88c:	b009      	add	sp, #36	; 0x24
1000a88e:	bd00      	pop	{pc}
1000a890:	1000812d 	.word	0x1000812d
1000a894:	018cba80 	.word	0x018cba80
1000a898:	03197500 	.word	0x03197500
1000a89c:	10008199 	.word	0x10008199

1000a8a0 <hw_timer_register_callback>:

void hw_timer_register_callback(hw_timer_callback_t timer_callback_handler)
{
1000a8a0:	b510      	push	{r4, lr}
1000a8a2:	0001      	movs	r1, r0
	dualtimer_register_callback(DUALTIMER_TIMER1, timer_callback_handler);
1000a8a4:	2000      	movs	r0, #0
1000a8a6:	4c07      	ldr	r4, [pc, #28]	; (1000a8c4 <hw_timer_register_callback+0x24>)
1000a8a8:	47a0      	blx	r4
	dualtimer_register_callback(DUALTIMER_TIMER2, dualtimer_callback2);
1000a8aa:	4907      	ldr	r1, [pc, #28]	; (1000a8c8 <hw_timer_register_callback+0x28>)
1000a8ac:	2001      	movs	r0, #1
1000a8ae:	47a0      	blx	r4

	dualtimer_disable(DUALTIMER_TIMER1);
1000a8b0:	2000      	movs	r0, #0
1000a8b2:	4c06      	ldr	r4, [pc, #24]	; (1000a8cc <hw_timer_register_callback+0x2c>)
1000a8b4:	47a0      	blx	r4
	dualtimer_disable(DUALTIMER_TIMER2);
1000a8b6:	2001      	movs	r0, #1
1000a8b8:	47a0      	blx	r4
1000a8ba:	2280      	movs	r2, #128	; 0x80
1000a8bc:	01d2      	lsls	r2, r2, #7
1000a8be:	4b04      	ldr	r3, [pc, #16]	; (1000a8d0 <hw_timer_register_callback+0x30>)
1000a8c0:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000a8c2:	bd10      	pop	{r4, pc}
1000a8c4:	1000829d 	.word	0x1000829d
1000a8c8:	1000a871 	.word	0x1000a871
1000a8cc:	10008175 	.word	0x10008175
1000a8d0:	e000e100 	.word	0xe000e100

1000a8d4 <button_callback>:
#include "button.h"

button_callback_t button_cb_func = NULL;

static void button_callback(void)
{
1000a8d4:	b510      	push	{r4, lr}
	gpio_disable_callback(BUTTON_0_PIN);
1000a8d6:	2017      	movs	r0, #23
1000a8d8:	4b05      	ldr	r3, [pc, #20]	; (1000a8f0 <button_callback+0x1c>)
1000a8da:	4798      	blx	r3

	if(button_cb_func)
1000a8dc:	4b05      	ldr	r3, [pc, #20]	; (1000a8f4 <button_callback+0x20>)
1000a8de:	681b      	ldr	r3, [r3, #0]
1000a8e0:	2b00      	cmp	r3, #0
1000a8e2:	d000      	beq.n	1000a8e6 <button_callback+0x12>
	{
		button_cb_func();
1000a8e4:	4798      	blx	r3
	}

	gpio_enable_callback(BUTTON_0_PIN);
1000a8e6:	2017      	movs	r0, #23
1000a8e8:	4b03      	ldr	r3, [pc, #12]	; (1000a8f8 <button_callback+0x24>)
1000a8ea:	4798      	blx	r3
}
1000a8ec:	bd10      	pop	{r4, pc}
1000a8ee:	46c0      	nop			; (mov r8, r8)
1000a8f0:	10008845 	.word	0x10008845
1000a8f4:	100128f8 	.word	0x100128f8
1000a8f8:	100087e9 	.word	0x100087e9

1000a8fc <button_init>:

void button_init(void)
{
1000a8fc:	b510      	push	{r4, lr}
1000a8fe:	b082      	sub	sp, #8
	struct gpio_config config_gpio_pin;

	gpio_get_config_defaults(&config_gpio_pin);
1000a900:	ac01      	add	r4, sp, #4
1000a902:	0020      	movs	r0, r4
1000a904:	4b05      	ldr	r3, [pc, #20]	; (1000a91c <button_init+0x20>)
1000a906:	4798      	blx	r3

	config_gpio_pin.direction  = GPIO_PIN_DIR_INPUT;
1000a908:	2300      	movs	r3, #0
1000a90a:	7023      	strb	r3, [r4, #0]
	config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000a90c:	7063      	strb	r3, [r4, #1]

	gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin);
1000a90e:	0021      	movs	r1, r4
1000a910:	2017      	movs	r0, #23
1000a912:	4b03      	ldr	r3, [pc, #12]	; (1000a920 <button_init+0x24>)
1000a914:	4798      	blx	r3
}
1000a916:	b002      	add	sp, #8
1000a918:	bd10      	pop	{r4, pc}
1000a91a:	46c0      	nop			; (mov r8, r8)
1000a91c:	10008405 	.word	0x10008405
1000a920:	10008415 	.word	0x10008415

1000a924 <button_register_callback>:

void button_register_callback(button_callback_t callback)
{
1000a924:	b510      	push	{r4, lr}
	button_cb_func = callback;
1000a926:	4b08      	ldr	r3, [pc, #32]	; (1000a948 <button_register_callback+0x24>)
1000a928:	6018      	str	r0, [r3, #0]
	
	if(button_cb_func == NULL)
1000a92a:	2800      	cmp	r0, #0
1000a92c:	d103      	bne.n	1000a936 <button_register_callback+0x12>
	{
		gpio_disable_callback(BUTTON_0_PIN);
1000a92e:	3017      	adds	r0, #23
1000a930:	4b06      	ldr	r3, [pc, #24]	; (1000a94c <button_register_callback+0x28>)
1000a932:	4798      	blx	r3
1000a934:	e007      	b.n	1000a946 <button_register_callback+0x22>
	}
	else
	{
		gpio_register_callback(BUTTON_0_PIN, button_callback, GPIO_CALLBACK_RISING);
1000a936:	2202      	movs	r2, #2
1000a938:	4905      	ldr	r1, [pc, #20]	; (1000a950 <button_register_callback+0x2c>)
1000a93a:	2017      	movs	r0, #23
1000a93c:	4b05      	ldr	r3, [pc, #20]	; (1000a954 <button_register_callback+0x30>)
1000a93e:	4798      	blx	r3
		gpio_enable_callback(BUTTON_0_PIN);
1000a940:	2017      	movs	r0, #23
1000a942:	4b05      	ldr	r3, [pc, #20]	; (1000a958 <button_register_callback+0x34>)
1000a944:	4798      	blx	r3
	}
}
1000a946:	bd10      	pop	{r4, pc}
1000a948:	100128f8 	.word	0x100128f8
1000a94c:	10008845 	.word	0x10008845
1000a950:	1000a8d5 	.word	0x1000a8d5
1000a954:	10008719 	.word	0x10008719
1000a958:	100087e9 	.word	0x100087e9

1000a95c <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000a95c:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000a95e:	4b0e      	ldr	r3, [pc, #56]	; (1000a998 <uart_read_complete_callback+0x3c>)
1000a960:	781b      	ldrb	r3, [r3, #0]
1000a962:	2b01      	cmp	r3, #1
1000a964:	d10b      	bne.n	1000a97e <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000a966:	2202      	movs	r2, #2
1000a968:	4b0b      	ldr	r3, [pc, #44]	; (1000a998 <uart_read_complete_callback+0x3c>)
1000a96a:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000a96c:	4b0b      	ldr	r3, [pc, #44]	; (1000a99c <uart_read_complete_callback+0x40>)
1000a96e:	681b      	ldr	r3, [r3, #0]
1000a970:	2b00      	cmp	r3, #0
1000a972:	d110      	bne.n	1000a996 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000a974:	2102      	movs	r1, #2
1000a976:	480a      	ldr	r0, [pc, #40]	; (1000a9a0 <uart_read_complete_callback+0x44>)
1000a978:	4b0a      	ldr	r3, [pc, #40]	; (1000a9a4 <uart_read_complete_callback+0x48>)
1000a97a:	4798      	blx	r3
1000a97c:	e00b      	b.n	1000a996 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000a97e:	4b07      	ldr	r3, [pc, #28]	; (1000a99c <uart_read_complete_callback+0x40>)
1000a980:	681b      	ldr	r3, [r3, #0]
1000a982:	2b00      	cmp	r3, #0
1000a984:	d007      	beq.n	1000a996 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000a986:	4c08      	ldr	r4, [pc, #32]	; (1000a9a8 <uart_read_complete_callback+0x4c>)
1000a988:	7820      	ldrb	r0, [r4, #0]
1000a98a:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000a98c:	2201      	movs	r2, #1
1000a98e:	0021      	movs	r1, r4
1000a990:	4803      	ldr	r0, [pc, #12]	; (1000a9a0 <uart_read_complete_callback+0x44>)
1000a992:	4b06      	ldr	r3, [pc, #24]	; (1000a9ac <uart_read_complete_callback+0x50>)
1000a994:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000a996:	bd10      	pop	{r4, pc}
1000a998:	10012900 	.word	0x10012900
1000a99c:	10012908 	.word	0x10012908
1000a9a0:	100133d4 	.word	0x100133d4
1000a9a4:	100095e1 	.word	0x100095e1
1000a9a8:	10012904 	.word	0x10012904
1000a9ac:	10009585 	.word	0x10009585

1000a9b0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000a9b0:	b570      	push	{r4, r5, r6, lr}
1000a9b2:	0006      	movs	r6, r0
1000a9b4:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000a9b6:	4c03      	ldr	r4, [pc, #12]	; (1000a9c4 <usart_serial_getchar+0x14>)
1000a9b8:	0029      	movs	r1, r5
1000a9ba:	0030      	movs	r0, r6
1000a9bc:	47a0      	blx	r4
1000a9be:	2800      	cmp	r0, #0
1000a9c0:	d1fa      	bne.n	1000a9b8 <usart_serial_getchar+0x8>
}
1000a9c2:	bd70      	pop	{r4, r5, r6, pc}
1000a9c4:	10009571 	.word	0x10009571

1000a9c8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000a9c8:	b570      	push	{r4, r5, r6, lr}
1000a9ca:	0006      	movs	r6, r0
1000a9cc:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000a9ce:	4c03      	ldr	r4, [pc, #12]	; (1000a9dc <usart_serial_putchar+0x14>)
1000a9d0:	0029      	movs	r1, r5
1000a9d2:	0030      	movs	r0, r6
1000a9d4:	47a0      	blx	r4
1000a9d6:	2800      	cmp	r0, #0
1000a9d8:	d1fa      	bne.n	1000a9d0 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000a9da:	bd70      	pop	{r4, r5, r6, pc}
1000a9dc:	10009561 	.word	0x10009561

1000a9e0 <serial_console_init>:

void serial_console_init(void)
{
1000a9e0:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000a9e2:	2100      	movs	r1, #0
1000a9e4:	2000      	movs	r0, #0
1000a9e6:	4b19      	ldr	r3, [pc, #100]	; (1000aa4c <serial_console_init+0x6c>)
1000a9e8:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000a9ea:	4c19      	ldr	r4, [pc, #100]	; (1000aa50 <serial_console_init+0x70>)
1000a9ec:	0020      	movs	r0, r4
1000a9ee:	4b19      	ldr	r3, [pc, #100]	; (1000aa54 <serial_console_init+0x74>)
1000a9f0:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000a9f2:	23e1      	movs	r3, #225	; 0xe1
1000a9f4:	025b      	lsls	r3, r3, #9
1000a9f6:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
1000a9f8:	2302      	movs	r3, #2
1000a9fa:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
1000a9fc:	2203      	movs	r2, #3
1000a9fe:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
1000aa00:	3201      	adds	r2, #1
1000aa02:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
1000aa04:	3201      	adds	r2, #1
1000aa06:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
1000aa08:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
1000aa0a:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
1000aa0c:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
1000aa0e:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000aa10:	4d11      	ldr	r5, [pc, #68]	; (1000aa58 <serial_console_init+0x78>)
1000aa12:	4b12      	ldr	r3, [pc, #72]	; (1000aa5c <serial_console_init+0x7c>)
1000aa14:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000aa16:	4a12      	ldr	r2, [pc, #72]	; (1000aa60 <serial_console_init+0x80>)
1000aa18:	4b12      	ldr	r3, [pc, #72]	; (1000aa64 <serial_console_init+0x84>)
1000aa1a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000aa1c:	4a12      	ldr	r2, [pc, #72]	; (1000aa68 <serial_console_init+0x88>)
1000aa1e:	4b13      	ldr	r3, [pc, #76]	; (1000aa6c <serial_console_init+0x8c>)
1000aa20:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000aa22:	0022      	movs	r2, r4
1000aa24:	4912      	ldr	r1, [pc, #72]	; (1000aa70 <serial_console_init+0x90>)
1000aa26:	0028      	movs	r0, r5
1000aa28:	4b12      	ldr	r3, [pc, #72]	; (1000aa74 <serial_console_init+0x94>)
1000aa2a:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000aa2c:	4e12      	ldr	r6, [pc, #72]	; (1000aa78 <serial_console_init+0x98>)
1000aa2e:	6833      	ldr	r3, [r6, #0]
1000aa30:	6898      	ldr	r0, [r3, #8]
1000aa32:	2100      	movs	r1, #0
1000aa34:	4c11      	ldr	r4, [pc, #68]	; (1000aa7c <serial_console_init+0x9c>)
1000aa36:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000aa38:	6833      	ldr	r3, [r6, #0]
1000aa3a:	6858      	ldr	r0, [r3, #4]
1000aa3c:	2100      	movs	r1, #0
1000aa3e:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000aa40:	2202      	movs	r2, #2
1000aa42:	490f      	ldr	r1, [pc, #60]	; (1000aa80 <serial_console_init+0xa0>)
1000aa44:	0028      	movs	r0, r5
1000aa46:	4b0f      	ldr	r3, [pc, #60]	; (1000aa84 <serial_console_init+0xa4>)
1000aa48:	4798      	blx	r3
}
1000aa4a:	bd70      	pop	{r4, r5, r6, pc}
1000aa4c:	100088ed 	.word	0x100088ed
1000aa50:	100133f8 	.word	0x100133f8
1000aa54:	10009379 	.word	0x10009379
1000aa58:	100133d4 	.word	0x100133d4
1000aa5c:	10012b90 	.word	0x10012b90
1000aa60:	1000a9c9 	.word	0x1000a9c9
1000aa64:	10012b8c 	.word	0x10012b8c
1000aa68:	1000a9b1 	.word	0x1000a9b1
1000aa6c:	10012b88 	.word	0x10012b88
1000aa70:	40004000 	.word	0x40004000
1000aa74:	100093a5 	.word	0x100093a5
1000aa78:	10010fdc 	.word	0x10010fdc
1000aa7c:	1000f379 	.word	0x1000f379
1000aa80:	1000a95d 	.word	0x1000a95d
1000aa84:	100095ad 	.word	0x100095ad

1000aa88 <_time_start>:

void _time_start(unsigned int sec)
{
1000aa88:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aa8a:	b083      	sub	sp, #12
1000aa8c:	0005      	movs	r5, r0
	system_clock_get_value();
1000aa8e:	4c0d      	ldr	r4, [pc, #52]	; (1000aac4 <_time_start+0x3c>)
1000aa90:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000aa92:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000aa94:	4f0c      	ldr	r7, [pc, #48]	; (1000aac8 <_time_start+0x40>)
1000aa96:	47b8      	blx	r7
1000aa98:	4e0c      	ldr	r6, [pc, #48]	; (1000aacc <_time_start+0x44>)
1000aa9a:	4a0d      	ldr	r2, [pc, #52]	; (1000aad0 <_time_start+0x48>)
1000aa9c:	4b0d      	ldr	r3, [pc, #52]	; (1000aad4 <_time_start+0x4c>)
1000aa9e:	47b0      	blx	r6
1000aaa0:	9000      	str	r0, [sp, #0]
1000aaa2:	9101      	str	r1, [sp, #4]
1000aaa4:	20fa      	movs	r0, #250	; 0xfa
1000aaa6:	0080      	lsls	r0, r0, #2
1000aaa8:	4368      	muls	r0, r5
1000aaaa:	47b8      	blx	r7
1000aaac:	0002      	movs	r2, r0
1000aaae:	000b      	movs	r3, r1
1000aab0:	9800      	ldr	r0, [sp, #0]
1000aab2:	9901      	ldr	r1, [sp, #4]
1000aab4:	47b0      	blx	r6
1000aab6:	4b08      	ldr	r3, [pc, #32]	; (1000aad8 <_time_start+0x50>)
1000aab8:	4798      	blx	r3
1000aaba:	4b08      	ldr	r3, [pc, #32]	; (1000aadc <_time_start+0x54>)
1000aabc:	6018      	str	r0, [r3, #0]
}
1000aabe:	b003      	add	sp, #12
1000aac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aac2:	46c0      	nop			; (mov r8, r8)
1000aac4:	10008971 	.word	0x10008971
1000aac8:	1000edfd 	.word	0x1000edfd
1000aacc:	1000e1f5 	.word	0x1000e1f5
1000aad0:	19feaec7 	.word	0x19feaec7
1000aad4:	3f09d8ef 	.word	0x3f09d8ef
1000aad8:	1000e1b9 	.word	0x1000e1b9
1000aadc:	100128fc 	.word	0x100128fc

1000aae0 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000aae0:	4b02      	ldr	r3, [pc, #8]	; (1000aaec <_time_done+0xc>)
1000aae2:	681a      	ldr	r2, [r3, #0]
1000aae4:	1e50      	subs	r0, r2, #1
1000aae6:	6018      	str	r0, [r3, #0]
}
1000aae8:	4770      	bx	lr
1000aaea:	46c0      	nop			; (mov r8, r8)
1000aaec:	100128fc 	.word	0x100128fc

1000aaf0 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000aaf0:	b570      	push	{r4, r5, r6, lr}
1000aaf2:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000aaf4:	2201      	movs	r2, #1
1000aaf6:	4b11      	ldr	r3, [pc, #68]	; (1000ab3c <getchar_b11_timeout+0x4c>)
1000aaf8:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000aafa:	4b11      	ldr	r3, [pc, #68]	; (1000ab40 <getchar_b11_timeout+0x50>)
1000aafc:	681b      	ldr	r3, [r3, #0]
1000aafe:	2b00      	cmp	r3, #0
1000ab00:	d103      	bne.n	1000ab0a <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000ab02:	2102      	movs	r1, #2
1000ab04:	480f      	ldr	r0, [pc, #60]	; (1000ab44 <getchar_b11_timeout+0x54>)
1000ab06:	4b10      	ldr	r3, [pc, #64]	; (1000ab48 <getchar_b11_timeout+0x58>)
1000ab08:	4798      	blx	r3

	_time_start(sec);
1000ab0a:	0020      	movs	r0, r4
1000ab0c:	4b0f      	ldr	r3, [pc, #60]	; (1000ab4c <getchar_b11_timeout+0x5c>)
1000ab0e:	4798      	blx	r3
	
	string_input[0] = 0;
1000ab10:	490f      	ldr	r1, [pc, #60]	; (1000ab50 <getchar_b11_timeout+0x60>)
1000ab12:	2300      	movs	r3, #0
1000ab14:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ab16:	2201      	movs	r2, #1
1000ab18:	480a      	ldr	r0, [pc, #40]	; (1000ab44 <getchar_b11_timeout+0x54>)
1000ab1a:	4b0e      	ldr	r3, [pc, #56]	; (1000ab54 <getchar_b11_timeout+0x64>)
1000ab1c:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000ab1e:	4c07      	ldr	r4, [pc, #28]	; (1000ab3c <getchar_b11_timeout+0x4c>)
1000ab20:	4d0d      	ldr	r5, [pc, #52]	; (1000ab58 <getchar_b11_timeout+0x68>)
1000ab22:	7823      	ldrb	r3, [r4, #0]
1000ab24:	2b02      	cmp	r3, #2
1000ab26:	d002      	beq.n	1000ab2e <getchar_b11_timeout+0x3e>
1000ab28:	47a8      	blx	r5
1000ab2a:	2800      	cmp	r0, #0
1000ab2c:	d1f9      	bne.n	1000ab22 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000ab2e:	2200      	movs	r2, #0
1000ab30:	4b02      	ldr	r3, [pc, #8]	; (1000ab3c <getchar_b11_timeout+0x4c>)
1000ab32:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000ab34:	4b06      	ldr	r3, [pc, #24]	; (1000ab50 <getchar_b11_timeout+0x60>)
1000ab36:	7818      	ldrb	r0, [r3, #0]
}
1000ab38:	bd70      	pop	{r4, r5, r6, pc}
1000ab3a:	46c0      	nop			; (mov r8, r8)
1000ab3c:	10012900 	.word	0x10012900
1000ab40:	10012908 	.word	0x10012908
1000ab44:	100133d4 	.word	0x100133d4
1000ab48:	100095c1 	.word	0x100095c1
1000ab4c:	1000aa89 	.word	0x1000aa89
1000ab50:	10012904 	.word	0x10012904
1000ab54:	10009585 	.word	0x10009585
1000ab58:	1000aae1 	.word	0x1000aae1

1000ab5c <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000ab5c:	4b02      	ldr	r3, [pc, #8]	; (1000ab68 <platform_event_free+0xc>)
1000ab5e:	681a      	ldr	r2, [r3, #0]
1000ab60:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000ab62:	6018      	str	r0, [r3, #0]
}
1000ab64:	4770      	bx	lr
1000ab66:	46c0      	nop			; (mov r8, r8)
1000ab68:	10012910 	.word	0x10012910

1000ab6c <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000ab6c:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000ab6e:	4b0b      	ldr	r3, [pc, #44]	; (1000ab9c <platform_event_post+0x30>)
1000ab70:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000ab72:	2c00      	cmp	r4, #0
1000ab74:	d011      	beq.n	1000ab9a <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000ab76:	6825      	ldr	r5, [r4, #0]
1000ab78:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000ab7a:	2300      	movs	r3, #0
1000ab7c:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000ab7e:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000ab80:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000ab82:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000ab84:	4b06      	ldr	r3, [pc, #24]	; (1000aba0 <platform_event_post+0x34>)
1000ab86:	681a      	ldr	r2, [r3, #0]
1000ab88:	2a00      	cmp	r2, #0
1000ab8a:	d102      	bne.n	1000ab92 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000ab8c:	601c      	str	r4, [r3, #0]
1000ab8e:	e004      	b.n	1000ab9a <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000ab90:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000ab92:	6813      	ldr	r3, [r2, #0]
1000ab94:	2b00      	cmp	r3, #0
1000ab96:	d1fb      	bne.n	1000ab90 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000ab98:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000ab9a:	bd30      	pop	{r4, r5, pc}
1000ab9c:	10012910 	.word	0x10012910
1000aba0:	1001290c 	.word	0x1001290c

1000aba4 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000aba4:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000aba6:	2300      	movs	r3, #0
1000aba8:	4a06      	ldr	r2, [pc, #24]	; (1000abc4 <platform_event_init+0x20>)
1000abaa:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000abac:	4a06      	ldr	r2, [pc, #24]	; (1000abc8 <platform_event_init+0x24>)
1000abae:	6013      	str	r3, [r2, #0]
1000abb0:	4c06      	ldr	r4, [pc, #24]	; (1000abcc <platform_event_init+0x28>)
1000abb2:	0026      	movs	r6, r4
1000abb4:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000abb6:	4d06      	ldr	r5, [pc, #24]	; (1000abd0 <platform_event_init+0x2c>)
1000abb8:	0020      	movs	r0, r4
1000abba:	47a8      	blx	r5
1000abbc:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000abbe:	42b4      	cmp	r4, r6
1000abc0:	d1fa      	bne.n	1000abb8 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000abc2:	bd70      	pop	{r4, r5, r6, pc}
1000abc4:	10012910 	.word	0x10012910
1000abc8:	1001290c 	.word	0x1001290c
1000abcc:	10012914 	.word	0x10012914
1000abd0:	1000ab5d 	.word	0x1000ab5d

1000abd4 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000abd4:	b570      	push	{r4, r5, r6, lr}
1000abd6:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000abd8:	4b13      	ldr	r3, [pc, #76]	; (1000ac28 <at_ke_msg_send+0x54>)
1000abda:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000abdc:	4b13      	ldr	r3, [pc, #76]	; (1000ac2c <at_ke_msg_send+0x58>)
1000abde:	681b      	ldr	r3, [r3, #0]
1000abe0:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000abe2:	2c0c      	cmp	r4, #12
1000abe4:	d01f      	beq.n	1000ac26 <at_ke_msg_send+0x52>
1000abe6:	3c0c      	subs	r4, #12
1000abe8:	88e3      	ldrh	r3, [r4, #6]
1000abea:	2b05      	cmp	r3, #5
1000abec:	d01b      	beq.n	1000ac26 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000abee:	07eb      	lsls	r3, r5, #31
1000abf0:	d414      	bmi.n	1000ac1c <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000abf2:	4b0f      	ldr	r3, [pc, #60]	; (1000ac30 <at_ke_msg_send+0x5c>)
1000abf4:	681b      	ldr	r3, [r3, #0]
1000abf6:	2002      	movs	r0, #2
1000abf8:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000abfa:	4b0e      	ldr	r3, [pc, #56]	; (1000ac34 <at_ke_msg_send+0x60>)
1000abfc:	681b      	ldr	r3, [r3, #0]
1000abfe:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000ac00:	4c0d      	ldr	r4, [pc, #52]	; (1000ac38 <at_ke_msg_send+0x64>)
1000ac02:	2003      	movs	r0, #3
1000ac04:	6823      	ldr	r3, [r4, #0]
1000ac06:	4798      	blx	r3
1000ac08:	2800      	cmp	r0, #0
1000ac0a:	d1fa      	bne.n	1000ac02 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000ac0c:	4b0b      	ldr	r3, [pc, #44]	; (1000ac3c <at_ke_msg_send+0x68>)
1000ac0e:	681b      	ldr	r3, [r3, #0]
1000ac10:	3002      	adds	r0, #2
1000ac12:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000ac14:	2201      	movs	r2, #1
1000ac16:	4b0a      	ldr	r3, [pc, #40]	; (1000ac40 <at_ke_msg_send+0x6c>)
1000ac18:	601a      	str	r2, [r3, #0]
1000ac1a:	e004      	b.n	1000ac26 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000ac1c:	4b09      	ldr	r3, [pc, #36]	; (1000ac44 <at_ke_msg_send+0x70>)
1000ac1e:	6818      	ldr	r0, [r3, #0]
1000ac20:	4b09      	ldr	r3, [pc, #36]	; (1000ac48 <at_ke_msg_send+0x74>)
1000ac22:	681b      	ldr	r3, [r3, #0]
1000ac24:	4798      	blx	r3
		}
	}
}
1000ac26:	bd70      	pop	{r4, r5, r6, pc}
1000ac28:	4000b1ec 	.word	0x4000b1ec
1000ac2c:	100129bc 	.word	0x100129bc
1000ac30:	100129b4 	.word	0x100129b4
1000ac34:	100129c8 	.word	0x100129c8
1000ac38:	100129a0 	.word	0x100129a0
1000ac3c:	100129a8 	.word	0x100129a8
1000ac40:	4000b020 	.word	0x4000b020
1000ac44:	100129ac 	.word	0x100129ac
1000ac48:	1001299c 	.word	0x1001299c

1000ac4c <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000ac4c:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000ac4e:	4b06      	ldr	r3, [pc, #24]	; (1000ac68 <samb11_plf_resume_callback+0x1c>)
1000ac50:	4a06      	ldr	r2, [pc, #24]	; (1000ac6c <samb11_plf_resume_callback+0x20>)
1000ac52:	6819      	ldr	r1, [r3, #0]
1000ac54:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000ac56:	685a      	ldr	r2, [r3, #4]
1000ac58:	4b05      	ldr	r3, [pc, #20]	; (1000ac70 <samb11_plf_resume_callback+0x24>)
1000ac5a:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000ac5c:	4b05      	ldr	r3, [pc, #20]	; (1000ac74 <samb11_plf_resume_callback+0x28>)
1000ac5e:	681b      	ldr	r3, [r3, #0]
1000ac60:	2b00      	cmp	r3, #0
1000ac62:	d000      	beq.n	1000ac66 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000ac64:	4798      	blx	r3
	}
}
1000ac66:	bd10      	pop	{r4, pc}
1000ac68:	10013420 	.word	0x10013420
1000ac6c:	4000b00c 	.word	0x4000b00c
1000ac70:	4000b010 	.word	0x4000b010
1000ac74:	100136fc 	.word	0x100136fc

1000ac78 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000ac78:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000ac7a:	2232      	movs	r2, #50	; 0x32
1000ac7c:	2100      	movs	r1, #0
1000ac7e:	480d      	ldr	r0, [pc, #52]	; (1000acb4 <init_port_list+0x3c>)
1000ac80:	4b0d      	ldr	r3, [pc, #52]	; (1000acb8 <init_port_list+0x40>)
1000ac82:	4798      	blx	r3
1000ac84:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000ac86:	480b      	ldr	r0, [pc, #44]	; (1000acb4 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000ac88:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000ac8a:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000ac8c:	004a      	lsls	r2, r1, #1
1000ac8e:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000ac90:	1882      	adds	r2, r0, r2
1000ac92:	7853      	ldrb	r3, [r2, #1]
1000ac94:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000ac96:	b2db      	uxtb	r3, r3
1000ac98:	43a3      	bics	r3, r4
1000ac9a:	7053      	strb	r3, [r2, #1]
1000ac9c:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000ac9e:	2919      	cmp	r1, #25
1000aca0:	d1f4      	bne.n	1000ac8c <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000aca2:	4b04      	ldr	r3, [pc, #16]	; (1000acb4 <init_port_list+0x3c>)
1000aca4:	785a      	ldrb	r2, [r3, #1]
1000aca6:	3918      	subs	r1, #24
1000aca8:	438a      	bics	r2, r1
1000acaa:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000acac:	78da      	ldrb	r2, [r3, #3]
1000acae:	438a      	bics	r2, r1
1000acb0:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000acb2:	bd70      	pop	{r4, r5, r6, pc}
1000acb4:	1001343c 	.word	0x1001343c
1000acb8:	1000f1bd 	.word	0x1000f1bd

1000acbc <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000acbc:	4a06      	ldr	r2, [pc, #24]	; (1000acd8 <init_clock+0x1c>)
1000acbe:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000acc0:	4b06      	ldr	r3, [pc, #24]	; (1000acdc <init_clock+0x20>)
1000acc2:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000acc4:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000acc6:	4a06      	ldr	r2, [pc, #24]	; (1000ace0 <init_clock+0x24>)
1000acc8:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000acca:	4906      	ldr	r1, [pc, #24]	; (1000ace4 <init_clock+0x28>)
1000accc:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000acce:	4b06      	ldr	r3, [pc, #24]	; (1000ace8 <init_clock+0x2c>)
1000acd0:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000acd2:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000acd4:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000acd6:	4770      	bx	lr
1000acd8:	4000b00c 	.word	0x4000b00c
1000acdc:	fffe0fd3 	.word	0xfffe0fd3
1000ace0:	10013420 	.word	0x10013420
1000ace4:	4000b010 	.word	0x4000b010
1000ace8:	ffffe7c0 	.word	0xffffe7c0

1000acec <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000acec:	b5f0      	push	{r4, r5, r6, r7, lr}
1000acee:	4657      	mov	r7, sl
1000acf0:	464e      	mov	r6, r9
1000acf2:	4645      	mov	r5, r8
1000acf4:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000acf6:	4b4f      	ldr	r3, [pc, #316]	; (1000ae34 <platform_driver_init+0x148>)
1000acf8:	781b      	ldrb	r3, [r3, #0]
1000acfa:	2b00      	cmp	r3, #0
1000acfc:	d004      	beq.n	1000ad08 <platform_driver_init+0x1c>
1000acfe:	4b4d      	ldr	r3, [pc, #308]	; (1000ae34 <platform_driver_init+0x148>)
1000ad00:	781b      	ldrb	r3, [r3, #0]
1000ad02:	2b01      	cmp	r3, #1
1000ad04:	d100      	bne.n	1000ad08 <platform_driver_init+0x1c>
1000ad06:	e08c      	b.n	1000ae22 <platform_driver_init+0x136>
		init_port_list();
1000ad08:	4b4b      	ldr	r3, [pc, #300]	; (1000ae38 <platform_driver_init+0x14c>)
1000ad0a:	4798      	blx	r3
		init_clock();
1000ad0c:	4b4b      	ldr	r3, [pc, #300]	; (1000ae3c <platform_driver_init+0x150>)
1000ad0e:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000ad10:	2300      	movs	r3, #0
1000ad12:	4698      	mov	r8, r3
1000ad14:	4b4a      	ldr	r3, [pc, #296]	; (1000ae40 <platform_driver_init+0x154>)
1000ad16:	4642      	mov	r2, r8
1000ad18:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ad1a:	4c4a      	ldr	r4, [pc, #296]	; (1000ae44 <platform_driver_init+0x158>)
1000ad1c:	2380      	movs	r3, #128	; 0x80
1000ad1e:	2280      	movs	r2, #128	; 0x80
1000ad20:	0412      	lsls	r2, r2, #16
1000ad22:	4692      	mov	sl, r2
1000ad24:	50e2      	str	r2, [r4, r3]
1000ad26:	2280      	movs	r2, #128	; 0x80
1000ad28:	0452      	lsls	r2, r2, #17
1000ad2a:	4691      	mov	r9, r2
1000ad2c:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000ad2e:	4d46      	ldr	r5, [pc, #280]	; (1000ae48 <platform_driver_init+0x15c>)
1000ad30:	4b46      	ldr	r3, [pc, #280]	; (1000ae4c <platform_driver_init+0x160>)
1000ad32:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000ad34:	4b46      	ldr	r3, [pc, #280]	; (1000ae50 <platform_driver_init+0x164>)
1000ad36:	4a47      	ldr	r2, [pc, #284]	; (1000ae54 <platform_driver_init+0x168>)
1000ad38:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000ad3a:	4947      	ldr	r1, [pc, #284]	; (1000ae58 <platform_driver_init+0x16c>)
1000ad3c:	4a47      	ldr	r2, [pc, #284]	; (1000ae5c <platform_driver_init+0x170>)
1000ad3e:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000ad40:	4a47      	ldr	r2, [pc, #284]	; (1000ae60 <platform_driver_init+0x174>)
1000ad42:	6811      	ldr	r1, [r2, #0]
1000ad44:	4a47      	ldr	r2, [pc, #284]	; (1000ae64 <platform_driver_init+0x178>)
1000ad46:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000ad48:	4a47      	ldr	r2, [pc, #284]	; (1000ae68 <platform_driver_init+0x17c>)
1000ad4a:	6811      	ldr	r1, [r2, #0]
1000ad4c:	4a47      	ldr	r2, [pc, #284]	; (1000ae6c <platform_driver_init+0x180>)
1000ad4e:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000ad50:	4947      	ldr	r1, [pc, #284]	; (1000ae70 <platform_driver_init+0x184>)
1000ad52:	4a48      	ldr	r2, [pc, #288]	; (1000ae74 <platform_driver_init+0x188>)
1000ad54:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000ad56:	4948      	ldr	r1, [pc, #288]	; (1000ae78 <platform_driver_init+0x18c>)
1000ad58:	4a48      	ldr	r2, [pc, #288]	; (1000ae7c <platform_driver_init+0x190>)
1000ad5a:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000ad5c:	4f48      	ldr	r7, [pc, #288]	; (1000ae80 <platform_driver_init+0x194>)
1000ad5e:	4a49      	ldr	r2, [pc, #292]	; (1000ae84 <platform_driver_init+0x198>)
1000ad60:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000ad62:	4949      	ldr	r1, [pc, #292]	; (1000ae88 <platform_driver_init+0x19c>)
1000ad64:	4a49      	ldr	r2, [pc, #292]	; (1000ae8c <platform_driver_init+0x1a0>)
1000ad66:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000ad68:	4949      	ldr	r1, [pc, #292]	; (1000ae90 <platform_driver_init+0x1a4>)
1000ad6a:	4a4a      	ldr	r2, [pc, #296]	; (1000ae94 <platform_driver_init+0x1a8>)
1000ad6c:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000ad6e:	4e4a      	ldr	r6, [pc, #296]	; (1000ae98 <platform_driver_init+0x1ac>)
1000ad70:	4a4a      	ldr	r2, [pc, #296]	; (1000ae9c <platform_driver_init+0x1b0>)
1000ad72:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000ad74:	494a      	ldr	r1, [pc, #296]	; (1000aea0 <platform_driver_init+0x1b4>)
1000ad76:	4a4b      	ldr	r2, [pc, #300]	; (1000aea4 <platform_driver_init+0x1b8>)
1000ad78:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000ad7a:	494b      	ldr	r1, [pc, #300]	; (1000aea8 <platform_driver_init+0x1bc>)
1000ad7c:	4a4b      	ldr	r2, [pc, #300]	; (1000aeac <platform_driver_init+0x1c0>)
1000ad7e:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000ad80:	494b      	ldr	r1, [pc, #300]	; (1000aeb0 <platform_driver_init+0x1c4>)
1000ad82:	4a4c      	ldr	r2, [pc, #304]	; (1000aeb4 <platform_driver_init+0x1c8>)
1000ad84:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000ad86:	494c      	ldr	r1, [pc, #304]	; (1000aeb8 <platform_driver_init+0x1cc>)
1000ad88:	4a4c      	ldr	r2, [pc, #304]	; (1000aebc <platform_driver_init+0x1d0>)
1000ad8a:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000ad8c:	494c      	ldr	r1, [pc, #304]	; (1000aec0 <platform_driver_init+0x1d4>)
1000ad8e:	4a4d      	ldr	r2, [pc, #308]	; (1000aec4 <platform_driver_init+0x1d8>)
1000ad90:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000ad92:	2028      	movs	r0, #40	; 0x28
1000ad94:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000ad96:	494c      	ldr	r1, [pc, #304]	; (1000aec8 <platform_driver_init+0x1dc>)
1000ad98:	2028      	movs	r0, #40	; 0x28
1000ad9a:	682b      	ldr	r3, [r5, #0]
1000ad9c:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000ad9e:	682b      	ldr	r3, [r5, #0]
1000ada0:	494a      	ldr	r1, [pc, #296]	; (1000aecc <platform_driver_init+0x1e0>)
1000ada2:	2027      	movs	r0, #39	; 0x27
1000ada4:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000ada6:	4b4a      	ldr	r3, [pc, #296]	; (1000aed0 <platform_driver_init+0x1e4>)
1000ada8:	681a      	ldr	r2, [r3, #0]
1000adaa:	4b4a      	ldr	r3, [pc, #296]	; (1000aed4 <platform_driver_init+0x1e8>)
1000adac:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000adae:	4a4a      	ldr	r2, [pc, #296]	; (1000aed8 <platform_driver_init+0x1ec>)
1000adb0:	4b4a      	ldr	r3, [pc, #296]	; (1000aedc <platform_driver_init+0x1f0>)
1000adb2:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000adb4:	4a4a      	ldr	r2, [pc, #296]	; (1000aee0 <platform_driver_init+0x1f4>)
1000adb6:	4b4b      	ldr	r3, [pc, #300]	; (1000aee4 <platform_driver_init+0x1f8>)
1000adb8:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000adba:	4a4b      	ldr	r2, [pc, #300]	; (1000aee8 <platform_driver_init+0x1fc>)
1000adbc:	4b4b      	ldr	r3, [pc, #300]	; (1000aeec <platform_driver_init+0x200>)
1000adbe:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000adc0:	4a4b      	ldr	r2, [pc, #300]	; (1000aef0 <platform_driver_init+0x204>)
1000adc2:	4b4c      	ldr	r3, [pc, #304]	; (1000aef4 <platform_driver_init+0x208>)
1000adc4:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000adc6:	4a4c      	ldr	r2, [pc, #304]	; (1000aef8 <platform_driver_init+0x20c>)
1000adc8:	4b4c      	ldr	r3, [pc, #304]	; (1000aefc <platform_driver_init+0x210>)
1000adca:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000adcc:	4a4c      	ldr	r2, [pc, #304]	; (1000af00 <platform_driver_init+0x214>)
1000adce:	4b4d      	ldr	r3, [pc, #308]	; (1000af04 <platform_driver_init+0x218>)
1000add0:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000add2:	4a4d      	ldr	r2, [pc, #308]	; (1000af08 <platform_driver_init+0x21c>)
1000add4:	4b4d      	ldr	r3, [pc, #308]	; (1000af0c <platform_driver_init+0x220>)
1000add6:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000add8:	22a0      	movs	r2, #160	; 0xa0
1000adda:	0092      	lsls	r2, r2, #2
1000addc:	2100      	movs	r1, #0
1000adde:	484c      	ldr	r0, [pc, #304]	; (1000af10 <platform_driver_init+0x224>)
1000ade0:	4b4c      	ldr	r3, [pc, #304]	; (1000af14 <platform_driver_init+0x228>)
1000ade2:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000ade4:	2280      	movs	r2, #128	; 0x80
1000ade6:	0092      	lsls	r2, r2, #2
1000ade8:	4b4b      	ldr	r3, [pc, #300]	; (1000af18 <platform_driver_init+0x22c>)
1000adea:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000adec:	4b4b      	ldr	r3, [pc, #300]	; (1000af1c <platform_driver_init+0x230>)
1000adee:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000adf0:	4653      	mov	r3, sl
1000adf2:	6023      	str	r3, [r4, #0]
1000adf4:	464b      	mov	r3, r9
1000adf6:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000adf8:	4b49      	ldr	r3, [pc, #292]	; (1000af20 <platform_driver_init+0x234>)
1000adfa:	4642      	mov	r2, r8
1000adfc:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000adfe:	683b      	ldr	r3, [r7, #0]
1000ae00:	4a48      	ldr	r2, [pc, #288]	; (1000af24 <platform_driver_init+0x238>)
1000ae02:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000ae04:	6833      	ldr	r3, [r6, #0]
1000ae06:	4a48      	ldr	r2, [pc, #288]	; (1000af28 <platform_driver_init+0x23c>)
1000ae08:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000ae0a:	2000      	movs	r0, #0
1000ae0c:	4c47      	ldr	r4, [pc, #284]	; (1000af2c <platform_driver_init+0x240>)
1000ae0e:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000ae10:	2001      	movs	r0, #1
1000ae12:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000ae14:	2002      	movs	r0, #2
1000ae16:	47a0      	blx	r4
		platform_initialized = 1;
1000ae18:	2201      	movs	r2, #1
1000ae1a:	4b06      	ldr	r3, [pc, #24]	; (1000ae34 <platform_driver_init+0x148>)
1000ae1c:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000ae1e:	2000      	movs	r0, #0
1000ae20:	e003      	b.n	1000ae2a <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000ae22:	2201      	movs	r2, #1
1000ae24:	4b03      	ldr	r3, [pc, #12]	; (1000ae34 <platform_driver_init+0x148>)
1000ae26:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000ae28:	2001      	movs	r0, #1
	}
	return status;
}
1000ae2a:	bc1c      	pop	{r2, r3, r4}
1000ae2c:	4690      	mov	r8, r2
1000ae2e:	4699      	mov	r9, r3
1000ae30:	46a2      	mov	sl, r4
1000ae32:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ae34:	100129a4 	.word	0x100129a4
1000ae38:	1000ac79 	.word	0x1000ac79
1000ae3c:	1000acbd 	.word	0x1000acbd
1000ae40:	100129c4 	.word	0x100129c4
1000ae44:	e000e100 	.word	0xe000e100
1000ae48:	100136f0 	.word	0x100136f0
1000ae4c:	000007d7 	.word	0x000007d7
1000ae50:	000007bd 	.word	0x000007bd
1000ae54:	1001342c 	.word	0x1001342c
1000ae58:	0001bc51 	.word	0x0001bc51
1000ae5c:	100136f4 	.word	0x100136f4
1000ae60:	100400bc 	.word	0x100400bc
1000ae64:	10012994 	.word	0x10012994
1000ae68:	100400b8 	.word	0x100400b8
1000ae6c:	10012990 	.word	0x10012990
1000ae70:	0001b99f 	.word	0x0001b99f
1000ae74:	10013428 	.word	0x10013428
1000ae78:	0001b9db 	.word	0x0001b9db
1000ae7c:	10013434 	.word	0x10013434
1000ae80:	10013704 	.word	0x10013704
1000ae84:	1004003c 	.word	0x1004003c
1000ae88:	10041fc0 	.word	0x10041fc0
1000ae8c:	10013438 	.word	0x10013438
1000ae90:	10041fc4 	.word	0x10041fc4
1000ae94:	10013700 	.word	0x10013700
1000ae98:	100136f8 	.word	0x100136f8
1000ae9c:	10041fd4 	.word	0x10041fd4
1000aea0:	10041fd8 	.word	0x10041fd8
1000aea4:	10013430 	.word	0x10013430
1000aea8:	0001cbe9 	.word	0x0001cbe9
1000aeac:	100129b4 	.word	0x100129b4
1000aeb0:	0001cd8f 	.word	0x0001cd8f
1000aeb4:	100129a8 	.word	0x100129a8
1000aeb8:	0001cea3 	.word	0x0001cea3
1000aebc:	100129c8 	.word	0x100129c8
1000aec0:	0001cbcf 	.word	0x0001cbcf
1000aec4:	100129a0 	.word	0x100129a0
1000aec8:	1000b305 	.word	0x1000b305
1000aecc:	1000b299 	.word	0x1000b299
1000aed0:	100400e4 	.word	0x100400e4
1000aed4:	100129bc 	.word	0x100129bc
1000aed8:	00019fe9 	.word	0x00019fe9
1000aedc:	100129cc 	.word	0x100129cc
1000aee0:	0001dbdd 	.word	0x0001dbdd
1000aee4:	1001299c 	.word	0x1001299c
1000aee8:	0001dc5b 	.word	0x0001dc5b
1000aeec:	100129b0 	.word	0x100129b0
1000aef0:	100405ec 	.word	0x100405ec
1000aef4:	100129ac 	.word	0x100129ac
1000aef8:	0001d5e3 	.word	0x0001d5e3
1000aefc:	100129b8 	.word	0x100129b8
1000af00:	10040c20 	.word	0x10040c20
1000af04:	100129d0 	.word	0x100129d0
1000af08:	00019f09 	.word	0x00019f09
1000af0c:	1001298c 	.word	0x1001298c
1000af10:	10013470 	.word	0x10013470
1000af14:	1000f1bd 	.word	0x1000f1bd
1000af18:	10013708 	.word	0x10013708
1000af1c:	1000aba5 	.word	0x1000aba5
1000af20:	100136fc 	.word	0x100136fc
1000af24:	1000ac4d 	.word	0x1000ac4d
1000af28:	1000b361 	.word	0x1000b361
1000af2c:	1000b349 	.word	0x1000b349

1000af30 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000af30:	4b04      	ldr	r3, [pc, #16]	; (1000af44 <platform_register_ble_msg_handler+0x14>)
1000af32:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000af34:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000af36:	2a01      	cmp	r2, #1
1000af38:	d102      	bne.n	1000af40 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000af3a:	4b03      	ldr	r3, [pc, #12]	; (1000af48 <platform_register_ble_msg_handler+0x18>)
1000af3c:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000af3e:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000af40:	0018      	movs	r0, r3
1000af42:	4770      	bx	lr
1000af44:	100129a4 	.word	0x100129a4
1000af48:	100129c4 	.word	0x100129c4

1000af4c <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000af4c:	b570      	push	{r4, r5, r6, lr}
1000af4e:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000af50:	4b0e      	ldr	r3, [pc, #56]	; (1000af8c <platform_interface_send+0x40>)
1000af52:	681b      	ldr	r3, [r3, #0]
1000af54:	2b00      	cmp	r3, #0
1000af56:	d002      	beq.n	1000af5e <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000af58:	8840      	ldrh	r0, [r0, #2]
1000af5a:	4798      	blx	r3
1000af5c:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000af5e:	88e3      	ldrh	r3, [r4, #6]
1000af60:	88a2      	ldrh	r2, [r4, #4]
1000af62:	8861      	ldrh	r1, [r4, #2]
1000af64:	8820      	ldrh	r0, [r4, #0]
1000af66:	4d0a      	ldr	r5, [pc, #40]	; (1000af90 <platform_interface_send+0x44>)
1000af68:	682d      	ldr	r5, [r5, #0]
1000af6a:	47a8      	blx	r5
1000af6c:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000af6e:	88e2      	ldrh	r2, [r4, #6]
1000af70:	2a00      	cmp	r2, #0
1000af72:	d102      	bne.n	1000af7a <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000af74:	4b07      	ldr	r3, [pc, #28]	; (1000af94 <platform_interface_send+0x48>)
1000af76:	4798      	blx	r3
1000af78:	e006      	b.n	1000af88 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000af7a:	0021      	movs	r1, r4
1000af7c:	3108      	adds	r1, #8
1000af7e:	4b06      	ldr	r3, [pc, #24]	; (1000af98 <platform_interface_send+0x4c>)
1000af80:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000af82:	0028      	movs	r0, r5
1000af84:	4b03      	ldr	r3, [pc, #12]	; (1000af94 <platform_interface_send+0x48>)
1000af86:	4798      	blx	r3
	}
}
1000af88:	bd70      	pop	{r4, r5, r6, pc}
1000af8a:	46c0      	nop			; (mov r8, r8)
1000af8c:	10012994 	.word	0x10012994
1000af90:	100129cc 	.word	0x100129cc
1000af94:	1000abd5 	.word	0x1000abd5
1000af98:	1000f1ab 	.word	0x1000f1ab

1000af9c <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000af9c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000af9e:	465f      	mov	r7, fp
1000afa0:	4656      	mov	r6, sl
1000afa2:	464d      	mov	r5, r9
1000afa4:	4644      	mov	r4, r8
1000afa6:	b4f0      	push	{r4, r5, r6, r7}
1000afa8:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000afaa:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000afac:	2300      	movs	r3, #0
1000afae:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000afb0:	1ce3      	adds	r3, r4, #3
1000afb2:	d81c      	bhi.n	1000afee <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000afb4:	220d      	movs	r2, #13
1000afb6:	2100      	movs	r1, #0
1000afb8:	a802      	add	r0, sp, #8
1000afba:	4b82      	ldr	r3, [pc, #520]	; (1000b1c4 <platform_event_wait+0x228>)
1000afbc:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000afbe:	2333      	movs	r3, #51	; 0x33
1000afc0:	aa02      	add	r2, sp, #8
1000afc2:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000afc4:	3b30      	subs	r3, #48	; 0x30
1000afc6:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000afc8:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000afca:	3302      	adds	r3, #2
1000afcc:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000afce:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000afd0:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000afd2:	0a23      	lsrs	r3, r4, #8
1000afd4:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000afd6:	0c23      	lsrs	r3, r4, #16
1000afd8:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000afda:	0e24      	lsrs	r4, r4, #24
1000afdc:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000afde:	2301      	movs	r3, #1
1000afe0:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000afe2:	210d      	movs	r1, #13
1000afe4:	0010      	movs	r0, r2
1000afe6:	4b78      	ldr	r3, [pc, #480]	; (1000b1c8 <platform_event_wait+0x22c>)
1000afe8:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000afea:	2301      	movs	r3, #1
1000afec:	4699      	mov	r9, r3
1000afee:	2400      	movs	r4, #0
1000aff0:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000aff2:	4f76      	ldr	r7, [pc, #472]	; (1000b1cc <platform_event_wait+0x230>)
1000aff4:	4e76      	ldr	r6, [pc, #472]	; (1000b1d0 <platform_event_wait+0x234>)
1000aff6:	4977      	ldr	r1, [pc, #476]	; (1000b1d4 <platform_event_wait+0x238>)
1000aff8:	6838      	ldr	r0, [r7, #0]
1000affa:	6833      	ldr	r3, [r6, #0]
1000affc:	4798      	blx	r3
1000affe:	2800      	cmp	r0, #0
1000b000:	d000      	beq.n	1000b004 <platform_event_wait+0x68>
1000b002:	e088      	b.n	1000b116 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000b004:	4b73      	ldr	r3, [pc, #460]	; (1000b1d4 <platform_event_wait+0x238>)
1000b006:	681c      	ldr	r4, [r3, #0]
1000b008:	88a3      	ldrh	r3, [r4, #4]
1000b00a:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b00c:	23cd      	movs	r3, #205	; 0xcd
1000b00e:	009b      	lsls	r3, r3, #2
1000b010:	459a      	cmp	sl, r3
1000b012:	d100      	bne.n	1000b016 <platform_event_wait+0x7a>
1000b014:	e0c7      	b.n	1000b1a6 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000b016:	8923      	ldrh	r3, [r4, #8]
1000b018:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000b01a:	8963      	ldrh	r3, [r4, #10]
1000b01c:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b01e:	464b      	mov	r3, r9
1000b020:	2b00      	cmp	r3, #0
1000b022:	d011      	beq.n	1000b048 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000b024:	220d      	movs	r2, #13
1000b026:	2100      	movs	r1, #0
1000b028:	a802      	add	r0, sp, #8
1000b02a:	4b66      	ldr	r3, [pc, #408]	; (1000b1c4 <platform_event_wait+0x228>)
1000b02c:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b02e:	2333      	movs	r3, #51	; 0x33
1000b030:	aa02      	add	r2, sp, #8
1000b032:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b034:	3b30      	subs	r3, #48	; 0x30
1000b036:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b038:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b03a:	3302      	adds	r3, #2
1000b03c:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b03e:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000b040:	210d      	movs	r1, #13
1000b042:	0010      	movs	r0, r2
1000b044:	4b60      	ldr	r3, [pc, #384]	; (1000b1c8 <platform_event_wait+0x22c>)
1000b046:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000b048:	23a0      	movs	r3, #160	; 0xa0
1000b04a:	00db      	lsls	r3, r3, #3
1000b04c:	459a      	cmp	sl, r3
1000b04e:	d121      	bne.n	1000b094 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000b050:	4b61      	ldr	r3, [pc, #388]	; (1000b1d8 <platform_event_wait+0x23c>)
1000b052:	881b      	ldrh	r3, [r3, #0]
1000b054:	4443      	add	r3, r8
1000b056:	22a0      	movs	r2, #160	; 0xa0
1000b058:	0092      	lsls	r2, r2, #2
1000b05a:	4293      	cmp	r3, r2
1000b05c:	dd02      	ble.n	1000b064 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b05e:	3a80      	subs	r2, #128	; 0x80
1000b060:	4b5d      	ldr	r3, [pc, #372]	; (1000b1d8 <platform_event_wait+0x23c>)
1000b062:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000b064:	4b5c      	ldr	r3, [pc, #368]	; (1000b1d8 <platform_event_wait+0x23c>)
1000b066:	469a      	mov	sl, r3
1000b068:	881d      	ldrh	r5, [r3, #0]
1000b06a:	4b5c      	ldr	r3, [pc, #368]	; (1000b1dc <platform_event_wait+0x240>)
1000b06c:	18ed      	adds	r5, r5, r3
1000b06e:	0021      	movs	r1, r4
1000b070:	310c      	adds	r1, #12
1000b072:	4642      	mov	r2, r8
1000b074:	0028      	movs	r0, r5
1000b076:	4b5a      	ldr	r3, [pc, #360]	; (1000b1e0 <platform_event_wait+0x244>)
1000b078:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000b07a:	4642      	mov	r2, r8
1000b07c:	0029      	movs	r1, r5
1000b07e:	4658      	mov	r0, fp
1000b080:	4b58      	ldr	r3, [pc, #352]	; (1000b1e4 <platform_event_wait+0x248>)
1000b082:	4798      	blx	r3
				plf_event_buff_index += len;
1000b084:	4653      	mov	r3, sl
1000b086:	881b      	ldrh	r3, [r3, #0]
1000b088:	4443      	add	r3, r8
1000b08a:	4652      	mov	r2, sl
1000b08c:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b08e:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000b090:	2502      	movs	r5, #2
1000b092:	e03a      	b.n	1000b10a <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b094:	4b54      	ldr	r3, [pc, #336]	; (1000b1e8 <platform_event_wait+0x24c>)
1000b096:	681b      	ldr	r3, [r3, #0]
1000b098:	2b00      	cmp	r3, #0
1000b09a:	d032      	beq.n	1000b102 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000b09c:	4b4d      	ldr	r3, [pc, #308]	; (1000b1d4 <platform_event_wait+0x238>)
1000b09e:	681a      	ldr	r2, [r3, #0]
1000b0a0:	8893      	ldrh	r3, [r2, #4]
1000b0a2:	21cd      	movs	r1, #205	; 0xcd
1000b0a4:	0089      	lsls	r1, r1, #2
1000b0a6:	428b      	cmp	r3, r1
1000b0a8:	d104      	bne.n	1000b0b4 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000b0aa:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000b0ac:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000b0ae:	2b00      	cmp	r3, #0
1000b0b0:	d02b      	beq.n	1000b10a <platform_event_wait+0x16e>
1000b0b2:	e028      	b.n	1000b106 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000b0b4:	4c4d      	ldr	r4, [pc, #308]	; (1000b1ec <platform_event_wait+0x250>)
1000b0b6:	4d49      	ldr	r5, [pc, #292]	; (1000b1dc <platform_event_wait+0x240>)
1000b0b8:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000b0ba:	702b      	strb	r3, [r5, #0]
1000b0bc:	0a1b      	lsrs	r3, r3, #8
1000b0be:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000b0c0:	8910      	ldrh	r0, [r2, #8]
1000b0c2:	4b4b      	ldr	r3, [pc, #300]	; (1000b1f0 <platform_event_wait+0x254>)
1000b0c4:	681b      	ldr	r3, [r3, #0]
1000b0c6:	4798      	blx	r3
1000b0c8:	7128      	strb	r0, [r5, #4]
1000b0ca:	0a00      	lsrs	r0, r0, #8
1000b0cc:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000b0ce:	6820      	ldr	r0, [r4, #0]
1000b0d0:	4b40      	ldr	r3, [pc, #256]	; (1000b1d4 <platform_event_wait+0x238>)
1000b0d2:	681a      	ldr	r2, [r3, #0]
1000b0d4:	88d2      	ldrh	r2, [r2, #6]
1000b0d6:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000b0d8:	681d      	ldr	r5, [r3, #0]
1000b0da:	896b      	ldrh	r3, [r5, #10]
1000b0dc:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000b0de:	3008      	adds	r0, #8
1000b0e0:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000b0e2:	896a      	ldrh	r2, [r5, #10]
1000b0e4:	2a00      	cmp	r2, #0
1000b0e6:	d003      	beq.n	1000b0f0 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000b0e8:	0029      	movs	r1, r5
1000b0ea:	310c      	adds	r1, #12
1000b0ec:	4b3c      	ldr	r3, [pc, #240]	; (1000b1e0 <platform_event_wait+0x244>)
1000b0ee:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000b0f0:	8969      	ldrh	r1, [r5, #10]
1000b0f2:	3108      	adds	r1, #8
1000b0f4:	4b3c      	ldr	r3, [pc, #240]	; (1000b1e8 <platform_event_wait+0x24c>)
1000b0f6:	681b      	ldr	r3, [r3, #0]
1000b0f8:	4838      	ldr	r0, [pc, #224]	; (1000b1dc <platform_event_wait+0x240>)
1000b0fa:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b0fc:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000b0fe:	2503      	movs	r5, #3
1000b100:	e003      	b.n	1000b10a <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b102:	2400      	movs	r4, #0
1000b104:	e001      	b.n	1000b10a <platform_event_wait+0x16e>
1000b106:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000b108:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000b10a:	4b32      	ldr	r3, [pc, #200]	; (1000b1d4 <platform_event_wait+0x238>)
1000b10c:	6818      	ldr	r0, [r3, #0]
1000b10e:	4b39      	ldr	r3, [pc, #228]	; (1000b1f4 <platform_event_wait+0x258>)
1000b110:	681b      	ldr	r3, [r3, #0]
1000b112:	4798      	blx	r3
1000b114:	e000      	b.n	1000b118 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000b116:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000b118:	2c00      	cmp	r4, #0
1000b11a:	d000      	beq.n	1000b11e <platform_event_wait+0x182>
1000b11c:	e76b      	b.n	1000aff6 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000b11e:	464b      	mov	r3, r9
1000b120:	2b00      	cmp	r3, #0
1000b122:	d046      	beq.n	1000b1b2 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000b124:	4b29      	ldr	r3, [pc, #164]	; (1000b1cc <platform_event_wait+0x230>)
1000b126:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000b128:	2e00      	cmp	r6, #0
1000b12a:	d104      	bne.n	1000b136 <platform_event_wait+0x19a>
1000b12c:	2300      	movs	r3, #0
1000b12e:	6a1c      	ldr	r4, [r3, #32]
1000b130:	2c00      	cmp	r4, #0
1000b132:	d131      	bne.n	1000b198 <platform_event_wait+0x1fc>
1000b134:	e03d      	b.n	1000b1b2 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000b136:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000b138:	2314      	movs	r3, #20
1000b13a:	469c      	mov	ip, r3
1000b13c:	44b4      	add	ip, r6
1000b13e:	4663      	mov	r3, ip
1000b140:	4660      	mov	r0, ip
1000b142:	9300      	str	r3, [sp, #0]
1000b144:	4b2c      	ldr	r3, [pc, #176]	; (1000b1f8 <platform_event_wait+0x25c>)
1000b146:	681b      	ldr	r3, [r3, #0]
1000b148:	4798      	blx	r3
	while(NULL != current)
1000b14a:	2c00      	cmp	r4, #0
1000b14c:	d01f      	beq.n	1000b18e <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000b14e:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b150:	23cd      	movs	r3, #205	; 0xcd
1000b152:	009b      	lsls	r3, r3, #2
1000b154:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000b156:	4b27      	ldr	r3, [pc, #156]	; (1000b1f4 <platform_event_wait+0x258>)
1000b158:	469a      	mov	sl, r3
1000b15a:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b15c:	6803      	ldr	r3, [r0, #0]
1000b15e:	889b      	ldrh	r3, [r3, #4]
1000b160:	4543      	cmp	r3, r8
1000b162:	d110      	bne.n	1000b186 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000b164:	2f00      	cmp	r7, #0
1000b166:	d006      	beq.n	1000b176 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000b168:	6883      	ldr	r3, [r0, #8]
1000b16a:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000b16c:	4653      	mov	r3, sl
1000b16e:	681b      	ldr	r3, [r3, #0]
1000b170:	4798      	blx	r3
				current = prev->pstrNext;
1000b172:	68b8      	ldr	r0, [r7, #8]
1000b174:	e009      	b.n	1000b18a <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000b176:	6883      	ldr	r3, [r0, #8]
1000b178:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000b17a:	4b1e      	ldr	r3, [pc, #120]	; (1000b1f4 <platform_event_wait+0x258>)
1000b17c:	681b      	ldr	r3, [r3, #0]
1000b17e:	9301      	str	r3, [sp, #4]
1000b180:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000b182:	6a30      	ldr	r0, [r6, #32]
1000b184:	e001      	b.n	1000b18a <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000b186:	0007      	movs	r7, r0
1000b188:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000b18a:	2800      	cmp	r0, #0
1000b18c:	d1e6      	bne.n	1000b15c <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000b18e:	4b1b      	ldr	r3, [pc, #108]	; (1000b1fc <platform_event_wait+0x260>)
1000b190:	681b      	ldr	r3, [r3, #0]
1000b192:	9800      	ldr	r0, [sp, #0]
1000b194:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000b196:	e00c      	b.n	1000b1b2 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000b198:	2314      	movs	r3, #20
1000b19a:	9300      	str	r3, [sp, #0]
1000b19c:	4b16      	ldr	r3, [pc, #88]	; (1000b1f8 <platform_event_wait+0x25c>)
1000b19e:	681b      	ldr	r3, [r3, #0]
1000b1a0:	2014      	movs	r0, #20
1000b1a2:	4798      	blx	r3
1000b1a4:	e7d3      	b.n	1000b14e <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b1a6:	4b10      	ldr	r3, [pc, #64]	; (1000b1e8 <platform_event_wait+0x24c>)
1000b1a8:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b1aa:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b1ac:	2b00      	cmp	r3, #0
1000b1ae:	d0ac      	beq.n	1000b10a <platform_event_wait+0x16e>
1000b1b0:	e77b      	b.n	1000b0aa <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000b1b2:	0028      	movs	r0, r5
1000b1b4:	b007      	add	sp, #28
1000b1b6:	bc3c      	pop	{r2, r3, r4, r5}
1000b1b8:	4690      	mov	r8, r2
1000b1ba:	4699      	mov	r9, r3
1000b1bc:	46a2      	mov	sl, r4
1000b1be:	46ab      	mov	fp, r5
1000b1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b1c2:	46c0      	nop			; (mov r8, r8)
1000b1c4:	1000f1bd 	.word	0x1000f1bd
1000b1c8:	1000af4d 	.word	0x1000af4d
1000b1cc:	100129d0 	.word	0x100129d0
1000b1d0:	100129b8 	.word	0x100129b8
1000b1d4:	10012998 	.word	0x10012998
1000b1d8:	10013708 	.word	0x10013708
1000b1dc:	10013470 	.word	0x10013470
1000b1e0:	1000f1ab 	.word	0x1000f1ab
1000b1e4:	1000ab6d 	.word	0x1000ab6d
1000b1e8:	100129c4 	.word	0x100129c4
1000b1ec:	100129c0 	.word	0x100129c0
1000b1f0:	10012990 	.word	0x10012990
1000b1f4:	1001298c 	.word	0x1001298c
1000b1f8:	100129b0 	.word	0x100129b0
1000b1fc:	1001299c 	.word	0x1001299c

1000b200 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000b200:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000b202:	4b03      	ldr	r3, [pc, #12]	; (1000b210 <acquire_sleep_lock+0x10>)
1000b204:	681b      	ldr	r3, [r3, #0]
1000b206:	2080      	movs	r0, #128	; 0x80
1000b208:	0200      	lsls	r0, r0, #8
1000b20a:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000b20c:	2008      	movs	r0, #8
1000b20e:	bd10      	pop	{r4, pc}
1000b210:	10013428 	.word	0x10013428

1000b214 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000b214:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000b216:	4b03      	ldr	r3, [pc, #12]	; (1000b224 <release_message_lock+0x10>)
1000b218:	681b      	ldr	r3, [r3, #0]
1000b21a:	2080      	movs	r0, #128	; 0x80
1000b21c:	01c0      	lsls	r0, r0, #7
1000b21e:	4798      	blx	r3
	return status;
}
1000b220:	2000      	movs	r0, #0
1000b222:	bd10      	pop	{r4, pc}
1000b224:	10013434 	.word	0x10013434

1000b228 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000b228:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000b22a:	4a18      	ldr	r2, [pc, #96]	; (1000b28c <gpio1_combined_isr_handler+0x64>)
1000b22c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b22e:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b230:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b232:	2180      	movs	r1, #128	; 0x80
1000b234:	0209      	lsls	r1, r1, #8
1000b236:	4301      	orrs	r1, r0
1000b238:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b23a:	0010      	movs	r0, r2
1000b23c:	4d14      	ldr	r5, [pc, #80]	; (1000b290 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b23e:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b240:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b242:	05db      	lsls	r3, r3, #23
1000b244:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b246:	d011      	beq.n	1000b26c <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000b248:	b2db      	uxtb	r3, r3
1000b24a:	4259      	negs	r1, r3
1000b24c:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000b24e:	2b01      	cmp	r3, #1
1000b250:	d006      	beq.n	1000b260 <gpio1_combined_isr_handler+0x38>
1000b252:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000b254:	085b      	lsrs	r3, r3, #1
				index++;
1000b256:	3101      	adds	r1, #1
1000b258:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000b25a:	2b01      	cmp	r3, #1
1000b25c:	d1fa      	bne.n	1000b254 <gpio1_combined_isr_handler+0x2c>
1000b25e:	e000      	b.n	1000b262 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b260:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b262:	0023      	movs	r3, r4
1000b264:	408b      	lsls	r3, r1
1000b266:	b29b      	uxth	r3, r3
1000b268:	8703      	strh	r3, [r0, #56]	; 0x38
1000b26a:	e003      	b.n	1000b274 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b26c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b26e:	432b      	orrs	r3, r5
1000b270:	b29b      	uxth	r3, r3
1000b272:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000b274:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b276:	05db      	lsls	r3, r3, #23
1000b278:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b27a:	d1e2      	bne.n	1000b242 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b27c:	2180      	movs	r1, #128	; 0x80
1000b27e:	0049      	lsls	r1, r1, #1
1000b280:	3381      	adds	r3, #129	; 0x81
1000b282:	33ff      	adds	r3, #255	; 0xff
1000b284:	4a03      	ldr	r2, [pc, #12]	; (1000b294 <gpio1_combined_isr_handler+0x6c>)
1000b286:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000b288:	bd30      	pop	{r4, r5, pc}
1000b28a:	46c0      	nop			; (mov r8, r8)
1000b28c:	40011000 	.word	0x40011000
1000b290:	ffff8000 	.word	0xffff8000
1000b294:	e000e100 	.word	0xe000e100

1000b298 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000b298:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000b29a:	4a17      	ldr	r2, [pc, #92]	; (1000b2f8 <gpio0_combined_isr_handler+0x60>)
1000b29c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b29e:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b2a0:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b2a2:	2180      	movs	r1, #128	; 0x80
1000b2a4:	0209      	lsls	r1, r1, #8
1000b2a6:	4301      	orrs	r1, r0
1000b2a8:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b2aa:	0010      	movs	r0, r2
1000b2ac:	4d13      	ldr	r5, [pc, #76]	; (1000b2fc <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b2ae:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b2b0:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b2b2:	05db      	lsls	r3, r3, #23
1000b2b4:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b2b6:	d011      	beq.n	1000b2dc <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000b2b8:	b2db      	uxtb	r3, r3
1000b2ba:	4259      	negs	r1, r3
1000b2bc:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000b2be:	2b01      	cmp	r3, #1
1000b2c0:	d006      	beq.n	1000b2d0 <gpio0_combined_isr_handler+0x38>
1000b2c2:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000b2c4:	085b      	lsrs	r3, r3, #1
				index++;
1000b2c6:	3101      	adds	r1, #1
1000b2c8:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000b2ca:	2b01      	cmp	r3, #1
1000b2cc:	d1fa      	bne.n	1000b2c4 <gpio0_combined_isr_handler+0x2c>
1000b2ce:	e000      	b.n	1000b2d2 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b2d0:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b2d2:	0023      	movs	r3, r4
1000b2d4:	408b      	lsls	r3, r1
1000b2d6:	b29b      	uxth	r3, r3
1000b2d8:	8703      	strh	r3, [r0, #56]	; 0x38
1000b2da:	e003      	b.n	1000b2e4 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b2dc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b2de:	432b      	orrs	r3, r5
1000b2e0:	b29b      	uxth	r3, r3
1000b2e2:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000b2e4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b2e6:	05db      	lsls	r3, r3, #23
1000b2e8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b2ea:	d1e2      	bne.n	1000b2b2 <gpio0_combined_isr_handler+0x1a>
1000b2ec:	2180      	movs	r1, #128	; 0x80
1000b2ee:	3381      	adds	r3, #129	; 0x81
1000b2f0:	33ff      	adds	r3, #255	; 0xff
1000b2f2:	4a03      	ldr	r2, [pc, #12]	; (1000b300 <gpio0_combined_isr_handler+0x68>)
1000b2f4:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000b2f6:	bd30      	pop	{r4, r5, pc}
1000b2f8:	40010000 	.word	0x40010000
1000b2fc:	ffff8000 	.word	0xffff8000
1000b300:	e000e100 	.word	0xe000e100

1000b304 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000b304:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000b306:	4b0c      	ldr	r3, [pc, #48]	; (1000b338 <PORT1_COMB_Handler+0x34>)
1000b308:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000b30a:	0b5b      	lsrs	r3, r3, #13
1000b30c:	d010      	beq.n	1000b330 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000b30e:	4b0b      	ldr	r3, [pc, #44]	; (1000b33c <PORT1_COMB_Handler+0x38>)
1000b310:	681b      	ldr	r3, [r3, #0]
1000b312:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000b314:	4a08      	ldr	r2, [pc, #32]	; (1000b338 <PORT1_COMB_Handler+0x34>)
1000b316:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b318:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000b31a:	0b5b      	lsrs	r3, r3, #13
1000b31c:	035b      	lsls	r3, r3, #13
1000b31e:	430b      	orrs	r3, r1
1000b320:	8713      	strh	r3, [r2, #56]	; 0x38
1000b322:	2180      	movs	r1, #128	; 0x80
1000b324:	0049      	lsls	r1, r1, #1
1000b326:	23c0      	movs	r3, #192	; 0xc0
1000b328:	005b      	lsls	r3, r3, #1
1000b32a:	4a05      	ldr	r2, [pc, #20]	; (1000b340 <PORT1_COMB_Handler+0x3c>)
1000b32c:	50d1      	str	r1, [r2, r3]
1000b32e:	e001      	b.n	1000b334 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000b330:	4b04      	ldr	r3, [pc, #16]	; (1000b344 <PORT1_COMB_Handler+0x40>)
1000b332:	4798      	blx	r3
	}
}
1000b334:	bd10      	pop	{r4, pc}
1000b336:	46c0      	nop			; (mov r8, r8)
1000b338:	40011000 	.word	0x40011000
1000b33c:	100136f4 	.word	0x100136f4
1000b340:	e000e100 	.word	0xe000e100
1000b344:	1000b229 	.word	0x1000b229

1000b348 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000b348:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000b34a:	2802      	cmp	r0, #2
1000b34c:	d804      	bhi.n	1000b358 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000b34e:	0080      	lsls	r0, r0, #2
1000b350:	2200      	movs	r2, #0
1000b352:	4b02      	ldr	r3, [pc, #8]	; (1000b35c <wakeup_int_unregister_callback+0x14>)
1000b354:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000b356:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000b358:	0018      	movs	r0, r3
1000b35a:	4770      	bx	lr
1000b35c:	1001370c 	.word	0x1001370c

1000b360 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000b360:	b510      	push	{r4, lr}
1000b362:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000b364:	7803      	ldrb	r3, [r0, #0]
1000b366:	2b01      	cmp	r3, #1
1000b368:	d108      	bne.n	1000b37c <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000b36a:	4b11      	ldr	r3, [pc, #68]	; (1000b3b0 <wakeup_active_event_callback+0x50>)
1000b36c:	681b      	ldr	r3, [r3, #0]
1000b36e:	2b00      	cmp	r3, #0
1000b370:	d000      	beq.n	1000b374 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000b372:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000b374:	23ff      	movs	r3, #255	; 0xff
1000b376:	6822      	ldr	r2, [r4, #0]
1000b378:	439a      	bics	r2, r3
1000b37a:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000b37c:	7863      	ldrb	r3, [r4, #1]
1000b37e:	2b01      	cmp	r3, #1
1000b380:	d108      	bne.n	1000b394 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000b382:	4b0b      	ldr	r3, [pc, #44]	; (1000b3b0 <wakeup_active_event_callback+0x50>)
1000b384:	685b      	ldr	r3, [r3, #4]
1000b386:	2b00      	cmp	r3, #0
1000b388:	d000      	beq.n	1000b38c <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000b38a:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000b38c:	4b09      	ldr	r3, [pc, #36]	; (1000b3b4 <wakeup_active_event_callback+0x54>)
1000b38e:	6822      	ldr	r2, [r4, #0]
1000b390:	4013      	ands	r3, r2
1000b392:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000b394:	78a3      	ldrb	r3, [r4, #2]
1000b396:	2b01      	cmp	r3, #1
1000b398:	d108      	bne.n	1000b3ac <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000b39a:	4b05      	ldr	r3, [pc, #20]	; (1000b3b0 <wakeup_active_event_callback+0x50>)
1000b39c:	689b      	ldr	r3, [r3, #8]
1000b39e:	2b00      	cmp	r3, #0
1000b3a0:	d000      	beq.n	1000b3a4 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000b3a2:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000b3a4:	4b04      	ldr	r3, [pc, #16]	; (1000b3b8 <wakeup_active_event_callback+0x58>)
1000b3a6:	6822      	ldr	r2, [r4, #0]
1000b3a8:	4013      	ands	r3, r2
1000b3aa:	6023      	str	r3, [r4, #0]
	}
}
1000b3ac:	bd10      	pop	{r4, pc}
1000b3ae:	46c0      	nop			; (mov r8, r8)
1000b3b0:	1001370c 	.word	0x1001370c
1000b3b4:	ffff00ff 	.word	0xffff00ff
1000b3b8:	ff00ffff 	.word	0xff00ffff

1000b3bc <ble_paired_app_event>:
/* Callback registered for AT_BLE_PAIR_DONE event from stack */
static at_ble_status_t ble_paired_app_event(void *param)
{
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;
}
1000b3bc:	2000      	movs	r0, #0
1000b3be:	4770      	bx	lr

1000b3c0 <ble_notification_confirmed_app_event>:

/* Callback registered for AT_BLE_NOTIFICATION_CONFIRMED event from stack */
static at_ble_status_t ble_notification_confirmed_app_event(void *param)
{
	at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)param;
	if(!notification_status->status)
1000b3c0:	78c0      	ldrb	r0, [r0, #3]
1000b3c2:	2800      	cmp	r0, #0
1000b3c4:	d000      	beq.n	1000b3c8 <ble_notification_confirmed_app_event+0x8>
	{
		DBG_LOG_DEV("Notification sent successfully");
		return AT_BLE_SUCCESS;
	}
	return AT_BLE_FAILURE;
1000b3c6:	20e2      	movs	r0, #226	; 0xe2
}
1000b3c8:	4770      	bx	lr
1000b3ca:	46c0      	nop			; (mov r8, r8)

1000b3cc <ble_char_changed_app_event>:
/* Callback registered for AT_BLE_CHARACTERISTIC_CHANGED event from stack */
static at_ble_status_t ble_char_changed_app_event(void *param)
{
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;
}
1000b3cc:	2000      	movs	r0, #0
1000b3ce:	4770      	bx	lr

1000b3d0 <timer_callback_fn>:

/* timer callback function */
static void timer_callback_fn(void)
{
	/* Add timer callback functionality here */
}
1000b3d0:	4770      	bx	lr
1000b3d2:	46c0      	nop			; (mov r8, r8)

1000b3d4 <button_cb>:

static void button_cb(void)
{
	/* Add button callback functionality here */
}
1000b3d4:	4770      	bx	lr
1000b3d6:	46c0      	nop			; (mov r8, r8)

1000b3d8 <start_advertisement>:
#include "ble_utils.h"
#include "button.h"
#include "startup_template_app.h"

static at_ble_status_t start_advertisement(void)
{
1000b3d8:	b510      	push	{r4, lr}
1000b3da:	b084      	sub	sp, #16
	/* Start of advertisement */
	if(at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, \
1000b3dc:	2300      	movs	r3, #0
1000b3de:	9302      	str	r3, [sp, #8]
1000b3e0:	4b0e      	ldr	r3, [pc, #56]	; (1000b41c <start_advertisement+0x44>)
1000b3e2:	9301      	str	r3, [sp, #4]
1000b3e4:	23c8      	movs	r3, #200	; 0xc8
1000b3e6:	00db      	lsls	r3, r3, #3
1000b3e8:	9300      	str	r3, [sp, #0]
1000b3ea:	2300      	movs	r3, #0
1000b3ec:	2200      	movs	r2, #0
1000b3ee:	2101      	movs	r1, #1
1000b3f0:	2000      	movs	r0, #0
1000b3f2:	4c0b      	ldr	r4, [pc, #44]	; (1000b420 <start_advertisement+0x48>)
1000b3f4:	47a0      	blx	r4
1000b3f6:	1e04      	subs	r4, r0, #0
1000b3f8:	d106      	bne.n	1000b408 <start_advertisement+0x30>
		NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0) == \
		AT_BLE_SUCCESS)
	{
		DBG_LOG("BLE Started Advertisement");
1000b3fa:	480a      	ldr	r0, [pc, #40]	; (1000b424 <start_advertisement+0x4c>)
1000b3fc:	4b0a      	ldr	r3, [pc, #40]	; (1000b428 <start_advertisement+0x50>)
1000b3fe:	4798      	blx	r3
1000b400:	480a      	ldr	r0, [pc, #40]	; (1000b42c <start_advertisement+0x54>)
1000b402:	4b0b      	ldr	r3, [pc, #44]	; (1000b430 <start_advertisement+0x58>)
1000b404:	4798      	blx	r3
		return AT_BLE_SUCCESS;
1000b406:	e006      	b.n	1000b416 <start_advertisement+0x3e>
	}
	else
	{
		DBG_LOG("BLE Advertisement start Failed");
1000b408:	4806      	ldr	r0, [pc, #24]	; (1000b424 <start_advertisement+0x4c>)
1000b40a:	4b07      	ldr	r3, [pc, #28]	; (1000b428 <start_advertisement+0x50>)
1000b40c:	4798      	blx	r3
1000b40e:	4809      	ldr	r0, [pc, #36]	; (1000b434 <start_advertisement+0x5c>)
1000b410:	4b07      	ldr	r3, [pc, #28]	; (1000b430 <start_advertisement+0x58>)
1000b412:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000b414:	24e2      	movs	r4, #226	; 0xe2
}
1000b416:	0020      	movs	r0, r4
1000b418:	b004      	add	sp, #16
1000b41a:	bd10      	pop	{r4, pc}
1000b41c:	0000028f 	.word	0x0000028f
1000b420:	1000c0f9 	.word	0x1000c0f9
1000b424:	10010728 	.word	0x10010728
1000b428:	1000f2ed 	.word	0x1000f2ed
1000b42c:	10010e00 	.word	0x10010e00
1000b430:	1000f1cd 	.word	0x1000f1cd
1000b434:	10010e1c 	.word	0x10010e1c

1000b438 <ble_disconnected_app_event>:
	return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_DISCONNECTED event from stack */
static at_ble_status_t ble_disconnected_app_event(void *param)
{
1000b438:	b510      	push	{r4, lr}
	start_advertisement();
1000b43a:	4b02      	ldr	r3, [pc, #8]	; (1000b444 <ble_disconnected_app_event+0xc>)
1000b43c:	4798      	blx	r3
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;	
}
1000b43e:	2000      	movs	r0, #0
1000b440:	bd10      	pop	{r4, pc}
1000b442:	46c0      	nop			; (mov r8, r8)
1000b444:	1000b3d9 	.word	0x1000b3d9

1000b448 <main>:
{
	/* Add button callback functionality here */
}

int main(void)
{
1000b448:	b570      	push	{r4, r5, r6, lr}
	platform_driver_init();
1000b44a:	4b17      	ldr	r3, [pc, #92]	; (1000b4a8 <main+0x60>)
1000b44c:	4798      	blx	r3
	acquire_sleep_lock();
1000b44e:	4b17      	ldr	r3, [pc, #92]	; (1000b4ac <main+0x64>)
1000b450:	4798      	blx	r3

	/* Initialize serial console */
	serial_console_init();
1000b452:	4b17      	ldr	r3, [pc, #92]	; (1000b4b0 <main+0x68>)
1000b454:	4798      	blx	r3
	
	/* Hardware timer */
	hw_timer_init();
1000b456:	4b17      	ldr	r3, [pc, #92]	; (1000b4b4 <main+0x6c>)
1000b458:	4798      	blx	r3
	
	/* button initialization */
	gpio_init();
1000b45a:	4b17      	ldr	r3, [pc, #92]	; (1000b4b8 <main+0x70>)
1000b45c:	4798      	blx	r3
	button_init();
1000b45e:	4b17      	ldr	r3, [pc, #92]	; (1000b4bc <main+0x74>)
1000b460:	4798      	blx	r3
	button_register_callback(button_cb);
1000b462:	4817      	ldr	r0, [pc, #92]	; (1000b4c0 <main+0x78>)
1000b464:	4b17      	ldr	r3, [pc, #92]	; (1000b4c4 <main+0x7c>)
1000b466:	4798      	blx	r3
	
	hw_timer_register_callback(timer_callback_fn);
1000b468:	4817      	ldr	r0, [pc, #92]	; (1000b4c8 <main+0x80>)
1000b46a:	4b18      	ldr	r3, [pc, #96]	; (1000b4cc <main+0x84>)
1000b46c:	4798      	blx	r3

	DBG_LOG("Initializing BLE Application");
1000b46e:	4818      	ldr	r0, [pc, #96]	; (1000b4d0 <main+0x88>)
1000b470:	4b18      	ldr	r3, [pc, #96]	; (1000b4d4 <main+0x8c>)
1000b472:	4798      	blx	r3
1000b474:	4818      	ldr	r0, [pc, #96]	; (1000b4d8 <main+0x90>)
1000b476:	4b19      	ldr	r3, [pc, #100]	; (1000b4dc <main+0x94>)
1000b478:	4798      	blx	r3
	
	/* initialize the BLE chip  and Set the Device Address */
	ble_device_init(NULL);
1000b47a:	2000      	movs	r0, #0
1000b47c:	4b18      	ldr	r3, [pc, #96]	; (1000b4e0 <main+0x98>)
1000b47e:	4798      	blx	r3

	/* Register Primary/Included service in case of GATT Server */
	
	/* set the advertisement data */
	ble_advertisement_data_set();
1000b480:	4b18      	ldr	r3, [pc, #96]	; (1000b4e4 <main+0x9c>)
1000b482:	4798      	blx	r3
		
	/* Start the advertisement */
	start_advertisement();
1000b484:	4b18      	ldr	r3, [pc, #96]	; (1000b4e8 <main+0xa0>)
1000b486:	4798      	blx	r3
	
	/* Register callbacks for gap related events */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000b488:	4a18      	ldr	r2, [pc, #96]	; (1000b4ec <main+0xa4>)
1000b48a:	2100      	movs	r1, #0
1000b48c:	2000      	movs	r0, #0
1000b48e:	4c18      	ldr	r4, [pc, #96]	; (1000b4f0 <main+0xa8>)
1000b490:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE,
									startup_template_app_gap_cb);
	
	/* Register callbacks for gatt server related events */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000b492:	4a18      	ldr	r2, [pc, #96]	; (1000b4f4 <main+0xac>)
1000b494:	2102      	movs	r1, #2
1000b496:	2000      	movs	r0, #0
1000b498:	47a0      	blx	r4
									startup_template_app_gatt_server_cb);
	
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000b49a:	2501      	movs	r5, #1
1000b49c:	426d      	negs	r5, r5
1000b49e:	4c16      	ldr	r4, [pc, #88]	; (1000b4f8 <main+0xb0>)
1000b4a0:	0028      	movs	r0, r5
1000b4a2:	47a0      	blx	r4
1000b4a4:	e7fc      	b.n	1000b4a0 <main+0x58>
1000b4a6:	46c0      	nop			; (mov r8, r8)
1000b4a8:	1000aced 	.word	0x1000aced
1000b4ac:	1000b201 	.word	0x1000b201
1000b4b0:	1000a9e1 	.word	0x1000a9e1
1000b4b4:	1000a875 	.word	0x1000a875
1000b4b8:	10008881 	.word	0x10008881
1000b4bc:	1000a8fd 	.word	0x1000a8fd
1000b4c0:	1000b3d5 	.word	0x1000b3d5
1000b4c4:	1000a925 	.word	0x1000a925
1000b4c8:	1000b3d1 	.word	0x1000b3d1
1000b4cc:	1000a8a1 	.word	0x1000a8a1
1000b4d0:	10010728 	.word	0x10010728
1000b4d4:	1000f2ed 	.word	0x1000f2ed
1000b4d8:	10010e3c 	.word	0x10010e3c
1000b4dc:	1000f1cd 	.word	0x1000f1cd
1000b4e0:	1000a085 	.word	0x1000a085
1000b4e4:	1000a7f9 	.word	0x1000a7f9
1000b4e8:	1000b3d9 	.word	0x1000b3d9
1000b4ec:	10010d8c 	.word	0x10010d8c
1000b4f0:	10009fb5 	.word	0x10009fb5
1000b4f4:	10010dd8 	.word	0x10010dd8
1000b4f8:	1000a7c9 	.word	0x1000a7c9

1000b4fc <internal_event_post>:
1000b4fc:	b570      	push	{r4, r5, r6, lr}
1000b4fe:	4d12      	ldr	r5, [pc, #72]	; (1000b548 <internal_event_post+0x4c>)
1000b500:	682c      	ldr	r4, [r5, #0]
1000b502:	2c00      	cmp	r4, #0
1000b504:	d014      	beq.n	1000b530 <internal_event_post+0x34>
1000b506:	6826      	ldr	r6, [r4, #0]
1000b508:	60e2      	str	r2, [r4, #12]
1000b50a:	602e      	str	r6, [r5, #0]
1000b50c:	2500      	movs	r5, #0
1000b50e:	4a0f      	ldr	r2, [pc, #60]	; (1000b54c <internal_event_post+0x50>)
1000b510:	8123      	strh	r3, [r4, #8]
1000b512:	6813      	ldr	r3, [r2, #0]
1000b514:	6025      	str	r5, [r4, #0]
1000b516:	80a0      	strh	r0, [r4, #4]
1000b518:	80e1      	strh	r1, [r4, #6]
1000b51a:	42ab      	cmp	r3, r5
1000b51c:	d101      	bne.n	1000b522 <internal_event_post+0x26>
1000b51e:	6014      	str	r4, [r2, #0]
1000b520:	e011      	b.n	1000b546 <internal_event_post+0x4a>
1000b522:	681a      	ldr	r2, [r3, #0]
1000b524:	2a00      	cmp	r2, #0
1000b526:	d001      	beq.n	1000b52c <internal_event_post+0x30>
1000b528:	1c13      	adds	r3, r2, #0
1000b52a:	e7fa      	b.n	1000b522 <internal_event_post+0x26>
1000b52c:	601c      	str	r4, [r3, #0]
1000b52e:	e00a      	b.n	1000b546 <internal_event_post+0x4a>
1000b530:	b2c4      	uxtb	r4, r0
1000b532:	2c00      	cmp	r4, #0
1000b534:	d107      	bne.n	1000b546 <internal_event_post+0x4a>
1000b536:	4c06      	ldr	r4, [pc, #24]	; (1000b550 <internal_event_post+0x54>)
1000b538:	60e2      	str	r2, [r4, #12]
1000b53a:	2201      	movs	r2, #1
1000b53c:	8123      	strh	r3, [r4, #8]
1000b53e:	4b05      	ldr	r3, [pc, #20]	; (1000b554 <internal_event_post+0x58>)
1000b540:	80a0      	strh	r0, [r4, #4]
1000b542:	80e1      	strh	r1, [r4, #6]
1000b544:	701a      	strb	r2, [r3, #0]
1000b546:	bd70      	pop	{r4, r5, r6, pc}
1000b548:	100129ec 	.word	0x100129ec
1000b54c:	100129e8 	.word	0x100129e8
1000b550:	100129d4 	.word	0x100129d4
1000b554:	100129e4 	.word	0x100129e4

1000b558 <internal_event_init>:
1000b558:	b510      	push	{r4, lr}
1000b55a:	4b08      	ldr	r3, [pc, #32]	; (1000b57c <internal_event_init+0x24>)
1000b55c:	0900      	lsrs	r0, r0, #4
1000b55e:	0100      	lsls	r0, r0, #4
1000b560:	681a      	ldr	r2, [r3, #0]
1000b562:	1808      	adds	r0, r1, r0
1000b564:	4281      	cmp	r1, r0
1000b566:	d003      	beq.n	1000b570 <internal_event_init+0x18>
1000b568:	600a      	str	r2, [r1, #0]
1000b56a:	1c0a      	adds	r2, r1, #0
1000b56c:	3110      	adds	r1, #16
1000b56e:	e7f9      	b.n	1000b564 <internal_event_init+0xc>
1000b570:	601a      	str	r2, [r3, #0]
1000b572:	2200      	movs	r2, #0
1000b574:	4b02      	ldr	r3, [pc, #8]	; (1000b580 <internal_event_init+0x28>)
1000b576:	601a      	str	r2, [r3, #0]
1000b578:	bd10      	pop	{r4, pc}
1000b57a:	46c0      	nop			; (mov r8, r8)
1000b57c:	100129ec 	.word	0x100129ec
1000b580:	100129e8 	.word	0x100129e8

1000b584 <special_events_handler>:
1000b584:	b538      	push	{r3, r4, r5, lr}
1000b586:	4c1b      	ldr	r4, [pc, #108]	; (1000b5f4 <special_events_handler+0x70>)
1000b588:	1c03      	adds	r3, r0, #0
1000b58a:	8825      	ldrh	r5, [r4, #0]
1000b58c:	1c08      	adds	r0, r1, #0
1000b58e:	1c21      	adds	r1, r4, #0
1000b590:	429d      	cmp	r5, r3
1000b592:	d107      	bne.n	1000b5a4 <special_events_handler+0x20>
1000b594:	88a5      	ldrh	r5, [r4, #4]
1000b596:	4285      	cmp	r5, r0
1000b598:	d104      	bne.n	1000b5a4 <special_events_handler+0x20>
1000b59a:	2301      	movs	r3, #1
1000b59c:	425b      	negs	r3, r3
1000b59e:	8023      	strh	r3, [r4, #0]
1000b5a0:	60a2      	str	r2, [r4, #8]
1000b5a2:	e009      	b.n	1000b5b8 <special_events_handler+0x34>
1000b5a4:	884c      	ldrh	r4, [r1, #2]
1000b5a6:	429c      	cmp	r4, r3
1000b5a8:	d10a      	bne.n	1000b5c0 <special_events_handler+0x3c>
1000b5aa:	888c      	ldrh	r4, [r1, #4]
1000b5ac:	4284      	cmp	r4, r0
1000b5ae:	d107      	bne.n	1000b5c0 <special_events_handler+0x3c>
1000b5b0:	2301      	movs	r3, #1
1000b5b2:	425b      	negs	r3, r3
1000b5b4:	804b      	strh	r3, [r1, #2]
1000b5b6:	608a      	str	r2, [r1, #8]
1000b5b8:	4b0f      	ldr	r3, [pc, #60]	; (1000b5f8 <special_events_handler+0x74>)
1000b5ba:	4798      	blx	r3
1000b5bc:	2001      	movs	r0, #1
1000b5be:	e017      	b.n	1000b5f0 <special_events_handler+0x6c>
1000b5c0:	490e      	ldr	r1, [pc, #56]	; (1000b5fc <special_events_handler+0x78>)
1000b5c2:	428b      	cmp	r3, r1
1000b5c4:	d00e      	beq.n	1000b5e4 <special_events_handler+0x60>
1000b5c6:	490e      	ldr	r1, [pc, #56]	; (1000b600 <special_events_handler+0x7c>)
1000b5c8:	428b      	cmp	r3, r1
1000b5ca:	d007      	beq.n	1000b5dc <special_events_handler+0x58>
1000b5cc:	490d      	ldr	r1, [pc, #52]	; (1000b604 <special_events_handler+0x80>)
1000b5ce:	2000      	movs	r0, #0
1000b5d0:	428b      	cmp	r3, r1
1000b5d2:	d10d      	bne.n	1000b5f0 <special_events_handler+0x6c>
1000b5d4:	1c10      	adds	r0, r2, #0
1000b5d6:	4b0c      	ldr	r3, [pc, #48]	; (1000b608 <special_events_handler+0x84>)
1000b5d8:	4798      	blx	r3
1000b5da:	e7ef      	b.n	1000b5bc <special_events_handler+0x38>
1000b5dc:	1c11      	adds	r1, r2, #0
1000b5de:	4b0b      	ldr	r3, [pc, #44]	; (1000b60c <special_events_handler+0x88>)
1000b5e0:	2200      	movs	r2, #0
1000b5e2:	e002      	b.n	1000b5ea <special_events_handler+0x66>
1000b5e4:	1c11      	adds	r1, r2, #0
1000b5e6:	2200      	movs	r2, #0
1000b5e8:	4b09      	ldr	r3, [pc, #36]	; (1000b610 <special_events_handler+0x8c>)
1000b5ea:	4798      	blx	r3
1000b5ec:	4243      	negs	r3, r0
1000b5ee:	4158      	adcs	r0, r3
1000b5f0:	bd38      	pop	{r3, r4, r5, pc}
1000b5f2:	46c0      	nop			; (mov r8, r8)
1000b5f4:	10013718 	.word	0x10013718
1000b5f8:	1000c949 	.word	0x1000c949
1000b5fc:	00000e13 	.word	0x00000e13
1000b600:	00000e15 	.word	0x00000e15
1000b604:	00000e01 	.word	0x00000e01
1000b608:	1000ccb9 	.word	0x1000ccb9
1000b60c:	1000ce79 	.word	0x1000ce79
1000b610:	1000cf51 	.word	0x1000cf51

1000b614 <at_ble_event_get>:
1000b614:	2300      	movs	r3, #0
1000b616:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b618:	b087      	sub	sp, #28
1000b61a:	9204      	str	r2, [sp, #16]
1000b61c:	7003      	strb	r3, [r0, #0]
1000b61e:	9b04      	ldr	r3, [sp, #16]
1000b620:	9003      	str	r0, [sp, #12]
1000b622:	3b01      	subs	r3, #1
1000b624:	1c0d      	adds	r5, r1, #0
1000b626:	9305      	str	r3, [sp, #20]
1000b628:	3303      	adds	r3, #3
1000b62a:	d802      	bhi.n	1000b632 <at_ble_event_get+0x1e>
1000b62c:	9804      	ldr	r0, [sp, #16]
1000b62e:	4bae      	ldr	r3, [pc, #696]	; (1000b8e8 <at_ble_event_get+0x2d4>)
1000b630:	4798      	blx	r3
1000b632:	9b05      	ldr	r3, [sp, #20]
1000b634:	4cad      	ldr	r4, [pc, #692]	; (1000b8ec <at_ble_event_get+0x2d8>)
1000b636:	3303      	adds	r3, #3
1000b638:	d902      	bls.n	1000b640 <at_ble_event_get+0x2c>
1000b63a:	2300      	movs	r3, #0
1000b63c:	9302      	str	r3, [sp, #8]
1000b63e:	e015      	b.n	1000b66c <at_ble_event_get+0x58>
1000b640:	2300      	movs	r3, #0
1000b642:	9302      	str	r3, [sp, #8]
1000b644:	6823      	ldr	r3, [r4, #0]
1000b646:	2b00      	cmp	r3, #0
1000b648:	d113      	bne.n	1000b672 <at_ble_event_get+0x5e>
1000b64a:	9b02      	ldr	r3, [sp, #8]
1000b64c:	2bd0      	cmp	r3, #208	; 0xd0
1000b64e:	d100      	bne.n	1000b652 <at_ble_event_get+0x3e>
1000b650:	e2da      	b.n	1000bc08 <at_ble_event_get+0x5f4>
1000b652:	9804      	ldr	r0, [sp, #16]
1000b654:	4ba6      	ldr	r3, [pc, #664]	; (1000b8f0 <at_ble_event_get+0x2dc>)
1000b656:	4798      	blx	r3
1000b658:	9002      	str	r0, [sp, #8]
1000b65a:	2802      	cmp	r0, #2
1000b65c:	d1f2      	bne.n	1000b644 <at_ble_event_get+0x30>
1000b65e:	e03f      	b.n	1000b6e0 <at_ble_event_get+0xcc>
1000b660:	9804      	ldr	r0, [sp, #16]
1000b662:	4ba3      	ldr	r3, [pc, #652]	; (1000b8f0 <at_ble_event_get+0x2dc>)
1000b664:	4798      	blx	r3
1000b666:	9002      	str	r0, [sp, #8]
1000b668:	2802      	cmp	r0, #2
1000b66a:	d039      	beq.n	1000b6e0 <at_ble_event_get+0xcc>
1000b66c:	6823      	ldr	r3, [r4, #0]
1000b66e:	2b00      	cmp	r3, #0
1000b670:	d0f6      	beq.n	1000b660 <at_ble_event_get+0x4c>
1000b672:	9b02      	ldr	r3, [sp, #8]
1000b674:	2bd0      	cmp	r3, #208	; 0xd0
1000b676:	d100      	bne.n	1000b67a <at_ble_event_get+0x66>
1000b678:	e2c6      	b.n	1000bc08 <at_ble_event_get+0x5f4>
1000b67a:	9b02      	ldr	r3, [sp, #8]
1000b67c:	3b03      	subs	r3, #3
1000b67e:	1e5a      	subs	r2, r3, #1
1000b680:	4193      	sbcs	r3, r2
1000b682:	9a02      	ldr	r2, [sp, #8]
1000b684:	425b      	negs	r3, r3
1000b686:	401a      	ands	r2, r3
1000b688:	6823      	ldr	r3, [r4, #0]
1000b68a:	9202      	str	r2, [sp, #8]
1000b68c:	2b00      	cmp	r3, #0
1000b68e:	d100      	bne.n	1000b692 <at_ble_event_get+0x7e>
1000b690:	e2c2      	b.n	1000bc18 <at_ble_event_get+0x604>
1000b692:	681a      	ldr	r2, [r3, #0]
1000b694:	68de      	ldr	r6, [r3, #12]
1000b696:	6022      	str	r2, [r4, #0]
1000b698:	88da      	ldrh	r2, [r3, #6]
1000b69a:	9201      	str	r2, [sp, #4]
1000b69c:	4a95      	ldr	r2, [pc, #596]	; (1000b8f4 <at_ble_event_get+0x2e0>)
1000b69e:	889c      	ldrh	r4, [r3, #4]
1000b6a0:	6811      	ldr	r1, [r2, #0]
1000b6a2:	6013      	str	r3, [r2, #0]
1000b6a4:	6019      	str	r1, [r3, #0]
1000b6a6:	4b94      	ldr	r3, [pc, #592]	; (1000b8f8 <at_ble_event_get+0x2e4>)
1000b6a8:	781b      	ldrb	r3, [r3, #0]
1000b6aa:	2b01      	cmp	r3, #1
1000b6ac:	d10f      	bne.n	1000b6ce <at_ble_event_get+0xba>
1000b6ae:	4b93      	ldr	r3, [pc, #588]	; (1000b8fc <at_ble_event_get+0x2e8>)
1000b6b0:	4a92      	ldr	r2, [pc, #584]	; (1000b8fc <at_ble_event_get+0x2e8>)
1000b6b2:	8898      	ldrh	r0, [r3, #4]
1000b6b4:	88d9      	ldrh	r1, [r3, #6]
1000b6b6:	68d2      	ldr	r2, [r2, #12]
1000b6b8:	891b      	ldrh	r3, [r3, #8]
1000b6ba:	4f91      	ldr	r7, [pc, #580]	; (1000b900 <at_ble_event_get+0x2ec>)
1000b6bc:	47b8      	blx	r7
1000b6be:	2210      	movs	r2, #16
1000b6c0:	4b90      	ldr	r3, [pc, #576]	; (1000b904 <at_ble_event_get+0x2f0>)
1000b6c2:	488e      	ldr	r0, [pc, #568]	; (1000b8fc <at_ble_event_get+0x2e8>)
1000b6c4:	2100      	movs	r1, #0
1000b6c6:	4798      	blx	r3
1000b6c8:	2300      	movs	r3, #0
1000b6ca:	4a8b      	ldr	r2, [pc, #556]	; (1000b8f8 <at_ble_event_get+0x2e4>)
1000b6cc:	7013      	strb	r3, [r2, #0]
1000b6ce:	9b02      	ldr	r3, [sp, #8]
1000b6d0:	2b00      	cmp	r3, #0
1000b6d2:	d114      	bne.n	1000b6fe <at_ble_event_get+0xea>
1000b6d4:	4b8c      	ldr	r3, [pc, #560]	; (1000b908 <at_ble_event_get+0x2f4>)
1000b6d6:	429c      	cmp	r4, r3
1000b6d8:	d009      	beq.n	1000b6ee <at_ble_event_get+0xda>
1000b6da:	4b8c      	ldr	r3, [pc, #560]	; (1000b90c <at_ble_event_get+0x2f8>)
1000b6dc:	429c      	cmp	r4, r3
1000b6de:	d127      	bne.n	1000b730 <at_ble_event_get+0x11c>
1000b6e0:	233a      	movs	r3, #58	; 0x3a
1000b6e2:	9a03      	ldr	r2, [sp, #12]
1000b6e4:	7013      	strb	r3, [r2, #0]
1000b6e6:	2300      	movs	r3, #0
1000b6e8:	9302      	str	r3, [sp, #8]
1000b6ea:	1c1d      	adds	r5, r3, #0
1000b6ec:	e007      	b.n	1000b6fe <at_ble_event_get+0xea>
1000b6ee:	9b01      	ldr	r3, [sp, #4]
1000b6f0:	42a3      	cmp	r3, r4
1000b6f2:	d000      	beq.n	1000b6f6 <at_ble_event_get+0xe2>
1000b6f4:	e28a      	b.n	1000bc0c <at_ble_event_get+0x5f8>
1000b6f6:	2338      	movs	r3, #56	; 0x38
1000b6f8:	9a03      	ldr	r2, [sp, #12]
1000b6fa:	7013      	strb	r3, [r2, #0]
1000b6fc:	602e      	str	r6, [r5, #0]
1000b6fe:	9b03      	ldr	r3, [sp, #12]
1000b700:	781b      	ldrb	r3, [r3, #0]
1000b702:	2b3b      	cmp	r3, #59	; 0x3b
1000b704:	d101      	bne.n	1000b70a <at_ble_event_get+0xf6>
1000b706:	4b82      	ldr	r3, [pc, #520]	; (1000b910 <at_ble_event_get+0x2fc>)
1000b708:	4798      	blx	r3
1000b70a:	9b03      	ldr	r3, [sp, #12]
1000b70c:	781b      	ldrb	r3, [r3, #0]
1000b70e:	2b3b      	cmp	r3, #59	; 0x3b
1000b710:	d003      	beq.n	1000b71a <at_ble_event_get+0x106>
1000b712:	9b05      	ldr	r3, [sp, #20]
1000b714:	3303      	adds	r3, #3
1000b716:	d904      	bls.n	1000b722 <at_ble_event_get+0x10e>
1000b718:	e283      	b.n	1000bc22 <at_ble_event_get+0x60e>
1000b71a:	9b02      	ldr	r3, [sp, #8]
1000b71c:	2b00      	cmp	r3, #0
1000b71e:	d088      	beq.n	1000b632 <at_ble_event_get+0x1e>
1000b720:	e7f7      	b.n	1000b712 <at_ble_event_get+0xfe>
1000b722:	9b02      	ldr	r3, [sp, #8]
1000b724:	2bd0      	cmp	r3, #208	; 0xd0
1000b726:	d100      	bne.n	1000b72a <at_ble_event_get+0x116>
1000b728:	e27b      	b.n	1000bc22 <at_ble_event_get+0x60e>
1000b72a:	4b7a      	ldr	r3, [pc, #488]	; (1000b914 <at_ble_event_get+0x300>)
1000b72c:	4798      	blx	r3
1000b72e:	e278      	b.n	1000bc22 <at_ble_event_get+0x60e>
1000b730:	9b01      	ldr	r3, [sp, #4]
1000b732:	2bbb      	cmp	r3, #187	; 0xbb
1000b734:	d125      	bne.n	1000b782 <at_ble_event_get+0x16e>
1000b736:	2cbb      	cmp	r4, #187	; 0xbb
1000b738:	d123      	bne.n	1000b782 <at_ble_event_get+0x16e>
1000b73a:	466b      	mov	r3, sp
1000b73c:	891b      	ldrh	r3, [r3, #8]
1000b73e:	80ab      	strh	r3, [r5, #4]
1000b740:	78b3      	ldrb	r3, [r6, #2]
1000b742:	7872      	ldrb	r2, [r6, #1]
1000b744:	78f0      	ldrb	r0, [r6, #3]
1000b746:	021b      	lsls	r3, r3, #8
1000b748:	4313      	orrs	r3, r2
1000b74a:	7971      	ldrb	r1, [r6, #5]
1000b74c:	7932      	ldrb	r2, [r6, #4]
1000b74e:	70a8      	strb	r0, [r5, #2]
1000b750:	4871      	ldr	r0, [pc, #452]	; (1000b918 <at_ble_event_get+0x304>)
1000b752:	802b      	strh	r3, [r5, #0]
1000b754:	4283      	cmp	r3, r0
1000b756:	d806      	bhi.n	1000b766 <at_ble_event_get+0x152>
1000b758:	4a70      	ldr	r2, [pc, #448]	; (1000b91c <at_ble_event_get+0x308>)
1000b75a:	4293      	cmp	r3, r2
1000b75c:	d20b      	bcs.n	1000b776 <at_ble_event_get+0x162>
1000b75e:	4a70      	ldr	r2, [pc, #448]	; (1000b920 <at_ble_event_get+0x30c>)
1000b760:	4293      	cmp	r3, r2
1000b762:	d008      	beq.n	1000b776 <at_ble_event_get+0x162>
1000b764:	e009      	b.n	1000b77a <at_ble_event_get+0x166>
1000b766:	486f      	ldr	r0, [pc, #444]	; (1000b924 <at_ble_event_get+0x310>)
1000b768:	4283      	cmp	r3, r0
1000b76a:	d106      	bne.n	1000b77a <at_ble_event_get+0x166>
1000b76c:	020b      	lsls	r3, r1, #8
1000b76e:	4313      	orrs	r3, r2
1000b770:	80ab      	strh	r3, [r5, #4]
1000b772:	2337      	movs	r3, #55	; 0x37
1000b774:	e002      	b.n	1000b77c <at_ble_event_get+0x168>
1000b776:	2336      	movs	r3, #54	; 0x36
1000b778:	e000      	b.n	1000b77c <at_ble_event_get+0x168>
1000b77a:	2300      	movs	r3, #0
1000b77c:	9a03      	ldr	r2, [sp, #12]
1000b77e:	7013      	strb	r3, [r2, #0]
1000b780:	e7bd      	b.n	1000b6fe <at_ble_event_get+0xea>
1000b782:	4b69      	ldr	r3, [pc, #420]	; (1000b928 <at_ble_event_get+0x314>)
1000b784:	429c      	cmp	r4, r3
1000b786:	d100      	bne.n	1000b78a <at_ble_event_get+0x176>
1000b788:	e144      	b.n	1000ba14 <at_ble_event_get+0x400>
1000b78a:	d865      	bhi.n	1000b858 <at_ble_event_get+0x244>
1000b78c:	4b67      	ldr	r3, [pc, #412]	; (1000b92c <at_ble_event_get+0x318>)
1000b78e:	429c      	cmp	r4, r3
1000b790:	d100      	bne.n	1000b794 <at_ble_event_get+0x180>
1000b792:	e1d5      	b.n	1000bb40 <at_ble_event_get+0x52c>
1000b794:	d82f      	bhi.n	1000b7f6 <at_ble_event_get+0x1e2>
1000b796:	4b66      	ldr	r3, [pc, #408]	; (1000b930 <at_ble_event_get+0x31c>)
1000b798:	429c      	cmp	r4, r3
1000b79a:	d100      	bne.n	1000b79e <at_ble_event_get+0x18a>
1000b79c:	e1e0      	b.n	1000bb60 <at_ble_event_get+0x54c>
1000b79e:	d813      	bhi.n	1000b7c8 <at_ble_event_get+0x1b4>
1000b7a0:	4b64      	ldr	r3, [pc, #400]	; (1000b934 <at_ble_event_get+0x320>)
1000b7a2:	429c      	cmp	r4, r3
1000b7a4:	d100      	bne.n	1000b7a8 <at_ble_event_get+0x194>
1000b7a6:	e1a3      	b.n	1000baf0 <at_ble_event_get+0x4dc>
1000b7a8:	d804      	bhi.n	1000b7b4 <at_ble_event_get+0x1a0>
1000b7aa:	2638      	movs	r6, #56	; 0x38
1000b7ac:	42b4      	cmp	r4, r6
1000b7ae:	d100      	bne.n	1000b7b2 <at_ble_event_get+0x19e>
1000b7b0:	e225      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000b7b2:	e117      	b.n	1000b9e4 <at_ble_event_get+0x3d0>
1000b7b4:	4b60      	ldr	r3, [pc, #384]	; (1000b938 <at_ble_event_get+0x324>)
1000b7b6:	429c      	cmp	r4, r3
1000b7b8:	d100      	bne.n	1000b7bc <at_ble_event_get+0x1a8>
1000b7ba:	e19f      	b.n	1000bafc <at_ble_event_get+0x4e8>
1000b7bc:	33fe      	adds	r3, #254	; 0xfe
1000b7be:	33ff      	adds	r3, #255	; 0xff
1000b7c0:	429c      	cmp	r4, r3
1000b7c2:	d100      	bne.n	1000b7c6 <at_ble_event_get+0x1b2>
1000b7c4:	e1d3      	b.n	1000bb6e <at_ble_event_get+0x55a>
1000b7c6:	e10d      	b.n	1000b9e4 <at_ble_event_get+0x3d0>
1000b7c8:	4b5c      	ldr	r3, [pc, #368]	; (1000b93c <at_ble_event_get+0x328>)
1000b7ca:	429c      	cmp	r4, r3
1000b7cc:	d100      	bne.n	1000b7d0 <at_ble_event_get+0x1bc>
1000b7ce:	e1a9      	b.n	1000bb24 <at_ble_event_get+0x510>
1000b7d0:	d808      	bhi.n	1000b7e4 <at_ble_event_get+0x1d0>
1000b7d2:	4b5b      	ldr	r3, [pc, #364]	; (1000b940 <at_ble_event_get+0x32c>)
1000b7d4:	429c      	cmp	r4, r3
1000b7d6:	d100      	bne.n	1000b7da <at_ble_event_get+0x1c6>
1000b7d8:	e196      	b.n	1000bb08 <at_ble_event_get+0x4f4>
1000b7da:	4b5a      	ldr	r3, [pc, #360]	; (1000b944 <at_ble_event_get+0x330>)
1000b7dc:	429c      	cmp	r4, r3
1000b7de:	d100      	bne.n	1000b7e2 <at_ble_event_get+0x1ce>
1000b7e0:	e199      	b.n	1000bb16 <at_ble_event_get+0x502>
1000b7e2:	e0ff      	b.n	1000b9e4 <at_ble_event_get+0x3d0>
1000b7e4:	4b58      	ldr	r3, [pc, #352]	; (1000b948 <at_ble_event_get+0x334>)
1000b7e6:	429c      	cmp	r4, r3
1000b7e8:	d100      	bne.n	1000b7ec <at_ble_event_get+0x1d8>
1000b7ea:	e1a2      	b.n	1000bb32 <at_ble_event_get+0x51e>
1000b7ec:	4b57      	ldr	r3, [pc, #348]	; (1000b94c <at_ble_event_get+0x338>)
1000b7ee:	429c      	cmp	r4, r3
1000b7f0:	d100      	bne.n	1000b7f4 <at_ble_event_get+0x1e0>
1000b7f2:	e1d4      	b.n	1000bb9e <at_ble_event_get+0x58a>
1000b7f4:	e0f6      	b.n	1000b9e4 <at_ble_event_get+0x3d0>
1000b7f6:	4b56      	ldr	r3, [pc, #344]	; (1000b950 <at_ble_event_get+0x33c>)
1000b7f8:	429c      	cmp	r4, r3
1000b7fa:	d100      	bne.n	1000b7fe <at_ble_event_get+0x1ea>
1000b7fc:	e1c8      	b.n	1000bb90 <at_ble_event_get+0x57c>
1000b7fe:	d812      	bhi.n	1000b826 <at_ble_event_get+0x212>
1000b800:	4b54      	ldr	r3, [pc, #336]	; (1000b954 <at_ble_event_get+0x340>)
1000b802:	429c      	cmp	r4, r3
1000b804:	d100      	bne.n	1000b808 <at_ble_event_get+0x1f4>
1000b806:	e1d1      	b.n	1000bbac <at_ble_event_get+0x598>
1000b808:	d804      	bhi.n	1000b814 <at_ble_event_get+0x200>
1000b80a:	4b53      	ldr	r3, [pc, #332]	; (1000b958 <at_ble_event_get+0x344>)
1000b80c:	429c      	cmp	r4, r3
1000b80e:	d100      	bne.n	1000b812 <at_ble_event_get+0x1fe>
1000b810:	e19b      	b.n	1000bb4a <at_ble_event_get+0x536>
1000b812:	e0e7      	b.n	1000b9e4 <at_ble_event_get+0x3d0>
1000b814:	4b51      	ldr	r3, [pc, #324]	; (1000b95c <at_ble_event_get+0x348>)
1000b816:	429c      	cmp	r4, r3
1000b818:	d100      	bne.n	1000b81c <at_ble_event_get+0x208>
1000b81a:	e1ad      	b.n	1000bb78 <at_ble_event_get+0x564>
1000b81c:	4b50      	ldr	r3, [pc, #320]	; (1000b960 <at_ble_event_get+0x34c>)
1000b81e:	429c      	cmp	r4, r3
1000b820:	d100      	bne.n	1000b824 <at_ble_event_get+0x210>
1000b822:	e1b0      	b.n	1000bb86 <at_ble_event_get+0x572>
1000b824:	e0de      	b.n	1000b9e4 <at_ble_event_get+0x3d0>
1000b826:	4b4f      	ldr	r3, [pc, #316]	; (1000b964 <at_ble_event_get+0x350>)
1000b828:	429c      	cmp	r4, r3
1000b82a:	d100      	bne.n	1000b82e <at_ble_event_get+0x21a>
1000b82c:	e0e0      	b.n	1000b9f0 <at_ble_event_get+0x3dc>
1000b82e:	d809      	bhi.n	1000b844 <at_ble_event_get+0x230>
1000b830:	3b08      	subs	r3, #8
1000b832:	429c      	cmp	r4, r3
1000b834:	d100      	bne.n	1000b838 <at_ble_event_get+0x224>
1000b836:	e0d7      	b.n	1000b9e8 <at_ble_event_get+0x3d4>
1000b838:	4b4b      	ldr	r3, [pc, #300]	; (1000b968 <at_ble_event_get+0x354>)
1000b83a:	2639      	movs	r6, #57	; 0x39
1000b83c:	429c      	cmp	r4, r3
1000b83e:	d100      	bne.n	1000b842 <at_ble_event_get+0x22e>
1000b840:	e1dd      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000b842:	e0cf      	b.n	1000b9e4 <at_ble_event_get+0x3d0>
1000b844:	23d1      	movs	r3, #209	; 0xd1
1000b846:	011b      	lsls	r3, r3, #4
1000b848:	429c      	cmp	r4, r3
1000b84a:	d100      	bne.n	1000b84e <at_ble_event_get+0x23a>
1000b84c:	e0d6      	b.n	1000b9fc <at_ble_event_get+0x3e8>
1000b84e:	4b47      	ldr	r3, [pc, #284]	; (1000b96c <at_ble_event_get+0x358>)
1000b850:	429c      	cmp	r4, r3
1000b852:	d100      	bne.n	1000b856 <at_ble_event_get+0x242>
1000b854:	e0d8      	b.n	1000ba08 <at_ble_event_get+0x3f4>
1000b856:	e0c5      	b.n	1000b9e4 <at_ble_event_get+0x3d0>
1000b858:	4b45      	ldr	r3, [pc, #276]	; (1000b970 <at_ble_event_get+0x35c>)
1000b85a:	429c      	cmp	r4, r3
1000b85c:	d100      	bne.n	1000b860 <at_ble_event_get+0x24c>
1000b85e:	e117      	b.n	1000ba90 <at_ble_event_get+0x47c>
1000b860:	d82e      	bhi.n	1000b8c0 <at_ble_event_get+0x2ac>
1000b862:	4b44      	ldr	r3, [pc, #272]	; (1000b974 <at_ble_event_get+0x360>)
1000b864:	429c      	cmp	r4, r3
1000b866:	d100      	bne.n	1000b86a <at_ble_event_get+0x256>
1000b868:	e13d      	b.n	1000bae6 <at_ble_event_get+0x4d2>
1000b86a:	d812      	bhi.n	1000b892 <at_ble_event_get+0x27e>
1000b86c:	4b42      	ldr	r3, [pc, #264]	; (1000b978 <at_ble_event_get+0x364>)
1000b86e:	429c      	cmp	r4, r3
1000b870:	d100      	bne.n	1000b874 <at_ble_event_get+0x260>
1000b872:	e0e8      	b.n	1000ba46 <at_ble_event_get+0x432>
1000b874:	d804      	bhi.n	1000b880 <at_ble_event_get+0x26c>
1000b876:	3b03      	subs	r3, #3
1000b878:	429c      	cmp	r4, r3
1000b87a:	d100      	bne.n	1000b87e <at_ble_event_get+0x26a>
1000b87c:	e0d0      	b.n	1000ba20 <at_ble_event_get+0x40c>
1000b87e:	e0b1      	b.n	1000b9e4 <at_ble_event_get+0x3d0>
1000b880:	4b3e      	ldr	r3, [pc, #248]	; (1000b97c <at_ble_event_get+0x368>)
1000b882:	429c      	cmp	r4, r3
1000b884:	d100      	bne.n	1000b888 <at_ble_event_get+0x274>
1000b886:	e0d0      	b.n	1000ba2a <at_ble_event_get+0x416>
1000b888:	4b3d      	ldr	r3, [pc, #244]	; (1000b980 <at_ble_event_get+0x36c>)
1000b88a:	429c      	cmp	r4, r3
1000b88c:	d100      	bne.n	1000b890 <at_ble_event_get+0x27c>
1000b88e:	e0f9      	b.n	1000ba84 <at_ble_event_get+0x470>
1000b890:	e0a8      	b.n	1000b9e4 <at_ble_event_get+0x3d0>
1000b892:	4b3c      	ldr	r3, [pc, #240]	; (1000b984 <at_ble_event_get+0x370>)
1000b894:	429c      	cmp	r4, r3
1000b896:	d100      	bne.n	1000b89a <at_ble_event_get+0x286>
1000b898:	e0db      	b.n	1000ba52 <at_ble_event_get+0x43e>
1000b89a:	d808      	bhi.n	1000b8ae <at_ble_event_get+0x29a>
1000b89c:	4b3a      	ldr	r3, [pc, #232]	; (1000b988 <at_ble_event_get+0x374>)
1000b89e:	429c      	cmp	r4, r3
1000b8a0:	d100      	bne.n	1000b8a4 <at_ble_event_get+0x290>
1000b8a2:	e11b      	b.n	1000badc <at_ble_event_get+0x4c8>
1000b8a4:	4b39      	ldr	r3, [pc, #228]	; (1000b98c <at_ble_event_get+0x378>)
1000b8a6:	429c      	cmp	r4, r3
1000b8a8:	d100      	bne.n	1000b8ac <at_ble_event_get+0x298>
1000b8aa:	e0d8      	b.n	1000ba5e <at_ble_event_get+0x44a>
1000b8ac:	e09a      	b.n	1000b9e4 <at_ble_event_get+0x3d0>
1000b8ae:	4b38      	ldr	r3, [pc, #224]	; (1000b990 <at_ble_event_get+0x37c>)
1000b8b0:	429c      	cmp	r4, r3
1000b8b2:	d100      	bne.n	1000b8b6 <at_ble_event_get+0x2a2>
1000b8b4:	e0d8      	b.n	1000ba68 <at_ble_event_get+0x454>
1000b8b6:	4b37      	ldr	r3, [pc, #220]	; (1000b994 <at_ble_event_get+0x380>)
1000b8b8:	429c      	cmp	r4, r3
1000b8ba:	d100      	bne.n	1000b8be <at_ble_event_get+0x2aa>
1000b8bc:	e0db      	b.n	1000ba76 <at_ble_event_get+0x462>
1000b8be:	e091      	b.n	1000b9e4 <at_ble_event_get+0x3d0>
1000b8c0:	4b35      	ldr	r3, [pc, #212]	; (1000b998 <at_ble_event_get+0x384>)
1000b8c2:	429c      	cmp	r4, r3
1000b8c4:	d100      	bne.n	1000b8c8 <at_ble_event_get+0x2b4>
1000b8c6:	e0f7      	b.n	1000bab8 <at_ble_event_get+0x4a4>
1000b8c8:	d876      	bhi.n	1000b9b8 <at_ble_event_get+0x3a4>
1000b8ca:	4b34      	ldr	r3, [pc, #208]	; (1000b99c <at_ble_event_get+0x388>)
1000b8cc:	429c      	cmp	r4, r3
1000b8ce:	d100      	bne.n	1000b8d2 <at_ble_event_get+0x2be>
1000b8d0:	e0f8      	b.n	1000bac4 <at_ble_event_get+0x4b0>
1000b8d2:	d869      	bhi.n	1000b9a8 <at_ble_event_get+0x394>
1000b8d4:	4b32      	ldr	r3, [pc, #200]	; (1000b9a0 <at_ble_event_get+0x38c>)
1000b8d6:	429c      	cmp	r4, r3
1000b8d8:	d100      	bne.n	1000b8dc <at_ble_event_get+0x2c8>
1000b8da:	e0e0      	b.n	1000ba9e <at_ble_event_get+0x48a>
1000b8dc:	4b31      	ldr	r3, [pc, #196]	; (1000b9a4 <at_ble_event_get+0x390>)
1000b8de:	429c      	cmp	r4, r3
1000b8e0:	d100      	bne.n	1000b8e4 <at_ble_event_get+0x2d0>
1000b8e2:	e0a9      	b.n	1000ba38 <at_ble_event_get+0x424>
1000b8e4:	e07e      	b.n	1000b9e4 <at_ble_event_get+0x3d0>
1000b8e6:	46c0      	nop			; (mov r8, r8)
1000b8e8:	1000c981 	.word	0x1000c981
1000b8ec:	100129e8 	.word	0x100129e8
1000b8f0:	1000af9d 	.word	0x1000af9d
1000b8f4:	100129ec 	.word	0x100129ec
1000b8f8:	100129e4 	.word	0x100129e4
1000b8fc:	100129d4 	.word	0x100129d4
1000b900:	1000b4fd 	.word	0x1000b4fd
1000b904:	1000f1bd 	.word	0x1000f1bd
1000b908:	0000ffff 	.word	0x0000ffff
1000b90c:	0000fffe 	.word	0x0000fffe
1000b910:	1000b215 	.word	0x1000b215
1000b914:	1000c983 	.word	0x1000c983
1000b918:	0000201e 	.word	0x0000201e
1000b91c:	0000201d 	.word	0x0000201d
1000b920:	00000c03 	.word	0x00000c03
1000b924:	0000201f 	.word	0x0000201f
1000b928:	00000d1c 	.word	0x00000d1c
1000b92c:	00000c0c 	.word	0x00000c0c
1000b930:	00000c02 	.word	0x00000c02
1000b934:	00000a02 	.word	0x00000a02
1000b938:	00000a03 	.word	0x00000a03
1000b93c:	00000c06 	.word	0x00000c06
1000b940:	00000c04 	.word	0x00000c04
1000b944:	00000c05 	.word	0x00000c05
1000b948:	00000c07 	.word	0x00000c07
1000b94c:	00000c09 	.word	0x00000c09
1000b950:	00000c17 	.word	0x00000c17
1000b954:	00000c12 	.word	0x00000c12
1000b958:	00000c0d 	.word	0x00000c0d
1000b95c:	00000c13 	.word	0x00000c13
1000b960:	00000c15 	.word	0x00000c15
1000b964:	00000d08 	.word	0x00000d08
1000b968:	00000d01 	.word	0x00000d01
1000b96c:	00000d15 	.word	0x00000d15
1000b970:	00000e1b 	.word	0x00000e1b
1000b974:	00000e0f 	.word	0x00000e0f
1000b978:	00000e03 	.word	0x00000e03
1000b97c:	00000e06 	.word	0x00000e06
1000b980:	00000e0a 	.word	0x00000e0a
1000b984:	00000e15 	.word	0x00000e15
1000b988:	00000e11 	.word	0x00000e11
1000b98c:	00000e13 	.word	0x00000e13
1000b990:	00000e17 	.word	0x00000e17
1000b994:	00000e19 	.word	0x00000e19
1000b998:	00000e27 	.word	0x00000e27
1000b99c:	00000e21 	.word	0x00000e21
1000b9a0:	00000e1c 	.word	0x00000e1c
1000b9a4:	00000e1d 	.word	0x00000e1d
1000b9a8:	4b9f      	ldr	r3, [pc, #636]	; (1000bc28 <at_ble_event_get+0x614>)
1000b9aa:	429c      	cmp	r4, r3
1000b9ac:	d07e      	beq.n	1000baac <at_ble_event_get+0x498>
1000b9ae:	4b9f      	ldr	r3, [pc, #636]	; (1000bc2c <at_ble_event_get+0x618>)
1000b9b0:	429c      	cmp	r4, r3
1000b9b2:	d100      	bne.n	1000b9b6 <at_ble_event_get+0x3a2>
1000b9b4:	e08c      	b.n	1000bad0 <at_ble_event_get+0x4bc>
1000b9b6:	e015      	b.n	1000b9e4 <at_ble_event_get+0x3d0>
1000b9b8:	4b9d      	ldr	r3, [pc, #628]	; (1000bc30 <at_ble_event_get+0x61c>)
1000b9ba:	429c      	cmp	r4, r3
1000b9bc:	d100      	bne.n	1000b9c0 <at_ble_event_get+0x3ac>
1000b9be:	e10a      	b.n	1000bbd6 <at_ble_event_get+0x5c2>
1000b9c0:	d808      	bhi.n	1000b9d4 <at_ble_event_get+0x3c0>
1000b9c2:	4b9c      	ldr	r3, [pc, #624]	; (1000bc34 <at_ble_event_get+0x620>)
1000b9c4:	429c      	cmp	r4, r3
1000b9c6:	d100      	bne.n	1000b9ca <at_ble_event_get+0x3b6>
1000b9c8:	e0f7      	b.n	1000bbba <at_ble_event_get+0x5a6>
1000b9ca:	4b9b      	ldr	r3, [pc, #620]	; (1000bc38 <at_ble_event_get+0x624>)
1000b9cc:	429c      	cmp	r4, r3
1000b9ce:	d100      	bne.n	1000b9d2 <at_ble_event_get+0x3be>
1000b9d0:	e0fa      	b.n	1000bbc8 <at_ble_event_get+0x5b4>
1000b9d2:	e007      	b.n	1000b9e4 <at_ble_event_get+0x3d0>
1000b9d4:	4b99      	ldr	r3, [pc, #612]	; (1000bc3c <at_ble_event_get+0x628>)
1000b9d6:	429c      	cmp	r4, r3
1000b9d8:	d100      	bne.n	1000b9dc <at_ble_event_get+0x3c8>
1000b9da:	e103      	b.n	1000bbe4 <at_ble_event_get+0x5d0>
1000b9dc:	4b98      	ldr	r3, [pc, #608]	; (1000bc40 <at_ble_event_get+0x62c>)
1000b9de:	429c      	cmp	r4, r3
1000b9e0:	d100      	bne.n	1000b9e4 <at_ble_event_get+0x3d0>
1000b9e2:	e106      	b.n	1000bbf2 <at_ble_event_get+0x5de>
1000b9e4:	2600      	movs	r6, #0
1000b9e6:	e10a      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000b9e8:	1c30      	adds	r0, r6, #0
1000b9ea:	1c29      	adds	r1, r5, #0
1000b9ec:	4b95      	ldr	r3, [pc, #596]	; (1000bc44 <at_ble_event_get+0x630>)
1000b9ee:	e014      	b.n	1000ba1a <at_ble_event_get+0x406>
1000b9f0:	1c30      	adds	r0, r6, #0
1000b9f2:	1c29      	adds	r1, r5, #0
1000b9f4:	4b94      	ldr	r3, [pc, #592]	; (1000bc48 <at_ble_event_get+0x634>)
1000b9f6:	4798      	blx	r3
1000b9f8:	2604      	movs	r6, #4
1000b9fa:	e100      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000b9fc:	1c30      	adds	r0, r6, #0
1000b9fe:	1c29      	adds	r1, r5, #0
1000ba00:	4b92      	ldr	r3, [pc, #584]	; (1000bc4c <at_ble_event_get+0x638>)
1000ba02:	4798      	blx	r3
1000ba04:	2601      	movs	r6, #1
1000ba06:	e0fa      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000ba08:	1c30      	adds	r0, r6, #0
1000ba0a:	1c29      	adds	r1, r5, #0
1000ba0c:	4b90      	ldr	r3, [pc, #576]	; (1000bc50 <at_ble_event_get+0x63c>)
1000ba0e:	4798      	blx	r3
1000ba10:	260f      	movs	r6, #15
1000ba12:	e0f4      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000ba14:	1c30      	adds	r0, r6, #0
1000ba16:	1c29      	adds	r1, r5, #0
1000ba18:	4b8e      	ldr	r3, [pc, #568]	; (1000bc54 <at_ble_event_get+0x640>)
1000ba1a:	4798      	blx	r3
1000ba1c:	1c06      	adds	r6, r0, #0
1000ba1e:	e0ee      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000ba20:	9801      	ldr	r0, [sp, #4]
1000ba22:	1c31      	adds	r1, r6, #0
1000ba24:	1c2a      	adds	r2, r5, #0
1000ba26:	4b8c      	ldr	r3, [pc, #560]	; (1000bc58 <at_ble_event_get+0x644>)
1000ba28:	e017      	b.n	1000ba5a <at_ble_event_get+0x446>
1000ba2a:	1c31      	adds	r1, r6, #0
1000ba2c:	9801      	ldr	r0, [sp, #4]
1000ba2e:	1c2a      	adds	r2, r5, #0
1000ba30:	4b8a      	ldr	r3, [pc, #552]	; (1000bc5c <at_ble_event_get+0x648>)
1000ba32:	4798      	blx	r3
1000ba34:	2611      	movs	r6, #17
1000ba36:	e0e2      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000ba38:	1c31      	adds	r1, r6, #0
1000ba3a:	9801      	ldr	r0, [sp, #4]
1000ba3c:	1c2a      	adds	r2, r5, #0
1000ba3e:	4b88      	ldr	r3, [pc, #544]	; (1000bc60 <at_ble_event_get+0x64c>)
1000ba40:	4798      	blx	r3
1000ba42:	2612      	movs	r6, #18
1000ba44:	e0db      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000ba46:	1c30      	adds	r0, r6, #0
1000ba48:	1c29      	adds	r1, r5, #0
1000ba4a:	4b86      	ldr	r3, [pc, #536]	; (1000bc64 <at_ble_event_get+0x650>)
1000ba4c:	4798      	blx	r3
1000ba4e:	2606      	movs	r6, #6
1000ba50:	e0d5      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000ba52:	1c31      	adds	r1, r6, #0
1000ba54:	1c2a      	adds	r2, r5, #0
1000ba56:	9801      	ldr	r0, [sp, #4]
1000ba58:	4b83      	ldr	r3, [pc, #524]	; (1000bc68 <at_ble_event_get+0x654>)
1000ba5a:	4798      	blx	r3
1000ba5c:	e7de      	b.n	1000ba1c <at_ble_event_get+0x408>
1000ba5e:	9801      	ldr	r0, [sp, #4]
1000ba60:	1c31      	adds	r1, r6, #0
1000ba62:	1c2a      	adds	r2, r5, #0
1000ba64:	4b81      	ldr	r3, [pc, #516]	; (1000bc6c <at_ble_event_get+0x658>)
1000ba66:	e7f8      	b.n	1000ba5a <at_ble_event_get+0x446>
1000ba68:	1c31      	adds	r1, r6, #0
1000ba6a:	9801      	ldr	r0, [sp, #4]
1000ba6c:	1c2a      	adds	r2, r5, #0
1000ba6e:	4b80      	ldr	r3, [pc, #512]	; (1000bc70 <at_ble_event_get+0x65c>)
1000ba70:	4798      	blx	r3
1000ba72:	260d      	movs	r6, #13
1000ba74:	e0c3      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000ba76:	1c31      	adds	r1, r6, #0
1000ba78:	9801      	ldr	r0, [sp, #4]
1000ba7a:	1c2a      	adds	r2, r5, #0
1000ba7c:	4b7d      	ldr	r3, [pc, #500]	; (1000bc74 <at_ble_event_get+0x660>)
1000ba7e:	4798      	blx	r3
1000ba80:	260e      	movs	r6, #14
1000ba82:	e0bc      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000ba84:	9801      	ldr	r0, [sp, #4]
1000ba86:	1c31      	adds	r1, r6, #0
1000ba88:	1c2a      	adds	r2, r5, #0
1000ba8a:	4b7b      	ldr	r3, [pc, #492]	; (1000bc78 <at_ble_event_get+0x664>)
1000ba8c:	4798      	blx	r3
1000ba8e:	e084      	b.n	1000bb9a <at_ble_event_get+0x586>
1000ba90:	1c31      	adds	r1, r6, #0
1000ba92:	9801      	ldr	r0, [sp, #4]
1000ba94:	1c2a      	adds	r2, r5, #0
1000ba96:	4b79      	ldr	r3, [pc, #484]	; (1000bc7c <at_ble_event_get+0x668>)
1000ba98:	4798      	blx	r3
1000ba9a:	260b      	movs	r6, #11
1000ba9c:	e0af      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000ba9e:	1c31      	adds	r1, r6, #0
1000baa0:	9801      	ldr	r0, [sp, #4]
1000baa2:	1c2a      	adds	r2, r5, #0
1000baa4:	4b76      	ldr	r3, [pc, #472]	; (1000bc80 <at_ble_event_get+0x66c>)
1000baa6:	4798      	blx	r3
1000baa8:	2610      	movs	r6, #16
1000baaa:	e0a8      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000baac:	1c30      	adds	r0, r6, #0
1000baae:	1c29      	adds	r1, r5, #0
1000bab0:	4b74      	ldr	r3, [pc, #464]	; (1000bc84 <at_ble_event_get+0x670>)
1000bab2:	4798      	blx	r3
1000bab4:	2628      	movs	r6, #40	; 0x28
1000bab6:	e0a2      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000bab8:	1c30      	adds	r0, r6, #0
1000baba:	1c29      	adds	r1, r5, #0
1000babc:	4b72      	ldr	r3, [pc, #456]	; (1000bc88 <at_ble_event_get+0x674>)
1000babe:	4798      	blx	r3
1000bac0:	2629      	movs	r6, #41	; 0x29
1000bac2:	e09c      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000bac4:	1c30      	adds	r0, r6, #0
1000bac6:	1c29      	adds	r1, r5, #0
1000bac8:	4b70      	ldr	r3, [pc, #448]	; (1000bc8c <at_ble_event_get+0x678>)
1000baca:	4798      	blx	r3
1000bacc:	2627      	movs	r6, #39	; 0x27
1000bace:	e096      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000bad0:	1c30      	adds	r0, r6, #0
1000bad2:	1c29      	adds	r1, r5, #0
1000bad4:	4b6e      	ldr	r3, [pc, #440]	; (1000bc90 <at_ble_event_get+0x67c>)
1000bad6:	4798      	blx	r3
1000bad8:	262a      	movs	r6, #42	; 0x2a
1000bada:	e090      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000badc:	9801      	ldr	r0, [sp, #4]
1000bade:	1c31      	adds	r1, r6, #0
1000bae0:	1c2a      	adds	r2, r5, #0
1000bae2:	4b6c      	ldr	r3, [pc, #432]	; (1000bc94 <at_ble_event_get+0x680>)
1000bae4:	e7b9      	b.n	1000ba5a <at_ble_event_get+0x446>
1000bae6:	9801      	ldr	r0, [sp, #4]
1000bae8:	1c31      	adds	r1, r6, #0
1000baea:	1c2a      	adds	r2, r5, #0
1000baec:	4b6a      	ldr	r3, [pc, #424]	; (1000bc98 <at_ble_event_get+0x684>)
1000baee:	e7b4      	b.n	1000ba5a <at_ble_event_get+0x446>
1000baf0:	1c30      	adds	r0, r6, #0
1000baf2:	1c29      	adds	r1, r5, #0
1000baf4:	4b69      	ldr	r3, [pc, #420]	; (1000bc9c <at_ble_event_get+0x688>)
1000baf6:	4798      	blx	r3
1000baf8:	262b      	movs	r6, #43	; 0x2b
1000bafa:	e080      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000bafc:	1c30      	adds	r0, r6, #0
1000bafe:	1c29      	adds	r1, r5, #0
1000bb00:	4b67      	ldr	r3, [pc, #412]	; (1000bca0 <at_ble_event_get+0x68c>)
1000bb02:	4798      	blx	r3
1000bb04:	262c      	movs	r6, #44	; 0x2c
1000bb06:	e07a      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000bb08:	1c31      	adds	r1, r6, #0
1000bb0a:	9801      	ldr	r0, [sp, #4]
1000bb0c:	1c2a      	adds	r2, r5, #0
1000bb0e:	4b65      	ldr	r3, [pc, #404]	; (1000bca4 <at_ble_event_get+0x690>)
1000bb10:	4798      	blx	r3
1000bb12:	2613      	movs	r6, #19
1000bb14:	e073      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000bb16:	1c31      	adds	r1, r6, #0
1000bb18:	9801      	ldr	r0, [sp, #4]
1000bb1a:	1c2a      	adds	r2, r5, #0
1000bb1c:	4b62      	ldr	r3, [pc, #392]	; (1000bca8 <at_ble_event_get+0x694>)
1000bb1e:	4798      	blx	r3
1000bb20:	2614      	movs	r6, #20
1000bb22:	e06c      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000bb24:	1c31      	adds	r1, r6, #0
1000bb26:	9801      	ldr	r0, [sp, #4]
1000bb28:	1c2a      	adds	r2, r5, #0
1000bb2a:	4b60      	ldr	r3, [pc, #384]	; (1000bcac <at_ble_event_get+0x698>)
1000bb2c:	4798      	blx	r3
1000bb2e:	2615      	movs	r6, #21
1000bb30:	e065      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000bb32:	1c31      	adds	r1, r6, #0
1000bb34:	9801      	ldr	r0, [sp, #4]
1000bb36:	1c2a      	adds	r2, r5, #0
1000bb38:	4b5d      	ldr	r3, [pc, #372]	; (1000bcb0 <at_ble_event_get+0x69c>)
1000bb3a:	4798      	blx	r3
1000bb3c:	2616      	movs	r6, #22
1000bb3e:	e05e      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000bb40:	9801      	ldr	r0, [sp, #4]
1000bb42:	1c31      	adds	r1, r6, #0
1000bb44:	1c2a      	adds	r2, r5, #0
1000bb46:	4b5b      	ldr	r3, [pc, #364]	; (1000bcb4 <at_ble_event_get+0x6a0>)
1000bb48:	e787      	b.n	1000ba5a <at_ble_event_get+0x446>
1000bb4a:	1c31      	adds	r1, r6, #0
1000bb4c:	9801      	ldr	r0, [sp, #4]
1000bb4e:	1c2a      	adds	r2, r5, #0
1000bb50:	4b58      	ldr	r3, [pc, #352]	; (1000bcb4 <at_ble_event_get+0x6a0>)
1000bb52:	4798      	blx	r3
1000bb54:	88a9      	ldrh	r1, [r5, #4]
1000bb56:	1c06      	adds	r6, r0, #0
1000bb58:	4b57      	ldr	r3, [pc, #348]	; (1000bcb8 <at_ble_event_get+0x6a4>)
1000bb5a:	8828      	ldrh	r0, [r5, #0]
1000bb5c:	4798      	blx	r3
1000bb5e:	e04e      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000bb60:	1c31      	adds	r1, r6, #0
1000bb62:	9801      	ldr	r0, [sp, #4]
1000bb64:	1c2a      	adds	r2, r5, #0
1000bb66:	4b55      	ldr	r3, [pc, #340]	; (1000bcbc <at_ble_event_get+0x6a8>)
1000bb68:	4798      	blx	r3
1000bb6a:	2623      	movs	r6, #35	; 0x23
1000bb6c:	e047      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000bb6e:	9801      	ldr	r0, [sp, #4]
1000bb70:	1c31      	adds	r1, r6, #0
1000bb72:	1c2a      	adds	r2, r5, #0
1000bb74:	4b52      	ldr	r3, [pc, #328]	; (1000bcc0 <at_ble_event_get+0x6ac>)
1000bb76:	e770      	b.n	1000ba5a <at_ble_event_get+0x446>
1000bb78:	9b01      	ldr	r3, [sp, #4]
1000bb7a:	1c30      	adds	r0, r6, #0
1000bb7c:	0a1f      	lsrs	r7, r3, #8
1000bb7e:	802f      	strh	r7, [r5, #0]
1000bb80:	1c29      	adds	r1, r5, #0
1000bb82:	4b50      	ldr	r3, [pc, #320]	; (1000bcc4 <at_ble_event_get+0x6b0>)
1000bb84:	e749      	b.n	1000ba1a <at_ble_event_get+0x406>
1000bb86:	9801      	ldr	r0, [sp, #4]
1000bb88:	1c31      	adds	r1, r6, #0
1000bb8a:	1c2a      	adds	r2, r5, #0
1000bb8c:	4b4e      	ldr	r3, [pc, #312]	; (1000bcc8 <at_ble_event_get+0x6b4>)
1000bb8e:	e764      	b.n	1000ba5a <at_ble_event_get+0x446>
1000bb90:	1c30      	adds	r0, r6, #0
1000bb92:	1c29      	adds	r1, r5, #0
1000bb94:	9a01      	ldr	r2, [sp, #4]
1000bb96:	4b4d      	ldr	r3, [pc, #308]	; (1000bccc <at_ble_event_get+0x6b8>)
1000bb98:	4798      	blx	r3
1000bb9a:	263b      	movs	r6, #59	; 0x3b
1000bb9c:	e02f      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000bb9e:	1c31      	adds	r1, r6, #0
1000bba0:	9801      	ldr	r0, [sp, #4]
1000bba2:	1c2a      	adds	r2, r5, #0
1000bba4:	4b4a      	ldr	r3, [pc, #296]	; (1000bcd0 <at_ble_event_get+0x6bc>)
1000bba6:	4798      	blx	r3
1000bba8:	2618      	movs	r6, #24
1000bbaa:	e028      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000bbac:	1c31      	adds	r1, r6, #0
1000bbae:	9801      	ldr	r0, [sp, #4]
1000bbb0:	1c2a      	adds	r2, r5, #0
1000bbb2:	4b48      	ldr	r3, [pc, #288]	; (1000bcd4 <at_ble_event_get+0x6c0>)
1000bbb4:	4798      	blx	r3
1000bbb6:	2620      	movs	r6, #32
1000bbb8:	e021      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000bbba:	1c31      	adds	r1, r6, #0
1000bbbc:	9801      	ldr	r0, [sp, #4]
1000bbbe:	1c2a      	adds	r2, r5, #0
1000bbc0:	4b45      	ldr	r3, [pc, #276]	; (1000bcd8 <at_ble_event_get+0x6c4>)
1000bbc2:	4798      	blx	r3
1000bbc4:	2633      	movs	r6, #51	; 0x33
1000bbc6:	e01a      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000bbc8:	1c31      	adds	r1, r6, #0
1000bbca:	9801      	ldr	r0, [sp, #4]
1000bbcc:	1c2a      	adds	r2, r5, #0
1000bbce:	4b43      	ldr	r3, [pc, #268]	; (1000bcdc <at_ble_event_get+0x6c8>)
1000bbd0:	4798      	blx	r3
1000bbd2:	2630      	movs	r6, #48	; 0x30
1000bbd4:	e013      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000bbd6:	1c31      	adds	r1, r6, #0
1000bbd8:	9801      	ldr	r0, [sp, #4]
1000bbda:	1c2a      	adds	r2, r5, #0
1000bbdc:	4b40      	ldr	r3, [pc, #256]	; (1000bce0 <at_ble_event_get+0x6cc>)
1000bbde:	4798      	blx	r3
1000bbe0:	2634      	movs	r6, #52	; 0x34
1000bbe2:	e00c      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000bbe4:	1c31      	adds	r1, r6, #0
1000bbe6:	9801      	ldr	r0, [sp, #4]
1000bbe8:	1c2a      	adds	r2, r5, #0
1000bbea:	4b3e      	ldr	r3, [pc, #248]	; (1000bce4 <at_ble_event_get+0x6d0>)
1000bbec:	4798      	blx	r3
1000bbee:	2635      	movs	r6, #53	; 0x35
1000bbf0:	e005      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000bbf2:	1c31      	adds	r1, r6, #0
1000bbf4:	9801      	ldr	r0, [sp, #4]
1000bbf6:	1c2a      	adds	r2, r5, #0
1000bbf8:	4b3b      	ldr	r3, [pc, #236]	; (1000bce8 <at_ble_event_get+0x6d4>)
1000bbfa:	4798      	blx	r3
1000bbfc:	2632      	movs	r6, #50	; 0x32
1000bbfe:	9b03      	ldr	r3, [sp, #12]
1000bc00:	701e      	strb	r6, [r3, #0]
1000bc02:	2300      	movs	r3, #0
1000bc04:	9302      	str	r3, [sp, #8]
1000bc06:	e57a      	b.n	1000b6fe <at_ble_event_get+0xea>
1000bc08:	23d0      	movs	r3, #208	; 0xd0
1000bc0a:	e7fb      	b.n	1000bc04 <at_ble_event_get+0x5f0>
1000bc0c:	9b01      	ldr	r3, [sp, #4]
1000bc0e:	9e02      	ldr	r6, [sp, #8]
1000bc10:	2bbb      	cmp	r3, #187	; 0xbb
1000bc12:	d000      	beq.n	1000bc16 <at_ble_event_get+0x602>
1000bc14:	e6e6      	b.n	1000b9e4 <at_ble_event_get+0x3d0>
1000bc16:	e7f2      	b.n	1000bbfe <at_ble_event_get+0x5ea>
1000bc18:	9b02      	ldr	r3, [sp, #8]
1000bc1a:	2b00      	cmp	r3, #0
1000bc1c:	d000      	beq.n	1000bc20 <at_ble_event_get+0x60c>
1000bc1e:	e56e      	b.n	1000b6fe <at_ble_event_get+0xea>
1000bc20:	e6e0      	b.n	1000b9e4 <at_ble_event_get+0x3d0>
1000bc22:	9802      	ldr	r0, [sp, #8]
1000bc24:	b007      	add	sp, #28
1000bc26:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bc28:	00000e22 	.word	0x00000e22
1000bc2c:	00000e25 	.word	0x00000e25
1000bc30:	00001b05 	.word	0x00001b05
1000bc34:	00001b01 	.word	0x00001b01
1000bc38:	00001b03 	.word	0x00001b03
1000bc3c:	00001b06 	.word	0x00001b06
1000bc40:	00001b08 	.word	0x00001b08
1000bc44:	1000d7ad 	.word	0x1000d7ad
1000bc48:	1000d791 	.word	0x1000d791
1000bc4c:	1000da2d 	.word	0x1000da2d
1000bc50:	1000db1d 	.word	0x1000db1d
1000bc54:	1000db41 	.word	0x1000db41
1000bc58:	1000cb25 	.word	0x1000cb25
1000bc5c:	1000d3a5 	.word	0x1000d3a5
1000bc60:	1000d421 	.word	0x1000d421
1000bc64:	1000cddd 	.word	0x1000cddd
1000bc68:	1000ce79 	.word	0x1000ce79
1000bc6c:	1000cf51 	.word	0x1000cf51
1000bc70:	1000d1d9 	.word	0x1000d1d9
1000bc74:	1000d279 	.word	0x1000d279
1000bc78:	1000d331 	.word	0x1000d331
1000bc7c:	1000d359 	.word	0x1000d359
1000bc80:	1000d36f 	.word	0x1000d36f
1000bc84:	1000d439 	.word	0x1000d439
1000bc88:	1000d467 	.word	0x1000d467
1000bc8c:	1000d47d 	.word	0x1000d47d
1000bc90:	1000d4a7 	.word	0x1000d4a7
1000bc94:	1000d2d5 	.word	0x1000d2d5
1000bc98:	1000d2ff 	.word	0x1000d2ff
1000bc9c:	1000c565 	.word	0x1000c565
1000bca0:	1000c591 	.word	0x1000c591
1000bca4:	1000dce9 	.word	0x1000dce9
1000bca8:	1000dd25 	.word	0x1000dd25
1000bcac:	1000dd6d 	.word	0x1000dd6d
1000bcb0:	1000ddb1 	.word	0x1000ddb1
1000bcb4:	1000dde5 	.word	0x1000dde5
1000bcb8:	1000dca9 	.word	0x1000dca9
1000bcbc:	1000deb1 	.word	0x1000deb1
1000bcc0:	1000de39 	.word	0x1000de39
1000bcc4:	1000c4bd 	.word	0x1000c4bd
1000bcc8:	1000c529 	.word	0x1000c529
1000bccc:	1000c4ed 	.word	0x1000c4ed
1000bcd0:	1000dec1 	.word	0x1000dec1
1000bcd4:	1000df01 	.word	0x1000df01
1000bcd8:	1000e04d 	.word	0x1000e04d
1000bcdc:	1000e057 	.word	0x1000e057
1000bce0:	1000e05d 	.word	0x1000e05d
1000bce4:	1000e063 	.word	0x1000e063
1000bce8:	1000e06f 	.word	0x1000e06f

1000bcec <internal_event_flush>:
1000bcec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000bcee:	490e      	ldr	r1, [pc, #56]	; (1000bd28 <internal_event_flush+0x3c>)
1000bcf0:	2400      	movs	r4, #0
1000bcf2:	680b      	ldr	r3, [r1, #0]
1000bcf4:	1c0f      	adds	r7, r1, #0
1000bcf6:	1c1e      	adds	r6, r3, #0
1000bcf8:	4a0c      	ldr	r2, [pc, #48]	; (1000bd2c <internal_event_flush+0x40>)
1000bcfa:	6815      	ldr	r5, [r2, #0]
1000bcfc:	9201      	str	r2, [sp, #4]
1000bcfe:	2b00      	cmp	r3, #0
1000bd00:	d00e      	beq.n	1000bd20 <internal_event_flush+0x34>
1000bd02:	889a      	ldrh	r2, [r3, #4]
1000bd04:	6819      	ldr	r1, [r3, #0]
1000bd06:	4282      	cmp	r2, r0
1000bd08:	d107      	bne.n	1000bd1a <internal_event_flush+0x2e>
1000bd0a:	2c00      	cmp	r4, #0
1000bd0c:	d001      	beq.n	1000bd12 <internal_event_flush+0x26>
1000bd0e:	6021      	str	r1, [r4, #0]
1000bd10:	e000      	b.n	1000bd14 <internal_event_flush+0x28>
1000bd12:	1c0e      	adds	r6, r1, #0
1000bd14:	601d      	str	r5, [r3, #0]
1000bd16:	1c1d      	adds	r5, r3, #0
1000bd18:	1c23      	adds	r3, r4, #0
1000bd1a:	1c1c      	adds	r4, r3, #0
1000bd1c:	1c0b      	adds	r3, r1, #0
1000bd1e:	e7ee      	b.n	1000bcfe <internal_event_flush+0x12>
1000bd20:	9b01      	ldr	r3, [sp, #4]
1000bd22:	603e      	str	r6, [r7, #0]
1000bd24:	601d      	str	r5, [r3, #0]
1000bd26:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000bd28:	100129e8 	.word	0x100129e8
1000bd2c:	100129ec 	.word	0x100129ec

1000bd30 <internal_conn_flush>:
1000bd30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000bd32:	4a12      	ldr	r2, [pc, #72]	; (1000bd7c <internal_conn_flush+0x4c>)
1000bd34:	9000      	str	r0, [sp, #0]
1000bd36:	6813      	ldr	r3, [r2, #0]
1000bd38:	4811      	ldr	r0, [pc, #68]	; (1000bd80 <internal_conn_flush+0x50>)
1000bd3a:	1c1f      	adds	r7, r3, #0
1000bd3c:	2100      	movs	r1, #0
1000bd3e:	4684      	mov	ip, r0
1000bd40:	6804      	ldr	r4, [r0, #0]
1000bd42:	9201      	str	r2, [sp, #4]
1000bd44:	2b00      	cmp	r3, #0
1000bd46:	d014      	beq.n	1000bd72 <internal_conn_flush+0x42>
1000bd48:	88d8      	ldrh	r0, [r3, #6]
1000bd4a:	9a00      	ldr	r2, [sp, #0]
1000bd4c:	681d      	ldr	r5, [r3, #0]
1000bd4e:	0a06      	lsrs	r6, r0, #8
1000bd50:	4296      	cmp	r6, r2
1000bd52:	d10b      	bne.n	1000bd6c <internal_conn_flush+0x3c>
1000bd54:	26fd      	movs	r6, #253	; 0xfd
1000bd56:	4006      	ands	r6, r0
1000bd58:	2e0c      	cmp	r6, #12
1000bd5a:	d107      	bne.n	1000bd6c <internal_conn_flush+0x3c>
1000bd5c:	2900      	cmp	r1, #0
1000bd5e:	d001      	beq.n	1000bd64 <internal_conn_flush+0x34>
1000bd60:	600d      	str	r5, [r1, #0]
1000bd62:	e000      	b.n	1000bd66 <internal_conn_flush+0x36>
1000bd64:	1c2f      	adds	r7, r5, #0
1000bd66:	601c      	str	r4, [r3, #0]
1000bd68:	1c1c      	adds	r4, r3, #0
1000bd6a:	1c0b      	adds	r3, r1, #0
1000bd6c:	1c19      	adds	r1, r3, #0
1000bd6e:	1c2b      	adds	r3, r5, #0
1000bd70:	e7e8      	b.n	1000bd44 <internal_conn_flush+0x14>
1000bd72:	9b01      	ldr	r3, [sp, #4]
1000bd74:	601f      	str	r7, [r3, #0]
1000bd76:	4663      	mov	r3, ip
1000bd78:	601c      	str	r4, [r3, #0]
1000bd7a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000bd7c:	100129e8 	.word	0x100129e8
1000bd80:	100129ec 	.word	0x100129ec

1000bd84 <at_ble_device_name_set>:
1000bd84:	b530      	push	{r4, r5, lr}
1000bd86:	23cf      	movs	r3, #207	; 0xcf
1000bd88:	2800      	cmp	r0, #0
1000bd8a:	d010      	beq.n	1000bdae <at_ble_device_name_set+0x2a>
1000bd8c:	1e4a      	subs	r2, r1, #1
1000bd8e:	2a1f      	cmp	r2, #31
1000bd90:	d80d      	bhi.n	1000bdae <at_ble_device_name_set+0x2a>
1000bd92:	4a08      	ldr	r2, [pc, #32]	; (1000bdb4 <at_ble_device_name_set+0x30>)
1000bd94:	1c13      	adds	r3, r2, #0
1000bd96:	33aa      	adds	r3, #170	; 0xaa
1000bd98:	8019      	strh	r1, [r3, #0]
1000bd9a:	2300      	movs	r3, #0
1000bd9c:	1c1c      	adds	r4, r3, #0
1000bd9e:	5cc5      	ldrb	r5, [r0, r3]
1000bda0:	34ac      	adds	r4, #172	; 0xac
1000bda2:	3301      	adds	r3, #1
1000bda4:	5515      	strb	r5, [r2, r4]
1000bda6:	b2dc      	uxtb	r4, r3
1000bda8:	428c      	cmp	r4, r1
1000bdaa:	d3f7      	bcc.n	1000bd9c <at_ble_device_name_set+0x18>
1000bdac:	2300      	movs	r3, #0
1000bdae:	1c18      	adds	r0, r3, #0
1000bdb0:	bd30      	pop	{r4, r5, pc}
1000bdb2:	46c0      	nop			; (mov r8, r8)
1000bdb4:	100137b6 	.word	0x100137b6

1000bdb8 <at_ble_addr_get>:
1000bdb8:	b510      	push	{r4, lr}
1000bdba:	1c04      	adds	r4, r0, #0
1000bdbc:	20cf      	movs	r0, #207	; 0xcf
1000bdbe:	2c00      	cmp	r4, #0
1000bdc0:	d006      	beq.n	1000bdd0 <at_ble_addr_get+0x18>
1000bdc2:	4b04      	ldr	r3, [pc, #16]	; (1000bdd4 <at_ble_addr_get+0x1c>)
1000bdc4:	38ce      	subs	r0, #206	; 0xce
1000bdc6:	1c21      	adds	r1, r4, #0
1000bdc8:	4798      	blx	r3
1000bdca:	4b03      	ldr	r3, [pc, #12]	; (1000bdd8 <at_ble_addr_get+0x20>)
1000bdcc:	791b      	ldrb	r3, [r3, #4]
1000bdce:	7023      	strb	r3, [r4, #0]
1000bdd0:	bd10      	pop	{r4, pc}
1000bdd2:	46c0      	nop			; (mov r8, r8)
1000bdd4:	1000d641 	.word	0x1000d641
1000bdd8:	100137b6 	.word	0x100137b6

1000bddc <at_ble_set_dev_config>:
1000bddc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bdde:	7906      	ldrb	r6, [r0, #4]
1000bde0:	b089      	sub	sp, #36	; 0x24
1000bde2:	25cf      	movs	r5, #207	; 0xcf
1000bde4:	2e03      	cmp	r6, #3
1000bde6:	d838      	bhi.n	1000be5a <at_ble_set_dev_config+0x7e>
1000bde8:	7803      	ldrb	r3, [r0, #0]
1000bdea:	3511      	adds	r5, #17
1000bdec:	2b0f      	cmp	r3, #15
1000bdee:	d834      	bhi.n	1000be5a <at_ble_set_dev_config+0x7e>
1000bdf0:	2380      	movs	r3, #128	; 0x80
1000bdf2:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000bdf4:	3d11      	subs	r5, #17
1000bdf6:	009b      	lsls	r3, r3, #2
1000bdf8:	429f      	cmp	r7, r3
1000bdfa:	d82e      	bhi.n	1000be5a <at_ble_set_dev_config+0x7e>
1000bdfc:	7fc5      	ldrb	r5, [r0, #31]
1000bdfe:	7f83      	ldrb	r3, [r0, #30]
1000be00:	01ad      	lsls	r5, r5, #6
1000be02:	015b      	lsls	r3, r3, #5
1000be04:	431d      	orrs	r5, r3
1000be06:	7ec3      	ldrb	r3, [r0, #27]
1000be08:	431d      	orrs	r5, r3
1000be0a:	7f43      	ldrb	r3, [r0, #29]
1000be0c:	011b      	lsls	r3, r3, #4
1000be0e:	431d      	orrs	r5, r3
1000be10:	7f03      	ldrb	r3, [r0, #28]
1000be12:	009b      	lsls	r3, r3, #2
1000be14:	431d      	orrs	r5, r3
1000be16:	4b12      	ldr	r3, [pc, #72]	; (1000be60 <at_ble_set_dev_config+0x84>)
1000be18:	b2ed      	uxtb	r5, r5
1000be1a:	711e      	strb	r6, [r3, #4]
1000be1c:	7903      	ldrb	r3, [r0, #4]
1000be1e:	3b02      	subs	r3, #2
1000be20:	2b01      	cmp	r3, #1
1000be22:	d801      	bhi.n	1000be28 <at_ble_set_dev_config+0x4c>
1000be24:	2302      	movs	r3, #2
1000be26:	7103      	strb	r3, [r0, #4]
1000be28:	1c04      	adds	r4, r0, #0
1000be2a:	1c23      	adds	r3, r4, #0
1000be2c:	330b      	adds	r3, #11
1000be2e:	8861      	ldrh	r1, [r4, #2]
1000be30:	9307      	str	r3, [sp, #28]
1000be32:	7923      	ldrb	r3, [r4, #4]
1000be34:	7800      	ldrb	r0, [r0, #0]
1000be36:	9300      	str	r3, [sp, #0]
1000be38:	9501      	str	r5, [sp, #4]
1000be3a:	8c25      	ldrh	r5, [r4, #32]
1000be3c:	1d62      	adds	r2, r4, #5
1000be3e:	9502      	str	r5, [sp, #8]
1000be40:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000be42:	9b07      	ldr	r3, [sp, #28]
1000be44:	9503      	str	r5, [sp, #12]
1000be46:	9704      	str	r7, [sp, #16]
1000be48:	4d06      	ldr	r5, [pc, #24]	; (1000be64 <at_ble_set_dev_config+0x88>)
1000be4a:	47a8      	blx	r5
1000be4c:	7126      	strb	r6, [r4, #4]
1000be4e:	1c05      	adds	r5, r0, #0
1000be50:	1c21      	adds	r1, r4, #0
1000be52:	4803      	ldr	r0, [pc, #12]	; (1000be60 <at_ble_set_dev_config+0x84>)
1000be54:	2226      	movs	r2, #38	; 0x26
1000be56:	4b04      	ldr	r3, [pc, #16]	; (1000be68 <at_ble_set_dev_config+0x8c>)
1000be58:	4798      	blx	r3
1000be5a:	1c28      	adds	r0, r5, #0
1000be5c:	b009      	add	sp, #36	; 0x24
1000be5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000be60:	100137b6 	.word	0x100137b6
1000be64:	1000d539 	.word	0x1000d539
1000be68:	1000f1ab 	.word	0x1000f1ab

1000be6c <at_ble_init>:
1000be6c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000be6e:	b087      	sub	sp, #28
1000be70:	af03      	add	r7, sp, #12
1000be72:	4954      	ldr	r1, [pc, #336]	; (1000bfc4 <at_ble_init+0x158>)
1000be74:	220b      	movs	r2, #11
1000be76:	4b54      	ldr	r3, [pc, #336]	; (1000bfc8 <at_ble_init+0x15c>)
1000be78:	1c04      	adds	r4, r0, #0
1000be7a:	1c38      	adds	r0, r7, #0
1000be7c:	4798      	blx	r3
1000be7e:	2205      	movs	r2, #5
1000be80:	4b52      	ldr	r3, [pc, #328]	; (1000bfcc <at_ble_init+0x160>)
1000be82:	2640      	movs	r6, #64	; 0x40
1000be84:	801a      	strh	r2, [r3, #0]
1000be86:	2300      	movs	r3, #0
1000be88:	4a51      	ldr	r2, [pc, #324]	; (1000bfd0 <at_ble_init+0x164>)
1000be8a:	6013      	str	r3, [r2, #0]
1000be8c:	4a51      	ldr	r2, [pc, #324]	; (1000bfd4 <at_ble_init+0x168>)
1000be8e:	7013      	strb	r3, [r2, #0]
1000be90:	4a51      	ldr	r2, [pc, #324]	; (1000bfd8 <at_ble_init+0x16c>)
1000be92:	7013      	strb	r3, [r2, #0]
1000be94:	4b51      	ldr	r3, [pc, #324]	; (1000bfdc <at_ble_init+0x170>)
1000be96:	4798      	blx	r3
1000be98:	4b51      	ldr	r3, [pc, #324]	; (1000bfe0 <at_ble_init+0x174>)
1000be9a:	4798      	blx	r3
1000be9c:	4b51      	ldr	r3, [pc, #324]	; (1000bfe4 <at_ble_init+0x178>)
1000be9e:	4798      	blx	r3
1000bea0:	4b51      	ldr	r3, [pc, #324]	; (1000bfe8 <at_ble_init+0x17c>)
1000bea2:	4798      	blx	r3
1000bea4:	2c00      	cmp	r4, #0
1000bea6:	d100      	bne.n	1000beaa <at_ble_init+0x3e>
1000bea8:	e089      	b.n	1000bfbe <at_ble_init+0x152>
1000beaa:	68a3      	ldr	r3, [r4, #8]
1000beac:	2b00      	cmp	r3, #0
1000beae:	d100      	bne.n	1000beb2 <at_ble_init+0x46>
1000beb0:	e085      	b.n	1000bfbe <at_ble_init+0x152>
1000beb2:	6923      	ldr	r3, [r4, #16]
1000beb4:	2b00      	cmp	r3, #0
1000beb6:	d100      	bne.n	1000beba <at_ble_init+0x4e>
1000beb8:	e081      	b.n	1000bfbe <at_ble_init+0x152>
1000beba:	6820      	ldr	r0, [r4, #0]
1000bebc:	2800      	cmp	r0, #0
1000bebe:	d102      	bne.n	1000bec6 <at_ble_init+0x5a>
1000bec0:	6863      	ldr	r3, [r4, #4]
1000bec2:	2b00      	cmp	r3, #0
1000bec4:	d17b      	bne.n	1000bfbe <at_ble_init+0x152>
1000bec6:	4b49      	ldr	r3, [pc, #292]	; (1000bfec <at_ble_init+0x180>)
1000bec8:	6861      	ldr	r1, [r4, #4]
1000beca:	4798      	blx	r3
1000becc:	4b48      	ldr	r3, [pc, #288]	; (1000bff0 <at_ble_init+0x184>)
1000bece:	4798      	blx	r3
1000bed0:	2801      	cmp	r0, #1
1000bed2:	d901      	bls.n	1000bed8 <at_ble_init+0x6c>
1000bed4:	26e2      	movs	r6, #226	; 0xe2
1000bed6:	e072      	b.n	1000bfbe <at_ble_init+0x152>
1000bed8:	4846      	ldr	r0, [pc, #280]	; (1000bff4 <at_ble_init+0x188>)
1000beda:	4b47      	ldr	r3, [pc, #284]	; (1000bff8 <at_ble_init+0x18c>)
1000bedc:	4798      	blx	r3
1000bede:	2800      	cmp	r0, #0
1000bee0:	d1f8      	bne.n	1000bed4 <at_ble_init+0x68>
1000bee2:	1c20      	adds	r0, r4, #0
1000bee4:	4b45      	ldr	r3, [pc, #276]	; (1000bffc <at_ble_init+0x190>)
1000bee6:	4798      	blx	r3
1000bee8:	68e0      	ldr	r0, [r4, #12]
1000beea:	68a1      	ldr	r1, [r4, #8]
1000beec:	4b44      	ldr	r3, [pc, #272]	; (1000c000 <at_ble_init+0x194>)
1000beee:	4798      	blx	r3
1000bef0:	466b      	mov	r3, sp
1000bef2:	2201      	movs	r2, #1
1000bef4:	1cdc      	adds	r4, r3, #3
1000bef6:	1c20      	adds	r0, r4, #0
1000bef8:	a901      	add	r1, sp, #4
1000befa:	4252      	negs	r2, r2
1000befc:	4b41      	ldr	r3, [pc, #260]	; (1000c004 <at_ble_init+0x198>)
1000befe:	4798      	blx	r3
1000bf00:	2800      	cmp	r0, #0
1000bf02:	d102      	bne.n	1000bf0a <at_ble_init+0x9e>
1000bf04:	7823      	ldrb	r3, [r4, #0]
1000bf06:	2b39      	cmp	r3, #57	; 0x39
1000bf08:	d1f2      	bne.n	1000bef0 <at_ble_init+0x84>
1000bf0a:	4b3f      	ldr	r3, [pc, #252]	; (1000c008 <at_ble_init+0x19c>)
1000bf0c:	4798      	blx	r3
1000bf0e:	1e06      	subs	r6, r0, #0
1000bf10:	d155      	bne.n	1000bfbe <at_ble_init+0x152>
1000bf12:	1c03      	adds	r3, r0, #0
1000bf14:	2101      	movs	r1, #1
1000bf16:	4a3d      	ldr	r2, [pc, #244]	; (1000c00c <at_ble_init+0x1a0>)
1000bf18:	4249      	negs	r1, r1
1000bf1a:	189a      	adds	r2, r3, r2
1000bf1c:	3312      	adds	r3, #18
1000bf1e:	8151      	strh	r1, [r2, #10]
1000bf20:	2b90      	cmp	r3, #144	; 0x90
1000bf22:	d1f7      	bne.n	1000bf14 <at_ble_init+0xa8>
1000bf24:	4c3a      	ldr	r4, [pc, #232]	; (1000c010 <at_ble_init+0x1a4>)
1000bf26:	3b81      	subs	r3, #129	; 0x81
1000bf28:	7023      	strb	r3, [r4, #0]
1000bf2a:	4b3a      	ldr	r3, [pc, #232]	; (1000c014 <at_ble_init+0x1a8>)
1000bf2c:	4a3a      	ldr	r2, [pc, #232]	; (1000c018 <at_ble_init+0x1ac>)
1000bf2e:	8063      	strh	r3, [r4, #2]
1000bf30:	2300      	movs	r3, #0
1000bf32:	7123      	strb	r3, [r4, #4]
1000bf34:	3301      	adds	r3, #1
1000bf36:	1e58      	subs	r0, r3, #1
1000bf38:	0119      	lsls	r1, r3, #4
1000bf3a:	4301      	orrs	r1, r0
1000bf3c:	3302      	adds	r3, #2
1000bf3e:	7011      	strb	r1, [r2, #0]
1000bf40:	3201      	adds	r2, #1
1000bf42:	2b21      	cmp	r3, #33	; 0x21
1000bf44:	d1f7      	bne.n	1000bf36 <at_ble_init+0xca>
1000bf46:	33e0      	adds	r3, #224	; 0xe0
1000bf48:	33ff      	adds	r3, #255	; 0xff
1000bf4a:	84a3      	strh	r3, [r4, #36]	; 0x24
1000bf4c:	1c23      	adds	r3, r4, #0
1000bf4e:	2500      	movs	r5, #0
1000bf50:	3373      	adds	r3, #115	; 0x73
1000bf52:	701d      	strb	r5, [r3, #0]
1000bf54:	1c23      	adds	r3, r4, #0
1000bf56:	3372      	adds	r3, #114	; 0x72
1000bf58:	701d      	strb	r5, [r3, #0]
1000bf5a:	1c23      	adds	r3, r4, #0
1000bf5c:	3376      	adds	r3, #118	; 0x76
1000bf5e:	701d      	strb	r5, [r3, #0]
1000bf60:	1c23      	adds	r3, r4, #0
1000bf62:	33cc      	adds	r3, #204	; 0xcc
1000bf64:	801d      	strh	r5, [r3, #0]
1000bf66:	1c22      	adds	r2, r4, #0
1000bf68:	23a0      	movs	r3, #160	; 0xa0
1000bf6a:	32d0      	adds	r2, #208	; 0xd0
1000bf6c:	005b      	lsls	r3, r3, #1
1000bf6e:	8013      	strh	r3, [r2, #0]
1000bf70:	1c22      	adds	r2, r4, #0
1000bf72:	32ce      	adds	r2, #206	; 0xce
1000bf74:	8013      	strh	r3, [r2, #0]
1000bf76:	1c23      	adds	r3, r4, #0
1000bf78:	33d2      	adds	r3, #210	; 0xd2
1000bf7a:	801d      	strh	r5, [r3, #0]
1000bf7c:	22fa      	movs	r2, #250	; 0xfa
1000bf7e:	1c23      	adds	r3, r4, #0
1000bf80:	0052      	lsls	r2, r2, #1
1000bf82:	33d4      	adds	r3, #212	; 0xd4
1000bf84:	801a      	strh	r2, [r3, #0]
1000bf86:	1c23      	adds	r3, r4, #0
1000bf88:	33d6      	adds	r3, #214	; 0xd6
1000bf8a:	701d      	strb	r5, [r3, #0]
1000bf8c:	1c20      	adds	r0, r4, #0
1000bf8e:	4b23      	ldr	r3, [pc, #140]	; (1000c01c <at_ble_init+0x1b0>)
1000bf90:	76e5      	strb	r5, [r4, #27]
1000bf92:	7725      	strb	r5, [r4, #28]
1000bf94:	7765      	strb	r5, [r4, #29]
1000bf96:	77a5      	strb	r5, [r4, #30]
1000bf98:	77e5      	strb	r5, [r4, #31]
1000bf9a:	8425      	strh	r5, [r4, #32]
1000bf9c:	8465      	strh	r5, [r4, #34]	; 0x22
1000bf9e:	4798      	blx	r3
1000bfa0:	1c23      	adds	r3, r4, #0
1000bfa2:	2207      	movs	r2, #7
1000bfa4:	3374      	adds	r3, #116	; 0x74
1000bfa6:	701a      	strb	r2, [r3, #0]
1000bfa8:	1c23      	adds	r3, r4, #0
1000bfaa:	3204      	adds	r2, #4
1000bfac:	33aa      	adds	r3, #170	; 0xaa
1000bfae:	801a      	strh	r2, [r3, #0]
1000bfb0:	1c2b      	adds	r3, r5, #0
1000bfb2:	5d7a      	ldrb	r2, [r7, r5]
1000bfb4:	33ac      	adds	r3, #172	; 0xac
1000bfb6:	3501      	adds	r5, #1
1000bfb8:	54e2      	strb	r2, [r4, r3]
1000bfba:	2d0b      	cmp	r5, #11
1000bfbc:	d1f8      	bne.n	1000bfb0 <at_ble_init+0x144>
1000bfbe:	1c30      	adds	r0, r6, #0
1000bfc0:	b007      	add	sp, #28
1000bfc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bfc4:	10010e5c 	.word	0x10010e5c
1000bfc8:	1000f1ab 	.word	0x1000f1ab
1000bfcc:	10013724 	.word	0x10013724
1000bfd0:	10012a98 	.word	0x10012a98
1000bfd4:	100129f8 	.word	0x100129f8
1000bfd8:	10010f74 	.word	0x10010f74
1000bfdc:	1000df11 	.word	0x1000df11
1000bfe0:	1000c2bd 	.word	0x1000c2bd
1000bfe4:	1000c339 	.word	0x1000c339
1000bfe8:	1000c559 	.word	0x1000c559
1000bfec:	1000c375 	.word	0x1000c375
1000bff0:	1000aced 	.word	0x1000aced
1000bff4:	1000c859 	.word	0x1000c859
1000bff8:	1000af31 	.word	0x1000af31
1000bffc:	1000c901 	.word	0x1000c901
1000c000:	1000b559 	.word	0x1000b559
1000c004:	1000b615 	.word	0x1000b615
1000c008:	1000d4c9 	.word	0x1000d4c9
1000c00c:	10013726 	.word	0x10013726
1000c010:	100137b6 	.word	0x100137b6
1000c014:	00003a98 	.word	0x00003a98
1000c018:	100137c1 	.word	0x100137c1
1000c01c:	1000bddd 	.word	0x1000bddd

1000c020 <at_ble_addr_set>:
1000c020:	b538      	push	{r3, r4, r5, lr}
1000c022:	1c45      	adds	r5, r0, #1
1000c024:	1c03      	adds	r3, r0, #0
1000c026:	20cf      	movs	r0, #207	; 0xcf
1000c028:	2d00      	cmp	r5, #0
1000c02a:	d018      	beq.n	1000c05e <at_ble_addr_set+0x3e>
1000c02c:	781a      	ldrb	r2, [r3, #0]
1000c02e:	2a03      	cmp	r2, #3
1000c030:	d815      	bhi.n	1000c05e <at_ble_addr_set+0x3e>
1000c032:	2a01      	cmp	r2, #1
1000c034:	d102      	bne.n	1000c03c <at_ble_addr_set+0x1c>
1000c036:	785a      	ldrb	r2, [r3, #1]
1000c038:	2a00      	cmp	r2, #0
1000c03a:	d010      	beq.n	1000c05e <at_ble_addr_set+0x3e>
1000c03c:	1c1c      	adds	r4, r3, #0
1000c03e:	1c29      	adds	r1, r5, #0
1000c040:	2206      	movs	r2, #6
1000c042:	4b07      	ldr	r3, [pc, #28]	; (1000c060 <at_ble_addr_set+0x40>)
1000c044:	4807      	ldr	r0, [pc, #28]	; (1000c064 <at_ble_addr_set+0x44>)
1000c046:	4798      	blx	r3
1000c048:	7823      	ldrb	r3, [r4, #0]
1000c04a:	4807      	ldr	r0, [pc, #28]	; (1000c068 <at_ble_addr_set+0x48>)
1000c04c:	7103      	strb	r3, [r0, #4]
1000c04e:	4b07      	ldr	r3, [pc, #28]	; (1000c06c <at_ble_addr_set+0x4c>)
1000c050:	4798      	blx	r3
1000c052:	7823      	ldrb	r3, [r4, #0]
1000c054:	2b00      	cmp	r3, #0
1000c056:	d102      	bne.n	1000c05e <at_ble_addr_set+0x3e>
1000c058:	1c28      	adds	r0, r5, #0
1000c05a:	4b05      	ldr	r3, [pc, #20]	; (1000c070 <at_ble_addr_set+0x50>)
1000c05c:	4798      	blx	r3
1000c05e:	bd38      	pop	{r3, r4, r5, pc}
1000c060:	1000f1ab 	.word	0x1000f1ab
1000c064:	100137bb 	.word	0x100137bb
1000c068:	100137b6 	.word	0x100137b6
1000c06c:	1000bddd 	.word	0x1000bddd
1000c070:	1000c985 	.word	0x1000c985

1000c074 <at_ble_adv_data_set>:
1000c074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c076:	4684      	mov	ip, r0
1000c078:	1c0f      	adds	r7, r1, #0
1000c07a:	1c16      	adds	r6, r2, #0
1000c07c:	1c1c      	adds	r4, r3, #0
1000c07e:	2800      	cmp	r0, #0
1000c080:	d102      	bne.n	1000c088 <at_ble_adv_data_set+0x14>
1000c082:	20e2      	movs	r0, #226	; 0xe2
1000c084:	2a00      	cmp	r2, #0
1000c086:	d02b      	beq.n	1000c0e0 <at_ble_adv_data_set+0x6c>
1000c088:	20cf      	movs	r0, #207	; 0xcf
1000c08a:	2f1f      	cmp	r7, #31
1000c08c:	d828      	bhi.n	1000c0e0 <at_ble_adv_data_set+0x6c>
1000c08e:	2c1f      	cmp	r4, #31
1000c090:	d826      	bhi.n	1000c0e0 <at_ble_adv_data_set+0x6c>
1000c092:	4663      	mov	r3, ip
1000c094:	2b00      	cmp	r3, #0
1000c096:	d00e      	beq.n	1000c0b6 <at_ble_adv_data_set+0x42>
1000c098:	4812      	ldr	r0, [pc, #72]	; (1000c0e4 <at_ble_adv_data_set+0x70>)
1000c09a:	4d13      	ldr	r5, [pc, #76]	; (1000c0e8 <at_ble_adv_data_set+0x74>)
1000c09c:	2f00      	cmp	r7, #0
1000c09e:	d104      	bne.n	1000c0aa <at_ble_adv_data_set+0x36>
1000c0a0:	1c39      	adds	r1, r7, #0
1000c0a2:	221f      	movs	r2, #31
1000c0a4:	4b11      	ldr	r3, [pc, #68]	; (1000c0ec <at_ble_adv_data_set+0x78>)
1000c0a6:	4798      	blx	r3
1000c0a8:	e003      	b.n	1000c0b2 <at_ble_adv_data_set+0x3e>
1000c0aa:	4661      	mov	r1, ip
1000c0ac:	1c3a      	adds	r2, r7, #0
1000c0ae:	4b10      	ldr	r3, [pc, #64]	; (1000c0f0 <at_ble_adv_data_set+0x7c>)
1000c0b0:	4798      	blx	r3
1000c0b2:	3572      	adds	r5, #114	; 0x72
1000c0b4:	702f      	strb	r7, [r5, #0]
1000c0b6:	1e30      	subs	r0, r6, #0
1000c0b8:	d012      	beq.n	1000c0e0 <at_ble_adv_data_set+0x6c>
1000c0ba:	4d0b      	ldr	r5, [pc, #44]	; (1000c0e8 <at_ble_adv_data_set+0x74>)
1000c0bc:	480d      	ldr	r0, [pc, #52]	; (1000c0f4 <at_ble_adv_data_set+0x80>)
1000c0be:	2c00      	cmp	r4, #0
1000c0c0:	d107      	bne.n	1000c0d2 <at_ble_adv_data_set+0x5e>
1000c0c2:	1c21      	adds	r1, r4, #0
1000c0c4:	221f      	movs	r2, #31
1000c0c6:	4b09      	ldr	r3, [pc, #36]	; (1000c0ec <at_ble_adv_data_set+0x78>)
1000c0c8:	3573      	adds	r5, #115	; 0x73
1000c0ca:	4798      	blx	r3
1000c0cc:	702c      	strb	r4, [r5, #0]
1000c0ce:	1c20      	adds	r0, r4, #0
1000c0d0:	e006      	b.n	1000c0e0 <at_ble_adv_data_set+0x6c>
1000c0d2:	1c31      	adds	r1, r6, #0
1000c0d4:	1c22      	adds	r2, r4, #0
1000c0d6:	4b06      	ldr	r3, [pc, #24]	; (1000c0f0 <at_ble_adv_data_set+0x7c>)
1000c0d8:	4798      	blx	r3
1000c0da:	2000      	movs	r0, #0
1000c0dc:	3573      	adds	r5, #115	; 0x73
1000c0de:	702c      	strb	r4, [r5, #0]
1000c0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c0e2:	46c0      	nop			; (mov r8, r8)
1000c0e4:	100137ea 	.word	0x100137ea
1000c0e8:	100137b6 	.word	0x100137b6
1000c0ec:	1000f1bd 	.word	0x1000f1bd
1000c0f0:	1000f1ab 	.word	0x1000f1ab
1000c0f4:	10013809 	.word	0x10013809

1000c0f8 <at_ble_adv_start>:
1000c0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c0fa:	b091      	sub	sp, #68	; 0x44
1000c0fc:	1c1f      	adds	r7, r3, #0
1000c0fe:	ab16      	add	r3, sp, #88	; 0x58
1000c100:	881d      	ldrh	r5, [r3, #0]
1000c102:	ab17      	add	r3, sp, #92	; 0x5c
1000c104:	881b      	ldrh	r3, [r3, #0]
1000c106:	910d      	str	r1, [sp, #52]	; 0x34
1000c108:	930e      	str	r3, [sp, #56]	; 0x38
1000c10a:	ab18      	add	r3, sp, #96	; 0x60
1000c10c:	781b      	ldrb	r3, [r3, #0]
1000c10e:	1c04      	adds	r4, r0, #0
1000c110:	930f      	str	r3, [sp, #60]	; 0x3c
1000c112:	4b42      	ldr	r3, [pc, #264]	; (1000c21c <at_ble_adv_start+0x124>)
1000c114:	1c16      	adds	r6, r2, #0
1000c116:	3373      	adds	r3, #115	; 0x73
1000c118:	781b      	ldrb	r3, [r3, #0]
1000c11a:	20cf      	movs	r0, #207	; 0xcf
1000c11c:	930c      	str	r3, [sp, #48]	; 0x30
1000c11e:	2c01      	cmp	r4, #1
1000c120:	d103      	bne.n	1000c12a <at_ble_adv_start+0x32>
1000c122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000c124:	2b00      	cmp	r3, #0
1000c126:	d176      	bne.n	1000c216 <at_ble_adv_start+0x11e>
1000c128:	e024      	b.n	1000c174 <at_ble_adv_start+0x7c>
1000c12a:	2c04      	cmp	r4, #4
1000c12c:	d873      	bhi.n	1000c216 <at_ble_adv_start+0x11e>
1000c12e:	2380      	movs	r3, #128	; 0x80
1000c130:	01db      	lsls	r3, r3, #7
1000c132:	429d      	cmp	r5, r3
1000c134:	d86f      	bhi.n	1000c216 <at_ble_adv_start+0x11e>
1000c136:	2c00      	cmp	r4, #0
1000c138:	d102      	bne.n	1000c140 <at_ble_adv_start+0x48>
1000c13a:	2d1f      	cmp	r5, #31
1000c13c:	d96b      	bls.n	1000c216 <at_ble_adv_start+0x11e>
1000c13e:	e003      	b.n	1000c148 <at_ble_adv_start+0x50>
1000c140:	2d9f      	cmp	r5, #159	; 0x9f
1000c142:	d801      	bhi.n	1000c148 <at_ble_adv_start+0x50>
1000c144:	2c01      	cmp	r4, #1
1000c146:	d166      	bne.n	1000c216 <at_ble_adv_start+0x11e>
1000c148:	2f00      	cmp	r7, #0
1000c14a:	d009      	beq.n	1000c160 <at_ble_adv_start+0x68>
1000c14c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000c14e:	20cf      	movs	r0, #207	; 0xcf
1000c150:	3b01      	subs	r3, #1
1000c152:	2b01      	cmp	r3, #1
1000c154:	d95f      	bls.n	1000c216 <at_ble_adv_start+0x11e>
1000c156:	2c01      	cmp	r4, #1
1000c158:	d102      	bne.n	1000c160 <at_ble_adv_start+0x68>
1000c15a:	2d00      	cmp	r5, #0
1000c15c:	d100      	bne.n	1000c160 <at_ble_adv_start+0x68>
1000c15e:	3520      	adds	r5, #32
1000c160:	4b2f      	ldr	r3, [pc, #188]	; (1000c220 <at_ble_adv_start+0x128>)
1000c162:	4798      	blx	r3
1000c164:	1c01      	adds	r1, r0, #0
1000c166:	2e00      	cmp	r6, #0
1000c168:	d043      	beq.n	1000c1f2 <at_ble_adv_start+0xfa>
1000c16a:	7833      	ldrb	r3, [r6, #0]
1000c16c:	1e60      	subs	r0, r4, #1
1000c16e:	2b00      	cmp	r3, #0
1000c170:	d109      	bne.n	1000c186 <at_ble_adv_start+0x8e>
1000c172:	e03b      	b.n	1000c1ec <at_ble_adv_start+0xf4>
1000c174:	2380      	movs	r3, #128	; 0x80
1000c176:	01db      	lsls	r3, r3, #7
1000c178:	429d      	cmp	r5, r3
1000c17a:	d84c      	bhi.n	1000c216 <at_ble_adv_start+0x11e>
1000c17c:	2e00      	cmp	r6, #0
1000c17e:	d04a      	beq.n	1000c216 <at_ble_adv_start+0x11e>
1000c180:	2f00      	cmp	r7, #0
1000c182:	d1e3      	bne.n	1000c14c <at_ble_adv_start+0x54>
1000c184:	e02b      	b.n	1000c1de <at_ble_adv_start+0xe6>
1000c186:	2301      	movs	r3, #1
1000c188:	2803      	cmp	r0, #3
1000c18a:	d93a      	bls.n	1000c202 <at_ble_adv_start+0x10a>
1000c18c:	200d      	movs	r0, #13
1000c18e:	1c72      	adds	r2, r6, #1
1000c190:	e002      	b.n	1000c198 <at_ble_adv_start+0xa0>
1000c192:	200e      	movs	r0, #14
1000c194:	1e32      	subs	r2, r6, #0
1000c196:	d1fa      	bne.n	1000c18e <at_ble_adv_start+0x96>
1000c198:	4c20      	ldr	r4, [pc, #128]	; (1000c21c <at_ble_adv_start+0x124>)
1000c19a:	3474      	adds	r4, #116	; 0x74
1000c19c:	7826      	ldrb	r6, [r4, #0]
1000c19e:	2407      	movs	r4, #7
1000c1a0:	2e00      	cmp	r6, #0
1000c1a2:	d000      	beq.n	1000c1a6 <at_ble_adv_start+0xae>
1000c1a4:	1c34      	adds	r4, r6, #0
1000c1a6:	9200      	str	r2, [sp, #0]
1000c1a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000c1aa:	9403      	str	r4, [sp, #12]
1000c1ac:	9204      	str	r2, [sp, #16]
1000c1ae:	4a1b      	ldr	r2, [pc, #108]	; (1000c21c <at_ble_adv_start+0x124>)
1000c1b0:	9501      	str	r5, [sp, #4]
1000c1b2:	9502      	str	r5, [sp, #8]
1000c1b4:	9705      	str	r7, [sp, #20]
1000c1b6:	3272      	adds	r2, #114	; 0x72
1000c1b8:	7812      	ldrb	r2, [r2, #0]
1000c1ba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000c1bc:	9206      	str	r2, [sp, #24]
1000c1be:	4a19      	ldr	r2, [pc, #100]	; (1000c224 <at_ble_adv_start+0x12c>)
1000c1c0:	9207      	str	r2, [sp, #28]
1000c1c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000c1c4:	9208      	str	r2, [sp, #32]
1000c1c6:	4a18      	ldr	r2, [pc, #96]	; (1000c228 <at_ble_adv_start+0x130>)
1000c1c8:	9209      	str	r2, [sp, #36]	; 0x24
1000c1ca:	2264      	movs	r2, #100	; 0x64
1000c1cc:	4362      	muls	r2, r4
1000c1ce:	b292      	uxth	r2, r2
1000c1d0:	920a      	str	r2, [sp, #40]	; 0x28
1000c1d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000c1d4:	4c15      	ldr	r4, [pc, #84]	; (1000c22c <at_ble_adv_start+0x134>)
1000c1d6:	920b      	str	r2, [sp, #44]	; 0x2c
1000c1d8:	4a15      	ldr	r2, [pc, #84]	; (1000c230 <at_ble_adv_start+0x138>)
1000c1da:	47a0      	blx	r4
1000c1dc:	e01b      	b.n	1000c216 <at_ble_adv_start+0x11e>
1000c1de:	2d00      	cmp	r5, #0
1000c1e0:	d1be      	bne.n	1000c160 <at_ble_adv_start+0x68>
1000c1e2:	4b0f      	ldr	r3, [pc, #60]	; (1000c220 <at_ble_adv_start+0x128>)
1000c1e4:	4798      	blx	r3
1000c1e6:	2520      	movs	r5, #32
1000c1e8:	1c01      	adds	r1, r0, #0
1000c1ea:	e7be      	b.n	1000c16a <at_ble_adv_start+0x72>
1000c1ec:	2803      	cmp	r0, #3
1000c1ee:	d8cd      	bhi.n	1000c18c <at_ble_adv_start+0x94>
1000c1f0:	e006      	b.n	1000c200 <at_ble_adv_start+0x108>
1000c1f2:	1e60      	subs	r0, r4, #1
1000c1f4:	2803      	cmp	r0, #3
1000c1f6:	d903      	bls.n	1000c200 <at_ble_adv_start+0x108>
1000c1f8:	1c33      	adds	r3, r6, #0
1000c1fa:	200d      	movs	r0, #13
1000c1fc:	1c32      	adds	r2, r6, #0
1000c1fe:	e7cb      	b.n	1000c198 <at_ble_adv_start+0xa0>
1000c200:	2300      	movs	r3, #0
1000c202:	f001 ff39 	bl	1000e078 <__gnu_thumb1_case_sqi>
1000c206:	06c6      	.short	0x06c6
1000c208:	0204      	.short	0x0204
1000c20a:	200f      	movs	r0, #15
1000c20c:	e7c2      	b.n	1000c194 <at_ble_adv_start+0x9c>
1000c20e:	2200      	movs	r2, #0
1000c210:	920c      	str	r2, [sp, #48]	; 0x30
1000c212:	200c      	movs	r0, #12
1000c214:	e7be      	b.n	1000c194 <at_ble_adv_start+0x9c>
1000c216:	b011      	add	sp, #68	; 0x44
1000c218:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c21a:	46c0      	nop			; (mov r8, r8)
1000c21c:	100137b6 	.word	0x100137b6
1000c220:	1000da15 	.word	0x1000da15
1000c224:	100137ea 	.word	0x100137ea
1000c228:	10013809 	.word	0x10013809
1000c22c:	1000d8f5 	.word	0x1000d8f5
1000c230:	00003a98 	.word	0x00003a98

1000c234 <at_ble_scan_stop>:
1000c234:	b510      	push	{r4, lr}
1000c236:	4b05      	ldr	r3, [pc, #20]	; (1000c24c <at_ble_scan_stop+0x18>)
1000c238:	4798      	blx	r3
1000c23a:	1e04      	subs	r4, r0, #0
1000c23c:	d103      	bne.n	1000c246 <at_ble_scan_stop+0x12>
1000c23e:	20d1      	movs	r0, #209	; 0xd1
1000c240:	4b03      	ldr	r3, [pc, #12]	; (1000c250 <at_ble_scan_stop+0x1c>)
1000c242:	0100      	lsls	r0, r0, #4
1000c244:	4798      	blx	r3
1000c246:	1c20      	adds	r0, r4, #0
1000c248:	bd10      	pop	{r4, pc}
1000c24a:	46c0      	nop			; (mov r8, r8)
1000c24c:	1000d721 	.word	0x1000d721
1000c250:	1000bced 	.word	0x1000bced

1000c254 <at_ble_disconnect>:
1000c254:	b538      	push	{r3, r4, r5, lr}
1000c256:	1c04      	adds	r4, r0, #0
1000c258:	4b04      	ldr	r3, [pc, #16]	; (1000c26c <at_ble_disconnect+0x18>)
1000c25a:	1c08      	adds	r0, r1, #0
1000c25c:	1c21      	adds	r1, r4, #0
1000c25e:	4798      	blx	r3
1000c260:	1c05      	adds	r5, r0, #0
1000c262:	4b03      	ldr	r3, [pc, #12]	; (1000c270 <at_ble_disconnect+0x1c>)
1000c264:	1c20      	adds	r0, r4, #0
1000c266:	4798      	blx	r3
1000c268:	1c28      	adds	r0, r5, #0
1000c26a:	bd38      	pop	{r3, r4, r5, pc}
1000c26c:	1000cd99 	.word	0x1000cd99
1000c270:	1000bd31 	.word	0x1000bd31

1000c274 <at_ble_conn_update_reply>:
1000c274:	b510      	push	{r4, lr}
1000c276:	4c01      	ldr	r4, [pc, #4]	; (1000c27c <at_ble_conn_update_reply+0x8>)
1000c278:	47a0      	blx	r4
1000c27a:	bd10      	pop	{r4, pc}
1000c27c:	1000d289 	.word	0x1000d289

1000c280 <at_ble_random_address_resolve>:
1000c280:	b510      	push	{r4, lr}
1000c282:	23cf      	movs	r3, #207	; 0xcf
1000c284:	2800      	cmp	r0, #0
1000c286:	d00a      	beq.n	1000c29e <at_ble_random_address_resolve+0x1e>
1000c288:	2900      	cmp	r1, #0
1000c28a:	d008      	beq.n	1000c29e <at_ble_random_address_resolve+0x1e>
1000c28c:	2a00      	cmp	r2, #0
1000c28e:	d006      	beq.n	1000c29e <at_ble_random_address_resolve+0x1e>
1000c290:	780c      	ldrb	r4, [r1, #0]
1000c292:	2c02      	cmp	r4, #2
1000c294:	d103      	bne.n	1000c29e <at_ble_random_address_resolve+0x1e>
1000c296:	4b03      	ldr	r3, [pc, #12]	; (1000c2a4 <at_ble_random_address_resolve+0x24>)
1000c298:	3101      	adds	r1, #1
1000c29a:	4798      	blx	r3
1000c29c:	2300      	movs	r3, #0
1000c29e:	1c18      	adds	r0, r3, #0
1000c2a0:	bd10      	pop	{r4, pc}
1000c2a2:	46c0      	nop			; (mov r8, r8)
1000c2a4:	1000dab5 	.word	0x1000dab5

1000c2a8 <at_ble_uuid_len2type>:
1000c2a8:	1e83      	subs	r3, r0, #2
1000c2aa:	b2db      	uxtb	r3, r3
1000c2ac:	2003      	movs	r0, #3
1000c2ae:	2b0e      	cmp	r3, #14
1000c2b0:	d801      	bhi.n	1000c2b6 <at_ble_uuid_len2type+0xe>
1000c2b2:	4a01      	ldr	r2, [pc, #4]	; (1000c2b8 <at_ble_uuid_len2type+0x10>)
1000c2b4:	5cd0      	ldrb	r0, [r2, r3]
1000c2b6:	4770      	bx	lr
1000c2b8:	10010e67 	.word	0x10010e67

1000c2bc <init_gatt_client_module>:
1000c2bc:	2200      	movs	r2, #0
1000c2be:	4b01      	ldr	r3, [pc, #4]	; (1000c2c4 <init_gatt_client_module+0x8>)
1000c2c0:	801a      	strh	r2, [r3, #0]
1000c2c2:	4770      	bx	lr
1000c2c4:	100129f0 	.word	0x100129f0

1000c2c8 <db_searchATT>:
1000c2c8:	b570      	push	{r4, r5, r6, lr}
1000c2ca:	1c05      	adds	r5, r0, #0
1000c2cc:	2400      	movs	r4, #0
1000c2ce:	4b0c      	ldr	r3, [pc, #48]	; (1000c300 <db_searchATT+0x38>)
1000c2d0:	6819      	ldr	r1, [r3, #0]
1000c2d2:	4b0c      	ldr	r3, [pc, #48]	; (1000c304 <db_searchATT+0x3c>)
1000c2d4:	681e      	ldr	r6, [r3, #0]
1000c2d6:	428c      	cmp	r4, r1
1000c2d8:	dc10      	bgt.n	1000c2fc <db_searchATT+0x34>
1000c2da:	200c      	movs	r0, #12
1000c2dc:	1863      	adds	r3, r4, r1
1000c2de:	0fda      	lsrs	r2, r3, #31
1000c2e0:	18d3      	adds	r3, r2, r3
1000c2e2:	1c02      	adds	r2, r0, #0
1000c2e4:	105b      	asrs	r3, r3, #1
1000c2e6:	435a      	muls	r2, r3
1000c2e8:	18b0      	adds	r0, r6, r2
1000c2ea:	8802      	ldrh	r2, [r0, #0]
1000c2ec:	42aa      	cmp	r2, r5
1000c2ee:	d201      	bcs.n	1000c2f4 <db_searchATT+0x2c>
1000c2f0:	1e59      	subs	r1, r3, #1
1000c2f2:	e7f0      	b.n	1000c2d6 <db_searchATT+0xe>
1000c2f4:	42aa      	cmp	r2, r5
1000c2f6:	d902      	bls.n	1000c2fe <db_searchATT+0x36>
1000c2f8:	1c5c      	adds	r4, r3, #1
1000c2fa:	e7ec      	b.n	1000c2d6 <db_searchATT+0xe>
1000c2fc:	2000      	movs	r0, #0
1000c2fe:	bd70      	pop	{r4, r5, r6, pc}
1000c300:	10012a04 	.word	0x10012a04
1000c304:	100129fc 	.word	0x100129fc

1000c308 <at_ble_read_authorize_reply.part.1>:
1000c308:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000c30a:	4b09      	ldr	r3, [pc, #36]	; (1000c330 <at_ble_read_authorize_reply.part.1+0x28>)
1000c30c:	1c05      	adds	r5, r0, #0
1000c30e:	1c08      	adds	r0, r1, #0
1000c310:	1c0c      	adds	r4, r1, #0
1000c312:	4798      	blx	r3
1000c314:	2800      	cmp	r0, #0
1000c316:	d009      	beq.n	1000c32c <at_ble_read_authorize_reply.part.1+0x24>
1000c318:	6882      	ldr	r2, [r0, #8]
1000c31a:	2a00      	cmp	r2, #0
1000c31c:	d006      	beq.n	1000c32c <at_ble_read_authorize_reply.part.1+0x24>
1000c31e:	8883      	ldrh	r3, [r0, #4]
1000c320:	1c29      	adds	r1, r5, #0
1000c322:	9200      	str	r2, [sp, #0]
1000c324:	1c20      	adds	r0, r4, #0
1000c326:	2200      	movs	r2, #0
1000c328:	4c02      	ldr	r4, [pc, #8]	; (1000c334 <at_ble_read_authorize_reply.part.1+0x2c>)
1000c32a:	47a0      	blx	r4
1000c32c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000c32e:	46c0      	nop			; (mov r8, r8)
1000c330:	1000c2c9 	.word	0x1000c2c9
1000c334:	1000dbb1 	.word	0x1000dbb1

1000c338 <initi_gatt_server_module>:
1000c338:	2300      	movs	r3, #0
1000c33a:	4a07      	ldr	r2, [pc, #28]	; (1000c358 <initi_gatt_server_module+0x20>)
1000c33c:	7013      	strb	r3, [r2, #0]
1000c33e:	4a07      	ldr	r2, [pc, #28]	; (1000c35c <initi_gatt_server_module+0x24>)
1000c340:	6013      	str	r3, [r2, #0]
1000c342:	4a07      	ldr	r2, [pc, #28]	; (1000c360 <initi_gatt_server_module+0x28>)
1000c344:	6013      	str	r3, [r2, #0]
1000c346:	4a07      	ldr	r2, [pc, #28]	; (1000c364 <initi_gatt_server_module+0x2c>)
1000c348:	6013      	str	r3, [r2, #0]
1000c34a:	4a07      	ldr	r2, [pc, #28]	; (1000c368 <initi_gatt_server_module+0x30>)
1000c34c:	6013      	str	r3, [r2, #0]
1000c34e:	4a07      	ldr	r2, [pc, #28]	; (1000c36c <initi_gatt_server_module+0x34>)
1000c350:	6013      	str	r3, [r2, #0]
1000c352:	4a07      	ldr	r2, [pc, #28]	; (1000c370 <initi_gatt_server_module+0x38>)
1000c354:	6013      	str	r3, [r2, #0]
1000c356:	4770      	bx	lr
1000c358:	100129f8 	.word	0x100129f8
1000c35c:	10012a08 	.word	0x10012a08
1000c360:	10012a04 	.word	0x10012a04
1000c364:	100129f4 	.word	0x100129f4
1000c368:	10012a00 	.word	0x10012a00
1000c36c:	100129fc 	.word	0x100129fc
1000c370:	10012a0c 	.word	0x10012a0c

1000c374 <db_init>:
1000c374:	4b0a      	ldr	r3, [pc, #40]	; (1000c3a0 <db_init+0x2c>)
1000c376:	4a0b      	ldr	r2, [pc, #44]	; (1000c3a4 <db_init+0x30>)
1000c378:	6018      	str	r0, [r3, #0]
1000c37a:	084b      	lsrs	r3, r1, #1
1000c37c:	6013      	str	r3, [r2, #0]
1000c37e:	4a0a      	ldr	r2, [pc, #40]	; (1000c3a8 <db_init+0x34>)
1000c380:	18c3      	adds	r3, r0, r3
1000c382:	6013      	str	r3, [r2, #0]
1000c384:	4a09      	ldr	r2, [pc, #36]	; (1000c3ac <db_init+0x38>)
1000c386:	1841      	adds	r1, r0, r1
1000c388:	6013      	str	r3, [r2, #0]
1000c38a:	2303      	movs	r3, #3
1000c38c:	2200      	movs	r2, #0
1000c38e:	3103      	adds	r1, #3
1000c390:	4399      	bics	r1, r3
1000c392:	4b07      	ldr	r3, [pc, #28]	; (1000c3b0 <db_init+0x3c>)
1000c394:	3904      	subs	r1, #4
1000c396:	6019      	str	r1, [r3, #0]
1000c398:	4b06      	ldr	r3, [pc, #24]	; (1000c3b4 <db_init+0x40>)
1000c39a:	601a      	str	r2, [r3, #0]
1000c39c:	4770      	bx	lr
1000c39e:	46c0      	nop			; (mov r8, r8)
1000c3a0:	10012a0c 	.word	0x10012a0c
1000c3a4:	10012a08 	.word	0x10012a08
1000c3a8:	100129f4 	.word	0x100129f4
1000c3ac:	10012a00 	.word	0x10012a00
1000c3b0:	100129fc 	.word	0x100129fc
1000c3b4:	10012a04 	.word	0x10012a04

1000c3b8 <at_ble_characteristic_value_set>:
1000c3b8:	b570      	push	{r4, r5, r6, lr}
1000c3ba:	4b0b      	ldr	r3, [pc, #44]	; (1000c3e8 <at_ble_characteristic_value_set+0x30>)
1000c3bc:	1c06      	adds	r6, r0, #0
1000c3be:	1c0c      	adds	r4, r1, #0
1000c3c0:	1c15      	adds	r5, r2, #0
1000c3c2:	4798      	blx	r3
1000c3c4:	2800      	cmp	r0, #0
1000c3c6:	d008      	beq.n	1000c3da <at_ble_characteristic_value_set+0x22>
1000c3c8:	6880      	ldr	r0, [r0, #8]
1000c3ca:	2800      	cmp	r0, #0
1000c3cc:	d005      	beq.n	1000c3da <at_ble_characteristic_value_set+0x22>
1000c3ce:	1c21      	adds	r1, r4, #0
1000c3d0:	1c2a      	adds	r2, r5, #0
1000c3d2:	4b06      	ldr	r3, [pc, #24]	; (1000c3ec <at_ble_characteristic_value_set+0x34>)
1000c3d4:	4798      	blx	r3
1000c3d6:	2000      	movs	r0, #0
1000c3d8:	e004      	b.n	1000c3e4 <at_ble_characteristic_value_set+0x2c>
1000c3da:	1c30      	adds	r0, r6, #0
1000c3dc:	1c29      	adds	r1, r5, #0
1000c3de:	1c22      	adds	r2, r4, #0
1000c3e0:	4b03      	ldr	r3, [pc, #12]	; (1000c3f0 <at_ble_characteristic_value_set+0x38>)
1000c3e2:	4798      	blx	r3
1000c3e4:	bd70      	pop	{r4, r5, r6, pc}
1000c3e6:	46c0      	nop			; (mov r8, r8)
1000c3e8:	1000c2c9 	.word	0x1000c2c9
1000c3ec:	1000f1ab 	.word	0x1000f1ab
1000c3f0:	1000df25 	.word	0x1000df25

1000c3f4 <at_ble_characteristic_value_get>:
1000c3f4:	b570      	push	{r4, r5, r6, lr}
1000c3f6:	4b0c      	ldr	r3, [pc, #48]	; (1000c428 <at_ble_characteristic_value_get+0x34>)
1000c3f8:	1c06      	adds	r6, r0, #0
1000c3fa:	1c0c      	adds	r4, r1, #0
1000c3fc:	1c15      	adds	r5, r2, #0
1000c3fe:	4798      	blx	r3
1000c400:	2800      	cmp	r0, #0
1000c402:	d00b      	beq.n	1000c41c <at_ble_characteristic_value_get+0x28>
1000c404:	6883      	ldr	r3, [r0, #8]
1000c406:	2b00      	cmp	r3, #0
1000c408:	d008      	beq.n	1000c41c <at_ble_characteristic_value_get+0x28>
1000c40a:	8883      	ldrh	r3, [r0, #4]
1000c40c:	802b      	strh	r3, [r5, #0]
1000c40e:	8882      	ldrh	r2, [r0, #4]
1000c410:	6881      	ldr	r1, [r0, #8]
1000c412:	4b06      	ldr	r3, [pc, #24]	; (1000c42c <at_ble_characteristic_value_get+0x38>)
1000c414:	1c20      	adds	r0, r4, #0
1000c416:	4798      	blx	r3
1000c418:	2000      	movs	r0, #0
1000c41a:	e004      	b.n	1000c426 <at_ble_characteristic_value_get+0x32>
1000c41c:	1c30      	adds	r0, r6, #0
1000c41e:	1c29      	adds	r1, r5, #0
1000c420:	1c22      	adds	r2, r4, #0
1000c422:	4b03      	ldr	r3, [pc, #12]	; (1000c430 <at_ble_characteristic_value_get+0x3c>)
1000c424:	4798      	blx	r3
1000c426:	bd70      	pop	{r4, r5, r6, pc}
1000c428:	1000c2c9 	.word	0x1000c2c9
1000c42c:	1000f1ab 	.word	0x1000f1ab
1000c430:	1000dfb1 	.word	0x1000dfb1

1000c434 <at_ble_write_authorize_reply>:
1000c434:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c436:	b085      	sub	sp, #20
1000c438:	1c04      	adds	r4, r0, #0
1000c43a:	9101      	str	r1, [sp, #4]
1000c43c:	2900      	cmp	r1, #0
1000c43e:	d128      	bne.n	1000c492 <at_ble_write_authorize_reply+0x5e>
1000c440:	8843      	ldrh	r3, [r0, #2]
1000c442:	1c27      	adds	r7, r4, #0
1000c444:	9300      	str	r3, [sp, #0]
1000c446:	1c18      	adds	r0, r3, #0
1000c448:	4b16      	ldr	r3, [pc, #88]	; (1000c4a4 <at_ble_write_authorize_reply+0x70>)
1000c44a:	4798      	blx	r3
1000c44c:	3708      	adds	r7, #8
1000c44e:	2800      	cmp	r0, #0
1000c450:	d009      	beq.n	1000c466 <at_ble_write_authorize_reply+0x32>
1000c452:	6880      	ldr	r0, [r0, #8]
1000c454:	2800      	cmp	r0, #0
1000c456:	d006      	beq.n	1000c466 <at_ble_write_authorize_reply+0x32>
1000c458:	88a3      	ldrh	r3, [r4, #4]
1000c45a:	88e2      	ldrh	r2, [r4, #6]
1000c45c:	18c0      	adds	r0, r0, r3
1000c45e:	1c39      	adds	r1, r7, #0
1000c460:	4b11      	ldr	r3, [pc, #68]	; (1000c4a8 <at_ble_write_authorize_reply+0x74>)
1000c462:	4798      	blx	r3
1000c464:	e015      	b.n	1000c492 <at_ble_write_authorize_reply+0x5e>
1000c466:	ab02      	add	r3, sp, #8
1000c468:	1d9e      	adds	r6, r3, #6
1000c46a:	2300      	movs	r3, #0
1000c46c:	4d0f      	ldr	r5, [pc, #60]	; (1000c4ac <at_ble_write_authorize_reply+0x78>)
1000c46e:	8033      	strh	r3, [r6, #0]
1000c470:	6829      	ldr	r1, [r5, #0]
1000c472:	1c32      	adds	r2, r6, #0
1000c474:	4b0e      	ldr	r3, [pc, #56]	; (1000c4b0 <at_ble_write_authorize_reply+0x7c>)
1000c476:	9800      	ldr	r0, [sp, #0]
1000c478:	4798      	blx	r3
1000c47a:	682b      	ldr	r3, [r5, #0]
1000c47c:	88a0      	ldrh	r0, [r4, #4]
1000c47e:	88e2      	ldrh	r2, [r4, #6]
1000c480:	1818      	adds	r0, r3, r0
1000c482:	1c39      	adds	r1, r7, #0
1000c484:	4b08      	ldr	r3, [pc, #32]	; (1000c4a8 <at_ble_write_authorize_reply+0x74>)
1000c486:	4798      	blx	r3
1000c488:	8860      	ldrh	r0, [r4, #2]
1000c48a:	8832      	ldrh	r2, [r6, #0]
1000c48c:	6829      	ldr	r1, [r5, #0]
1000c48e:	4b09      	ldr	r3, [pc, #36]	; (1000c4b4 <at_ble_write_authorize_reply+0x80>)
1000c490:	4798      	blx	r3
1000c492:	8860      	ldrh	r0, [r4, #2]
1000c494:	8821      	ldrh	r1, [r4, #0]
1000c496:	9a01      	ldr	r2, [sp, #4]
1000c498:	4b07      	ldr	r3, [pc, #28]	; (1000c4b8 <at_ble_write_authorize_reply+0x84>)
1000c49a:	4798      	blx	r3
1000c49c:	2000      	movs	r0, #0
1000c49e:	b005      	add	sp, #20
1000c4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c4a2:	46c0      	nop			; (mov r8, r8)
1000c4a4:	1000c2c9 	.word	0x1000c2c9
1000c4a8:	1000f1ab 	.word	0x1000f1ab
1000c4ac:	10010f78 	.word	0x10010f78
1000c4b0:	1000c3f5 	.word	0x1000c3f5
1000c4b4:	1000c3b9 	.word	0x1000c3b9
1000c4b8:	1000dc1d 	.word	0x1000dc1d

1000c4bc <gatts_handle_read_req>:
1000c4bc:	b538      	push	{r3, r4, r5, lr}
1000c4be:	1c0c      	adds	r4, r1, #0
1000c4c0:	4b07      	ldr	r3, [pc, #28]	; (1000c4e0 <gatts_handle_read_req+0x24>)
1000c4c2:	4798      	blx	r3
1000c4c4:	8865      	ldrh	r5, [r4, #2]
1000c4c6:	4b07      	ldr	r3, [pc, #28]	; (1000c4e4 <gatts_handle_read_req+0x28>)
1000c4c8:	1c28      	adds	r0, r5, #0
1000c4ca:	4798      	blx	r3
1000c4cc:	7883      	ldrb	r3, [r0, #2]
1000c4ce:	2026      	movs	r0, #38	; 0x26
1000c4d0:	07db      	lsls	r3, r3, #31
1000c4d2:	d404      	bmi.n	1000c4de <gatts_handle_read_req+0x22>
1000c4d4:	8820      	ldrh	r0, [r4, #0]
1000c4d6:	1c29      	adds	r1, r5, #0
1000c4d8:	4b03      	ldr	r3, [pc, #12]	; (1000c4e8 <gatts_handle_read_req+0x2c>)
1000c4da:	4798      	blx	r3
1000c4dc:	203b      	movs	r0, #59	; 0x3b
1000c4de:	bd38      	pop	{r3, r4, r5, pc}
1000c4e0:	1000db61 	.word	0x1000db61
1000c4e4:	1000c2c9 	.word	0x1000c2c9
1000c4e8:	1000c309 	.word	0x1000c309

1000c4ec <gatts_handle_att_info_req>:
1000c4ec:	b538      	push	{r3, r4, r5, lr}
1000c4ee:	1c0d      	adds	r5, r1, #0
1000c4f0:	4b0a      	ldr	r3, [pc, #40]	; (1000c51c <gatts_handle_att_info_req+0x30>)
1000c4f2:	1c14      	adds	r4, r2, #0
1000c4f4:	4798      	blx	r3
1000c4f6:	882d      	ldrh	r5, [r5, #0]
1000c4f8:	4b09      	ldr	r3, [pc, #36]	; (1000c520 <gatts_handle_att_info_req+0x34>)
1000c4fa:	1c28      	adds	r0, r5, #0
1000c4fc:	4798      	blx	r3
1000c4fe:	0a22      	lsrs	r2, r4, #8
1000c500:	1c03      	adds	r3, r0, #0
1000c502:	4c08      	ldr	r4, [pc, #32]	; (1000c524 <gatts_handle_att_info_req+0x38>)
1000c504:	b291      	uxth	r1, r2
1000c506:	2800      	cmp	r0, #0
1000c508:	d003      	beq.n	1000c512 <gatts_handle_att_info_req+0x26>
1000c50a:	8882      	ldrh	r2, [r0, #4]
1000c50c:	2300      	movs	r3, #0
1000c50e:	1c28      	adds	r0, r5, #0
1000c510:	e001      	b.n	1000c516 <gatts_handle_att_info_req+0x2a>
1000c512:	1c28      	adds	r0, r5, #0
1000c514:	2201      	movs	r2, #1
1000c516:	47a0      	blx	r4
1000c518:	203b      	movs	r0, #59	; 0x3b
1000c51a:	bd38      	pop	{r3, r4, r5, pc}
1000c51c:	1000dba5 	.word	0x1000dba5
1000c520:	1000c2c9 	.word	0x1000c2c9
1000c524:	1000dc61 	.word	0x1000dc61

1000c528 <gatts_handle_write_req>:
1000c528:	b510      	push	{r4, lr}
1000c52a:	1c14      	adds	r4, r2, #0
1000c52c:	4b07      	ldr	r3, [pc, #28]	; (1000c54c <gatts_handle_write_req+0x24>)
1000c52e:	4798      	blx	r3
1000c530:	4b07      	ldr	r3, [pc, #28]	; (1000c550 <gatts_handle_write_req+0x28>)
1000c532:	8860      	ldrh	r0, [r4, #2]
1000c534:	4798      	blx	r3
1000c536:	2302      	movs	r3, #2
1000c538:	7881      	ldrb	r1, [r0, #2]
1000c53a:	2022      	movs	r0, #34	; 0x22
1000c53c:	4019      	ands	r1, r3
1000c53e:	d103      	bne.n	1000c548 <gatts_handle_write_req+0x20>
1000c540:	1c20      	adds	r0, r4, #0
1000c542:	4b04      	ldr	r3, [pc, #16]	; (1000c554 <gatts_handle_write_req+0x2c>)
1000c544:	4798      	blx	r3
1000c546:	201f      	movs	r0, #31
1000c548:	bd10      	pop	{r4, pc}
1000c54a:	46c0      	nop			; (mov r8, r8)
1000c54c:	1000db6d 	.word	0x1000db6d
1000c550:	1000c2c9 	.word	0x1000c2c9
1000c554:	1000c435 	.word	0x1000c435

1000c558 <init_l2cc_task_module>:
1000c558:	220a      	movs	r2, #10
1000c55a:	4b01      	ldr	r3, [pc, #4]	; (1000c560 <init_l2cc_task_module+0x8>)
1000c55c:	701a      	strb	r2, [r3, #0]
1000c55e:	4770      	bx	lr
1000c560:	10010f74 	.word	0x10010f74

1000c564 <l2cc_data_send_rsp_handler>:
1000c564:	b510      	push	{r4, lr}
1000c566:	7802      	ldrb	r2, [r0, #0]
1000c568:	700a      	strb	r2, [r1, #0]
1000c56a:	7883      	ldrb	r3, [r0, #2]
1000c56c:	7844      	ldrb	r4, [r0, #1]
1000c56e:	021b      	lsls	r3, r3, #8
1000c570:	4323      	orrs	r3, r4
1000c572:	804b      	strh	r3, [r1, #2]
1000c574:	7903      	ldrb	r3, [r0, #4]
1000c576:	78c0      	ldrb	r0, [r0, #3]
1000c578:	021b      	lsls	r3, r3, #8
1000c57a:	4303      	orrs	r3, r0
1000c57c:	808b      	strh	r3, [r1, #4]
1000c57e:	2a00      	cmp	r2, #0
1000c580:	d103      	bne.n	1000c58a <l2cc_data_send_rsp_handler+0x26>
1000c582:	4a02      	ldr	r2, [pc, #8]	; (1000c58c <l2cc_data_send_rsp_handler+0x28>)
1000c584:	7813      	ldrb	r3, [r2, #0]
1000c586:	3301      	adds	r3, #1
1000c588:	7013      	strb	r3, [r2, #0]
1000c58a:	bd10      	pop	{r4, pc}
1000c58c:	10010f74 	.word	0x10010f74

1000c590 <l2cc_data_received_handler>:
1000c590:	b508      	push	{r3, lr}
1000c592:	1c03      	adds	r3, r0, #0
1000c594:	7842      	ldrb	r2, [r0, #1]
1000c596:	7800      	ldrb	r0, [r0, #0]
1000c598:	0212      	lsls	r2, r2, #8
1000c59a:	4302      	orrs	r2, r0
1000c59c:	800a      	strh	r2, [r1, #0]
1000c59e:	78da      	ldrb	r2, [r3, #3]
1000c5a0:	7898      	ldrb	r0, [r3, #2]
1000c5a2:	0212      	lsls	r2, r2, #8
1000c5a4:	4302      	orrs	r2, r0
1000c5a6:	804a      	strh	r2, [r1, #2]
1000c5a8:	795a      	ldrb	r2, [r3, #5]
1000c5aa:	7918      	ldrb	r0, [r3, #4]
1000c5ac:	0212      	lsls	r2, r2, #8
1000c5ae:	4302      	orrs	r2, r0
1000c5b0:	808a      	strh	r2, [r1, #4]
1000c5b2:	1d88      	adds	r0, r1, #6
1000c5b4:	1d99      	adds	r1, r3, #6
1000c5b6:	4b01      	ldr	r3, [pc, #4]	; (1000c5bc <l2cc_data_received_handler+0x2c>)
1000c5b8:	4798      	blx	r3
1000c5ba:	bd08      	pop	{r3, pc}
1000c5bc:	1000f1ab 	.word	0x1000f1ab

1000c5c0 <at_ble_authenticate>:
1000c5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c5c2:	1c0c      	adds	r4, r1, #0
1000c5c4:	211f      	movs	r1, #31
1000c5c6:	b08b      	sub	sp, #44	; 0x2c
1000c5c8:	9307      	str	r3, [sp, #28]
1000c5ca:	ab02      	add	r3, sp, #8
1000c5cc:	18c9      	adds	r1, r1, r3
1000c5ce:	230f      	movs	r3, #15
1000c5d0:	700b      	strb	r3, [r1, #0]
1000c5d2:	4b40      	ldr	r3, [pc, #256]	; (1000c6d4 <at_ble_authenticate+0x114>)
1000c5d4:	1c05      	adds	r5, r0, #0
1000c5d6:	1c16      	adds	r6, r2, #0
1000c5d8:	4798      	blx	r3
1000c5da:	1c07      	adds	r7, r0, #0
1000c5dc:	2001      	movs	r0, #1
1000c5de:	2f07      	cmp	r7, #7
1000c5e0:	d875      	bhi.n	1000c6ce <at_ble_authenticate+0x10e>
1000c5e2:	2c00      	cmp	r4, #0
1000c5e4:	d113      	bne.n	1000c60e <at_ble_authenticate+0x4e>
1000c5e6:	2312      	movs	r3, #18
1000c5e8:	435f      	muls	r7, r3
1000c5ea:	4b3b      	ldr	r3, [pc, #236]	; (1000c6d8 <at_ble_authenticate+0x118>)
1000c5ec:	5cfb      	ldrb	r3, [r7, r3]
1000c5ee:	4283      	cmp	r3, r0
1000c5f0:	d001      	beq.n	1000c5f6 <at_ble_authenticate+0x36>
1000c5f2:	20cf      	movs	r0, #207	; 0xcf
1000c5f4:	e06b      	b.n	1000c6ce <at_ble_authenticate+0x10e>
1000c5f6:	9504      	str	r5, [sp, #16]
1000c5f8:	9400      	str	r4, [sp, #0]
1000c5fa:	9401      	str	r4, [sp, #4]
1000c5fc:	9402      	str	r4, [sp, #8]
1000c5fe:	9403      	str	r4, [sp, #12]
1000c600:	1c20      	adds	r0, r4, #0
1000c602:	1c21      	adds	r1, r4, #0
1000c604:	1c22      	adds	r2, r4, #0
1000c606:	1c23      	adds	r3, r4, #0
1000c608:	4d34      	ldr	r5, [pc, #208]	; (1000c6dc <at_ble_authenticate+0x11c>)
1000c60a:	47a8      	blx	r5
1000c60c:	e05e      	b.n	1000c6cc <at_ble_authenticate+0x10c>
1000c60e:	7922      	ldrb	r2, [r4, #4]
1000c610:	2a06      	cmp	r2, #6
1000c612:	d9ee      	bls.n	1000c5f2 <at_ble_authenticate+0x32>
1000c614:	7963      	ldrb	r3, [r4, #5]
1000c616:	2b10      	cmp	r3, #16
1000c618:	d8eb      	bhi.n	1000c5f2 <at_ble_authenticate+0x32>
1000c61a:	429a      	cmp	r2, r3
1000c61c:	d8e9      	bhi.n	1000c5f2 <at_ble_authenticate+0x32>
1000c61e:	7a23      	ldrb	r3, [r4, #8]
1000c620:	2b04      	cmp	r3, #4
1000c622:	d8e6      	bhi.n	1000c5f2 <at_ble_authenticate+0x32>
1000c624:	79a3      	ldrb	r3, [r4, #6]
1000c626:	2b07      	cmp	r3, #7
1000c628:	d8e3      	bhi.n	1000c5f2 <at_ble_authenticate+0x32>
1000c62a:	79e3      	ldrb	r3, [r4, #7]
1000c62c:	2b07      	cmp	r3, #7
1000c62e:	d8e0      	bhi.n	1000c5f2 <at_ble_authenticate+0x32>
1000c630:	78a3      	ldrb	r3, [r4, #2]
1000c632:	2b00      	cmp	r3, #0
1000c634:	d006      	beq.n	1000c644 <at_ble_authenticate+0x84>
1000c636:	2e00      	cmp	r6, #0
1000c638:	d0db      	beq.n	1000c5f2 <at_ble_authenticate+0x32>
1000c63a:	4829      	ldr	r0, [pc, #164]	; (1000c6e0 <at_ble_authenticate+0x120>)
1000c63c:	1c31      	adds	r1, r6, #0
1000c63e:	221c      	movs	r2, #28
1000c640:	4b28      	ldr	r3, [pc, #160]	; (1000c6e4 <at_ble_authenticate+0x124>)
1000c642:	4798      	blx	r3
1000c644:	9b07      	ldr	r3, [sp, #28]
1000c646:	2b00      	cmp	r3, #0
1000c648:	d005      	beq.n	1000c656 <at_ble_authenticate+0x96>
1000c64a:	4827      	ldr	r0, [pc, #156]	; (1000c6e8 <at_ble_authenticate+0x128>)
1000c64c:	1c19      	adds	r1, r3, #0
1000c64e:	309a      	adds	r0, #154	; 0x9a
1000c650:	2210      	movs	r2, #16
1000c652:	4b24      	ldr	r3, [pc, #144]	; (1000c6e4 <at_ble_authenticate+0x124>)
1000c654:	4798      	blx	r3
1000c656:	7863      	ldrb	r3, [r4, #1]
1000c658:	78a2      	ldrb	r2, [r4, #2]
1000c65a:	009b      	lsls	r3, r3, #2
1000c65c:	4313      	orrs	r3, r2
1000c65e:	2212      	movs	r2, #18
1000c660:	4357      	muls	r7, r2
1000c662:	4a1d      	ldr	r2, [pc, #116]	; (1000c6d8 <at_ble_authenticate+0x118>)
1000c664:	b2db      	uxtb	r3, r3
1000c666:	5cba      	ldrb	r2, [r7, r2]
1000c668:	2a00      	cmp	r2, #0
1000c66a:	d116      	bne.n	1000c69a <at_ble_authenticate+0xda>
1000c66c:	79a0      	ldrb	r0, [r4, #6]
1000c66e:	0742      	lsls	r2, r0, #29
1000c670:	d502      	bpl.n	1000c678 <at_ble_authenticate+0xb8>
1000c672:	9a07      	ldr	r2, [sp, #28]
1000c674:	2a00      	cmp	r2, #0
1000c676:	d0bc      	beq.n	1000c5f2 <at_ble_authenticate+0x32>
1000c678:	07c2      	lsls	r2, r0, #31
1000c67a:	d501      	bpl.n	1000c680 <at_ble_authenticate+0xc0>
1000c67c:	2e00      	cmp	r6, #0
1000c67e:	d0b8      	beq.n	1000c5f2 <at_ble_authenticate+0x32>
1000c680:	7966      	ldrb	r6, [r4, #5]
1000c682:	7821      	ldrb	r1, [r4, #0]
1000c684:	78e2      	ldrb	r2, [r4, #3]
1000c686:	9600      	str	r6, [sp, #0]
1000c688:	9001      	str	r0, [sp, #4]
1000c68a:	79e0      	ldrb	r0, [r4, #7]
1000c68c:	9002      	str	r0, [sp, #8]
1000c68e:	7a20      	ldrb	r0, [r4, #8]
1000c690:	4c16      	ldr	r4, [pc, #88]	; (1000c6ec <at_ble_authenticate+0x12c>)
1000c692:	9003      	str	r0, [sp, #12]
1000c694:	1c28      	adds	r0, r5, #0
1000c696:	47a0      	blx	r4
1000c698:	e018      	b.n	1000c6cc <at_ble_authenticate+0x10c>
1000c69a:	2a01      	cmp	r2, #1
1000c69c:	d1a9      	bne.n	1000c5f2 <at_ble_authenticate+0x32>
1000c69e:	79e0      	ldrb	r0, [r4, #7]
1000c6a0:	0742      	lsls	r2, r0, #29
1000c6a2:	d502      	bpl.n	1000c6aa <at_ble_authenticate+0xea>
1000c6a4:	9a07      	ldr	r2, [sp, #28]
1000c6a6:	2a00      	cmp	r2, #0
1000c6a8:	d0a3      	beq.n	1000c5f2 <at_ble_authenticate+0x32>
1000c6aa:	07c2      	lsls	r2, r0, #31
1000c6ac:	d501      	bpl.n	1000c6b2 <at_ble_authenticate+0xf2>
1000c6ae:	2e00      	cmp	r6, #0
1000c6b0:	d09f      	beq.n	1000c5f2 <at_ble_authenticate+0x32>
1000c6b2:	7966      	ldrb	r6, [r4, #5]
1000c6b4:	7821      	ldrb	r1, [r4, #0]
1000c6b6:	78e2      	ldrb	r2, [r4, #3]
1000c6b8:	9600      	str	r6, [sp, #0]
1000c6ba:	79a6      	ldrb	r6, [r4, #6]
1000c6bc:	9002      	str	r0, [sp, #8]
1000c6be:	9601      	str	r6, [sp, #4]
1000c6c0:	7a20      	ldrb	r0, [r4, #8]
1000c6c2:	9504      	str	r5, [sp, #16]
1000c6c4:	9003      	str	r0, [sp, #12]
1000c6c6:	4c05      	ldr	r4, [pc, #20]	; (1000c6dc <at_ble_authenticate+0x11c>)
1000c6c8:	2001      	movs	r0, #1
1000c6ca:	47a0      	blx	r4
1000c6cc:	2000      	movs	r0, #0
1000c6ce:	b00b      	add	sp, #44	; 0x2c
1000c6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c6d2:	46c0      	nop			; (mov r8, r8)
1000c6d4:	1000cac1 	.word	0x1000cac1
1000c6d8:	10013726 	.word	0x10013726
1000c6dc:	1000d031 	.word	0x1000d031
1000c6e0:	10013834 	.word	0x10013834
1000c6e4:	1000f1ab 	.word	0x1000f1ab
1000c6e8:	100137b6 	.word	0x100137b6
1000c6ec:	1000ce11 	.word	0x1000ce11

1000c6f0 <at_ble_pair_key_reply>:
1000c6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c6f2:	b085      	sub	sp, #20
1000c6f4:	1c05      	adds	r5, r0, #0
1000c6f6:	1c0c      	adds	r4, r1, #0
1000c6f8:	1c16      	adds	r6, r2, #0
1000c6fa:	2100      	movs	r1, #0
1000c6fc:	4668      	mov	r0, sp
1000c6fe:	2210      	movs	r2, #16
1000c700:	4b18      	ldr	r3, [pc, #96]	; (1000c764 <at_ble_pair_key_reply+0x74>)
1000c702:	4798      	blx	r3
1000c704:	2101      	movs	r1, #1
1000c706:	2e00      	cmp	r6, #0
1000c708:	d101      	bne.n	1000c70e <at_ble_pair_key_reply+0x1e>
1000c70a:	1c31      	adds	r1, r6, #0
1000c70c:	466e      	mov	r6, sp
1000c70e:	2c00      	cmp	r4, #0
1000c710:	d116      	bne.n	1000c740 <at_ble_pair_key_reply+0x50>
1000c712:	2701      	movs	r7, #1
1000c714:	1c23      	adds	r3, r4, #0
1000c716:	1d70      	adds	r0, r6, #5
1000c718:	3e01      	subs	r6, #1
1000c71a:	7802      	ldrb	r2, [r0, #0]
1000c71c:	3801      	subs	r0, #1
1000c71e:	3a30      	subs	r2, #48	; 0x30
1000c720:	437a      	muls	r2, r7
1000c722:	189b      	adds	r3, r3, r2
1000c724:	220a      	movs	r2, #10
1000c726:	4357      	muls	r7, r2
1000c728:	42b0      	cmp	r0, r6
1000c72a:	d1f6      	bne.n	1000c71a <at_ble_pair_key_reply+0x2a>
1000c72c:	466a      	mov	r2, sp
1000c72e:	4668      	mov	r0, sp
1000c730:	7013      	strb	r3, [r2, #0]
1000c732:	0a1a      	lsrs	r2, r3, #8
1000c734:	7042      	strb	r2, [r0, #1]
1000c736:	0c1a      	lsrs	r2, r3, #16
1000c738:	0e1b      	lsrs	r3, r3, #24
1000c73a:	7082      	strb	r2, [r0, #2]
1000c73c:	70c3      	strb	r3, [r0, #3]
1000c73e:	e009      	b.n	1000c754 <at_ble_pair_key_reply+0x64>
1000c740:	20cf      	movs	r0, #207	; 0xcf
1000c742:	2c01      	cmp	r4, #1
1000c744:	d10c      	bne.n	1000c760 <at_ble_pair_key_reply+0x70>
1000c746:	2300      	movs	r3, #0
1000c748:	4668      	mov	r0, sp
1000c74a:	5cf2      	ldrb	r2, [r6, r3]
1000c74c:	54c2      	strb	r2, [r0, r3]
1000c74e:	3301      	adds	r3, #1
1000c750:	2b10      	cmp	r3, #16
1000c752:	d1f9      	bne.n	1000c748 <at_ble_pair_key_reply+0x58>
1000c754:	2004      	movs	r0, #4
1000c756:	466a      	mov	r2, sp
1000c758:	1c2b      	adds	r3, r5, #0
1000c75a:	4c03      	ldr	r4, [pc, #12]	; (1000c768 <at_ble_pair_key_reply+0x78>)
1000c75c:	47a0      	blx	r4
1000c75e:	2000      	movs	r0, #0
1000c760:	b005      	add	sp, #20
1000c762:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c764:	1000f1bd 	.word	0x1000f1bd
1000c768:	1000d0ad 	.word	0x1000d0ad

1000c76c <at_ble_send_slave_sec_request>:
1000c76c:	b570      	push	{r4, r5, r6, lr}
1000c76e:	4b0c      	ldr	r3, [pc, #48]	; (1000c7a0 <at_ble_send_slave_sec_request+0x34>)
1000c770:	1c0e      	adds	r6, r1, #0
1000c772:	2100      	movs	r1, #0
1000c774:	1c05      	adds	r5, r0, #0
1000c776:	1c14      	adds	r4, r2, #0
1000c778:	4798      	blx	r3
1000c77a:	2301      	movs	r3, #1
1000c77c:	2807      	cmp	r0, #7
1000c77e:	d80d      	bhi.n	1000c79c <at_ble_send_slave_sec_request+0x30>
1000c780:	3311      	adds	r3, #17
1000c782:	4358      	muls	r0, r3
1000c784:	4b07      	ldr	r3, [pc, #28]	; (1000c7a4 <at_ble_send_slave_sec_request+0x38>)
1000c786:	5cc2      	ldrb	r2, [r0, r3]
1000c788:	23e0      	movs	r3, #224	; 0xe0
1000c78a:	2a01      	cmp	r2, #1
1000c78c:	d106      	bne.n	1000c79c <at_ble_send_slave_sec_request+0x30>
1000c78e:	00b1      	lsls	r1, r6, #2
1000c790:	430c      	orrs	r4, r1
1000c792:	4b05      	ldr	r3, [pc, #20]	; (1000c7a8 <at_ble_send_slave_sec_request+0x3c>)
1000c794:	b2e1      	uxtb	r1, r4
1000c796:	1c28      	adds	r0, r5, #0
1000c798:	4798      	blx	r3
1000c79a:	2300      	movs	r3, #0
1000c79c:	1c18      	adds	r0, r3, #0
1000c79e:	bd70      	pop	{r4, r5, r6, pc}
1000c7a0:	1000cac1 	.word	0x1000cac1
1000c7a4:	10013726 	.word	0x10013726
1000c7a8:	1000d0fd 	.word	0x1000d0fd

1000c7ac <at_ble_encryption_start>:
1000c7ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c7ae:	23cf      	movs	r3, #207	; 0xcf
1000c7b0:	2900      	cmp	r1, #0
1000c7b2:	d02b      	beq.n	1000c80c <at_ble_encryption_start+0x60>
1000c7b4:	2a05      	cmp	r2, #5
1000c7b6:	d829      	bhi.n	1000c80c <at_ble_encryption_start+0x60>
1000c7b8:	2701      	movs	r7, #1
1000c7ba:	1c3d      	adds	r5, r7, #0
1000c7bc:	2433      	movs	r4, #51	; 0x33
1000c7be:	4095      	lsls	r5, r2
1000c7c0:	4225      	tst	r5, r4
1000c7c2:	d023      	beq.n	1000c80c <at_ble_encryption_start+0x60>
1000c7c4:	7e8c      	ldrb	r4, [r1, #26]
1000c7c6:	3c07      	subs	r4, #7
1000c7c8:	2c09      	cmp	r4, #9
1000c7ca:	d81f      	bhi.n	1000c80c <at_ble_encryption_start+0x60>
1000c7cc:	4b10      	ldr	r3, [pc, #64]	; (1000c810 <at_ble_encryption_start+0x64>)
1000c7ce:	1c0c      	adds	r4, r1, #0
1000c7d0:	2100      	movs	r1, #0
1000c7d2:	1c15      	adds	r5, r2, #0
1000c7d4:	1c06      	adds	r6, r0, #0
1000c7d6:	4798      	blx	r3
1000c7d8:	1c3b      	adds	r3, r7, #0
1000c7da:	2807      	cmp	r0, #7
1000c7dc:	d816      	bhi.n	1000c80c <at_ble_encryption_start+0x60>
1000c7de:	2312      	movs	r3, #18
1000c7e0:	4358      	muls	r0, r3
1000c7e2:	4b0c      	ldr	r3, [pc, #48]	; (1000c814 <at_ble_encryption_start+0x68>)
1000c7e4:	5cc7      	ldrb	r7, [r0, r3]
1000c7e6:	23e0      	movs	r3, #224	; 0xe0
1000c7e8:	2f00      	cmp	r7, #0
1000c7ea:	d10f      	bne.n	1000c80c <at_ble_encryption_start+0x60>
1000c7ec:	1c21      	adds	r1, r4, #0
1000c7ee:	221c      	movs	r2, #28
1000c7f0:	4b09      	ldr	r3, [pc, #36]	; (1000c818 <at_ble_encryption_start+0x6c>)
1000c7f2:	480a      	ldr	r0, [pc, #40]	; (1000c81c <at_ble_encryption_start+0x70>)
1000c7f4:	4798      	blx	r3
1000c7f6:	1c23      	adds	r3, r4, #0
1000c7f8:	7ea1      	ldrb	r1, [r4, #26]
1000c7fa:	8a22      	ldrh	r2, [r4, #16]
1000c7fc:	3312      	adds	r3, #18
1000c7fe:	9100      	str	r1, [sp, #0]
1000c800:	9501      	str	r5, [sp, #4]
1000c802:	1c21      	adds	r1, r4, #0
1000c804:	1c30      	adds	r0, r6, #0
1000c806:	4c06      	ldr	r4, [pc, #24]	; (1000c820 <at_ble_encryption_start+0x74>)
1000c808:	47a0      	blx	r4
1000c80a:	1c3b      	adds	r3, r7, #0
1000c80c:	1c18      	adds	r0, r3, #0
1000c80e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000c810:	1000cac1 	.word	0x1000cac1
1000c814:	10013726 	.word	0x10013726
1000c818:	1000f1ab 	.word	0x1000f1ab
1000c81c:	10013834 	.word	0x10013834
1000c820:	1000d13d 	.word	0x1000d13d

1000c824 <at_ble_encryption_request_reply>:
1000c824:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000c826:	24cf      	movs	r4, #207	; 0xcf
1000c828:	2b00      	cmp	r3, #0
1000c82a:	d011      	beq.n	1000c850 <at_ble_encryption_request_reply+0x2c>
1000c82c:	2a00      	cmp	r2, #0
1000c82e:	d00a      	beq.n	1000c846 <at_ble_encryption_request_reply+0x22>
1000c830:	2905      	cmp	r1, #5
1000c832:	d80d      	bhi.n	1000c850 <at_ble_encryption_request_reply+0x2c>
1000c834:	2501      	movs	r5, #1
1000c836:	2633      	movs	r6, #51	; 0x33
1000c838:	408d      	lsls	r5, r1
1000c83a:	4235      	tst	r5, r6
1000c83c:	d008      	beq.n	1000c850 <at_ble_encryption_request_reply+0x2c>
1000c83e:	7e9d      	ldrb	r5, [r3, #26]
1000c840:	3d07      	subs	r5, #7
1000c842:	2d09      	cmp	r5, #9
1000c844:	d804      	bhi.n	1000c850 <at_ble_encryption_request_reply+0x2c>
1000c846:	7e9c      	ldrb	r4, [r3, #26]
1000c848:	9400      	str	r4, [sp, #0]
1000c84a:	4c02      	ldr	r4, [pc, #8]	; (1000c854 <at_ble_encryption_request_reply+0x30>)
1000c84c:	47a0      	blx	r4
1000c84e:	2400      	movs	r4, #0
1000c850:	1c20      	adds	r0, r4, #0
1000c852:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000c854:	1000d1f9 	.word	0x1000d1f9

1000c858 <rx_callback>:
1000c858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c85a:	8883      	ldrh	r3, [r0, #4]
1000c85c:	1c01      	adds	r1, r0, #0
1000c85e:	9301      	str	r3, [sp, #4]
1000c860:	88c5      	ldrh	r5, [r0, #6]
1000c862:	8806      	ldrh	r6, [r0, #0]
1000c864:	2d00      	cmp	r5, #0
1000c866:	d10f      	bne.n	1000c888 <rx_callback+0x30>
1000c868:	1c19      	adds	r1, r3, #0
1000c86a:	1c30      	adds	r0, r6, #0
1000c86c:	4b19      	ldr	r3, [pc, #100]	; (1000c8d4 <rx_callback+0x7c>)
1000c86e:	1c2a      	adds	r2, r5, #0
1000c870:	4798      	blx	r3
1000c872:	1e03      	subs	r3, r0, #0
1000c874:	d105      	bne.n	1000c882 <rx_callback+0x2a>
1000c876:	1c30      	adds	r0, r6, #0
1000c878:	9901      	ldr	r1, [sp, #4]
1000c87a:	1c1a      	adds	r2, r3, #0
1000c87c:	4c16      	ldr	r4, [pc, #88]	; (1000c8d8 <rx_callback+0x80>)
1000c87e:	47a0      	blx	r4
1000c880:	e027      	b.n	1000c8d2 <rx_callback+0x7a>
1000c882:	4b16      	ldr	r3, [pc, #88]	; (1000c8dc <rx_callback+0x84>)
1000c884:	4798      	blx	r3
1000c886:	e024      	b.n	1000c8d2 <rx_callback+0x7a>
1000c888:	4c15      	ldr	r4, [pc, #84]	; (1000c8e0 <rx_callback+0x88>)
1000c88a:	4a16      	ldr	r2, [pc, #88]	; (1000c8e4 <rx_callback+0x8c>)
1000c88c:	6823      	ldr	r3, [r4, #0]
1000c88e:	6812      	ldr	r2, [r2, #0]
1000c890:	18eb      	adds	r3, r5, r3
1000c892:	4293      	cmp	r3, r2
1000c894:	d901      	bls.n	1000c89a <rx_callback+0x42>
1000c896:	2300      	movs	r3, #0
1000c898:	6023      	str	r3, [r4, #0]
1000c89a:	4f13      	ldr	r7, [pc, #76]	; (1000c8e8 <rx_callback+0x90>)
1000c89c:	6822      	ldr	r2, [r4, #0]
1000c89e:	683b      	ldr	r3, [r7, #0]
1000c8a0:	3108      	adds	r1, #8
1000c8a2:	1898      	adds	r0, r3, r2
1000c8a4:	1c2a      	adds	r2, r5, #0
1000c8a6:	4b11      	ldr	r3, [pc, #68]	; (1000c8ec <rx_callback+0x94>)
1000c8a8:	4798      	blx	r3
1000c8aa:	683b      	ldr	r3, [r7, #0]
1000c8ac:	6822      	ldr	r2, [r4, #0]
1000c8ae:	1c30      	adds	r0, r6, #0
1000c8b0:	189a      	adds	r2, r3, r2
1000c8b2:	9901      	ldr	r1, [sp, #4]
1000c8b4:	4b07      	ldr	r3, [pc, #28]	; (1000c8d4 <rx_callback+0x7c>)
1000c8b6:	4798      	blx	r3
1000c8b8:	2800      	cmp	r0, #0
1000c8ba:	d1e2      	bne.n	1000c882 <rx_callback+0x2a>
1000c8bc:	6823      	ldr	r3, [r4, #0]
1000c8be:	683a      	ldr	r2, [r7, #0]
1000c8c0:	1c30      	adds	r0, r6, #0
1000c8c2:	18d2      	adds	r2, r2, r3
1000c8c4:	9901      	ldr	r1, [sp, #4]
1000c8c6:	1c2b      	adds	r3, r5, #0
1000c8c8:	4e03      	ldr	r6, [pc, #12]	; (1000c8d8 <rx_callback+0x80>)
1000c8ca:	47b0      	blx	r6
1000c8cc:	6823      	ldr	r3, [r4, #0]
1000c8ce:	18ed      	adds	r5, r5, r3
1000c8d0:	6025      	str	r5, [r4, #0]
1000c8d2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000c8d4:	1000b585 	.word	0x1000b585
1000c8d8:	1000b4fd 	.word	0x1000b4fd
1000c8dc:	1000b215 	.word	0x1000b215
1000c8e0:	10013890 	.word	0x10013890
1000c8e4:	10012a14 	.word	0x10012a14
1000c8e8:	10012a10 	.word	0x10012a10
1000c8ec:	1000f1ab 	.word	0x1000f1ab

1000c8f0 <interface_send>:
1000c8f0:	b508      	push	{r3, lr}
1000c8f2:	4b02      	ldr	r3, [pc, #8]	; (1000c8fc <interface_send+0xc>)
1000c8f4:	4798      	blx	r3
1000c8f6:	2000      	movs	r0, #0
1000c8f8:	bd08      	pop	{r3, pc}
1000c8fa:	46c0      	nop			; (mov r8, r8)
1000c8fc:	1000af4d 	.word	0x1000af4d

1000c900 <interface_init>:
1000c900:	2280      	movs	r2, #128	; 0x80
1000c902:	b510      	push	{r4, lr}
1000c904:	2100      	movs	r1, #0
1000c906:	1c04      	adds	r4, r0, #0
1000c908:	0092      	lsls	r2, r2, #2
1000c90a:	4b08      	ldr	r3, [pc, #32]	; (1000c92c <interface_init+0x2c>)
1000c90c:	4808      	ldr	r0, [pc, #32]	; (1000c930 <interface_init+0x30>)
1000c90e:	4798      	blx	r3
1000c910:	2200      	movs	r2, #0
1000c912:	4b08      	ldr	r3, [pc, #32]	; (1000c934 <interface_init+0x34>)
1000c914:	601a      	str	r2, [r3, #0]
1000c916:	4a08      	ldr	r2, [pc, #32]	; (1000c938 <interface_init+0x38>)
1000c918:	4b08      	ldr	r3, [pc, #32]	; (1000c93c <interface_init+0x3c>)
1000c91a:	601a      	str	r2, [r3, #0]
1000c91c:	4b08      	ldr	r3, [pc, #32]	; (1000c940 <interface_init+0x40>)
1000c91e:	6922      	ldr	r2, [r4, #16]
1000c920:	601a      	str	r2, [r3, #0]
1000c922:	6962      	ldr	r2, [r4, #20]
1000c924:	4b07      	ldr	r3, [pc, #28]	; (1000c944 <interface_init+0x44>)
1000c926:	601a      	str	r2, [r3, #0]
1000c928:	bd10      	pop	{r4, pc}
1000c92a:	46c0      	nop			; (mov r8, r8)
1000c92c:	1000f1bd 	.word	0x1000f1bd
1000c930:	10013a94 	.word	0x10013a94
1000c934:	10013890 	.word	0x10013890
1000c938:	10013894 	.word	0x10013894
1000c93c:	10010f78 	.word	0x10010f78
1000c940:	10012a10 	.word	0x10012a10
1000c944:	10012a14 	.word	0x10012a14

1000c948 <platform_cmd_cmpl_signal>:
1000c948:	2201      	movs	r2, #1
1000c94a:	4b01      	ldr	r3, [pc, #4]	; (1000c950 <platform_cmd_cmpl_signal+0x8>)
1000c94c:	601a      	str	r2, [r3, #0]
1000c94e:	4770      	bx	lr
1000c950:	10012a18 	.word	0x10012a18

1000c954 <platform_cmd_cmpl_wait>:
1000c954:	b510      	push	{r4, lr}
1000c956:	1c04      	adds	r4, r0, #0
1000c958:	4b07      	ldr	r3, [pc, #28]	; (1000c978 <platform_cmd_cmpl_wait+0x24>)
1000c95a:	681a      	ldr	r2, [r3, #0]
1000c95c:	2a01      	cmp	r2, #1
1000c95e:	d003      	beq.n	1000c968 <platform_cmd_cmpl_wait+0x14>
1000c960:	4b06      	ldr	r3, [pc, #24]	; (1000c97c <platform_cmd_cmpl_wait+0x28>)
1000c962:	2000      	movs	r0, #0
1000c964:	4798      	blx	r3
1000c966:	e7f7      	b.n	1000c958 <platform_cmd_cmpl_wait+0x4>
1000c968:	6819      	ldr	r1, [r3, #0]
1000c96a:	2901      	cmp	r1, #1
1000c96c:	d102      	bne.n	1000c974 <platform_cmd_cmpl_wait+0x20>
1000c96e:	2200      	movs	r2, #0
1000c970:	601a      	str	r2, [r3, #0]
1000c972:	e000      	b.n	1000c976 <platform_cmd_cmpl_wait+0x22>
1000c974:	7022      	strb	r2, [r4, #0]
1000c976:	bd10      	pop	{r4, pc}
1000c978:	10012a18 	.word	0x10012a18
1000c97c:	1000af9d 	.word	0x1000af9d

1000c980 <start_timer>:
1000c980:	4770      	bx	lr

1000c982 <stop_timer>:
1000c982:	4770      	bx	lr

1000c984 <dbg_le_set_bd_addr_req_handler>:
1000c984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c986:	466b      	mov	r3, sp
1000c988:	1dde      	adds	r6, r3, #7
1000c98a:	2300      	movs	r3, #0
1000c98c:	7033      	strb	r3, [r6, #0]
1000c98e:	230f      	movs	r3, #15
1000c990:	4c13      	ldr	r4, [pc, #76]	; (1000c9e0 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000c992:	2703      	movs	r7, #3
1000c994:	7023      	strb	r3, [r4, #0]
1000c996:	2300      	movs	r3, #0
1000c998:	70e3      	strb	r3, [r4, #3]
1000c99a:	4b12      	ldr	r3, [pc, #72]	; (1000c9e4 <dbg_le_set_bd_addr_req_handler+0x60>)
1000c99c:	1c01      	adds	r1, r0, #0
1000c99e:	881a      	ldrh	r2, [r3, #0]
1000c9a0:	881b      	ldrh	r3, [r3, #0]
1000c9a2:	7122      	strb	r2, [r4, #4]
1000c9a4:	0a1b      	lsrs	r3, r3, #8
1000c9a6:	2206      	movs	r2, #6
1000c9a8:	7163      	strb	r3, [r4, #5]
1000c9aa:	480f      	ldr	r0, [pc, #60]	; (1000c9e8 <dbg_le_set_bd_addr_req_handler+0x64>)
1000c9ac:	4b0f      	ldr	r3, [pc, #60]	; (1000c9ec <dbg_le_set_bd_addr_req_handler+0x68>)
1000c9ae:	7067      	strb	r7, [r4, #1]
1000c9b0:	70a7      	strb	r7, [r4, #2]
1000c9b2:	4798      	blx	r3
1000c9b4:	4d0e      	ldr	r5, [pc, #56]	; (1000c9f0 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000c9b6:	4b0f      	ldr	r3, [pc, #60]	; (1000c9f4 <dbg_le_set_bd_addr_req_handler+0x70>)
1000c9b8:	210e      	movs	r1, #14
1000c9ba:	802b      	strh	r3, [r5, #0]
1000c9bc:	2306      	movs	r3, #6
1000c9be:	71a3      	strb	r3, [r4, #6]
1000c9c0:	2300      	movs	r3, #0
1000c9c2:	1c20      	adds	r0, r4, #0
1000c9c4:	71e3      	strb	r3, [r4, #7]
1000c9c6:	4b0c      	ldr	r3, [pc, #48]	; (1000c9f8 <dbg_le_set_bd_addr_req_handler+0x74>)
1000c9c8:	80af      	strh	r7, [r5, #4]
1000c9ca:	4798      	blx	r3
1000c9cc:	1c30      	adds	r0, r6, #0
1000c9ce:	4b0b      	ldr	r3, [pc, #44]	; (1000c9fc <dbg_le_set_bd_addr_req_handler+0x78>)
1000c9d0:	4798      	blx	r3
1000c9d2:	7833      	ldrb	r3, [r6, #0]
1000c9d4:	20e2      	movs	r0, #226	; 0xe2
1000c9d6:	2b00      	cmp	r3, #0
1000c9d8:	d101      	bne.n	1000c9de <dbg_le_set_bd_addr_req_handler+0x5a>
1000c9da:	68ab      	ldr	r3, [r5, #8]
1000c9dc:	7818      	ldrb	r0, [r3, #0]
1000c9de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000c9e0:	10013a94 	.word	0x10013a94
1000c9e4:	10013724 	.word	0x10013724
1000c9e8:	10013a9c 	.word	0x10013a9c
1000c9ec:	1000f1ab 	.word	0x1000f1ab
1000c9f0:	10013718 	.word	0x10013718
1000c9f4:	00000329 	.word	0x00000329
1000c9f8:	1000c8f1 	.word	0x1000c8f1
1000c9fc:	1000c955 	.word	0x1000c955

1000ca00 <gapc_get_dev_info_cfm.constprop.1>:
1000ca00:	b538      	push	{r3, r4, r5, lr}
1000ca02:	230b      	movs	r3, #11
1000ca04:	4c27      	ldr	r4, [pc, #156]	; (1000caa4 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000ca06:	7023      	strb	r3, [r4, #0]
1000ca08:	3303      	adds	r3, #3
1000ca0a:	7063      	strb	r3, [r4, #1]
1000ca0c:	3329      	adds	r3, #41	; 0x29
1000ca0e:	70a3      	strb	r3, [r4, #2]
1000ca10:	4b25      	ldr	r3, [pc, #148]	; (1000caa8 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000ca12:	70e1      	strb	r1, [r4, #3]
1000ca14:	881a      	ldrh	r2, [r3, #0]
1000ca16:	881b      	ldrh	r3, [r3, #0]
1000ca18:	7122      	strb	r2, [r4, #4]
1000ca1a:	0a1b      	lsrs	r3, r3, #8
1000ca1c:	7163      	strb	r3, [r4, #5]
1000ca1e:	2300      	movs	r3, #0
1000ca20:	7220      	strb	r0, [r4, #8]
1000ca22:	7263      	strb	r3, [r4, #9]
1000ca24:	2801      	cmp	r0, #1
1000ca26:	d02b      	beq.n	1000ca80 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000ca28:	4298      	cmp	r0, r3
1000ca2a:	d01b      	beq.n	1000ca64 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000ca2c:	2802      	cmp	r0, #2
1000ca2e:	d12f      	bne.n	1000ca90 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000ca30:	4b1e      	ldr	r3, [pc, #120]	; (1000caac <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000ca32:	2112      	movs	r1, #18
1000ca34:	1c1a      	adds	r2, r3, #0
1000ca36:	32ce      	adds	r2, #206	; 0xce
1000ca38:	8812      	ldrh	r2, [r2, #0]
1000ca3a:	72a2      	strb	r2, [r4, #10]
1000ca3c:	0a12      	lsrs	r2, r2, #8
1000ca3e:	72e2      	strb	r2, [r4, #11]
1000ca40:	1c1a      	adds	r2, r3, #0
1000ca42:	32d0      	adds	r2, #208	; 0xd0
1000ca44:	8812      	ldrh	r2, [r2, #0]
1000ca46:	7322      	strb	r2, [r4, #12]
1000ca48:	0a12      	lsrs	r2, r2, #8
1000ca4a:	7362      	strb	r2, [r4, #13]
1000ca4c:	1c1a      	adds	r2, r3, #0
1000ca4e:	32d2      	adds	r2, #210	; 0xd2
1000ca50:	8812      	ldrh	r2, [r2, #0]
1000ca52:	33d4      	adds	r3, #212	; 0xd4
1000ca54:	73a2      	strb	r2, [r4, #14]
1000ca56:	0a12      	lsrs	r2, r2, #8
1000ca58:	73e2      	strb	r2, [r4, #15]
1000ca5a:	881b      	ldrh	r3, [r3, #0]
1000ca5c:	7423      	strb	r3, [r4, #16]
1000ca5e:	0a1b      	lsrs	r3, r3, #8
1000ca60:	7463      	strb	r3, [r4, #17]
1000ca62:	e016      	b.n	1000ca92 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000ca64:	4b11      	ldr	r3, [pc, #68]	; (1000caac <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000ca66:	4912      	ldr	r1, [pc, #72]	; (1000cab0 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000ca68:	33aa      	adds	r3, #170	; 0xaa
1000ca6a:	881d      	ldrh	r5, [r3, #0]
1000ca6c:	4811      	ldr	r0, [pc, #68]	; (1000cab4 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000ca6e:	0a2b      	lsrs	r3, r5, #8
1000ca70:	72a5      	strb	r5, [r4, #10]
1000ca72:	72e3      	strb	r3, [r4, #11]
1000ca74:	1c2a      	adds	r2, r5, #0
1000ca76:	4b10      	ldr	r3, [pc, #64]	; (1000cab8 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000ca78:	350c      	adds	r5, #12
1000ca7a:	4798      	blx	r3
1000ca7c:	b2a9      	uxth	r1, r5
1000ca7e:	e008      	b.n	1000ca92 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000ca80:	4b0a      	ldr	r3, [pc, #40]	; (1000caac <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000ca82:	210c      	movs	r1, #12
1000ca84:	33cc      	adds	r3, #204	; 0xcc
1000ca86:	881b      	ldrh	r3, [r3, #0]
1000ca88:	72a3      	strb	r3, [r4, #10]
1000ca8a:	0a1b      	lsrs	r3, r3, #8
1000ca8c:	72e3      	strb	r3, [r4, #11]
1000ca8e:	e000      	b.n	1000ca92 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000ca90:	210a      	movs	r1, #10
1000ca92:	1c0b      	adds	r3, r1, #0
1000ca94:	3b08      	subs	r3, #8
1000ca96:	71a3      	strb	r3, [r4, #6]
1000ca98:	121b      	asrs	r3, r3, #8
1000ca9a:	71e3      	strb	r3, [r4, #7]
1000ca9c:	1c20      	adds	r0, r4, #0
1000ca9e:	4b07      	ldr	r3, [pc, #28]	; (1000cabc <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000caa0:	4798      	blx	r3
1000caa2:	bd38      	pop	{r3, r4, r5, pc}
1000caa4:	10013a94 	.word	0x10013a94
1000caa8:	10013724 	.word	0x10013724
1000caac:	100137b6 	.word	0x100137b6
1000cab0:	10013862 	.word	0x10013862
1000cab4:	10013aa0 	.word	0x10013aa0
1000cab8:	1000f1ab 	.word	0x1000f1ab
1000cabc:	1000c8f1 	.word	0x1000c8f1

1000cac0 <check_ConnData_idx_role>:
1000cac0:	4b0c      	ldr	r3, [pc, #48]	; (1000caf4 <check_ConnData_idx_role+0x34>)
1000cac2:	b570      	push	{r4, r5, r6, lr}
1000cac4:	1c04      	adds	r4, r0, #0
1000cac6:	2008      	movs	r0, #8
1000cac8:	429c      	cmp	r4, r3
1000caca:	d011      	beq.n	1000caf0 <check_ConnData_idx_role+0x30>
1000cacc:	2300      	movs	r3, #0
1000cace:	2212      	movs	r2, #18
1000cad0:	435a      	muls	r2, r3
1000cad2:	4d09      	ldr	r5, [pc, #36]	; (1000caf8 <check_ConnData_idx_role+0x38>)
1000cad4:	b2d8      	uxtb	r0, r3
1000cad6:	1956      	adds	r6, r2, r5
1000cad8:	8976      	ldrh	r6, [r6, #10]
1000cada:	42a6      	cmp	r6, r4
1000cadc:	d104      	bne.n	1000cae8 <check_ConnData_idx_role+0x28>
1000cade:	2900      	cmp	r1, #0
1000cae0:	d006      	beq.n	1000caf0 <check_ConnData_idx_role+0x30>
1000cae2:	5d53      	ldrb	r3, [r2, r5]
1000cae4:	700b      	strb	r3, [r1, #0]
1000cae6:	e003      	b.n	1000caf0 <check_ConnData_idx_role+0x30>
1000cae8:	3301      	adds	r3, #1
1000caea:	2b08      	cmp	r3, #8
1000caec:	d1ef      	bne.n	1000cace <check_ConnData_idx_role+0xe>
1000caee:	1c18      	adds	r0, r3, #0
1000caf0:	bd70      	pop	{r4, r5, r6, pc}
1000caf2:	46c0      	nop			; (mov r8, r8)
1000caf4:	0000ffff 	.word	0x0000ffff
1000caf8:	10013726 	.word	0x10013726

1000cafc <check_ConnData_emptyEntry>:
1000cafc:	2300      	movs	r3, #0
1000cafe:	2212      	movs	r2, #18
1000cb00:	435a      	muls	r2, r3
1000cb02:	4906      	ldr	r1, [pc, #24]	; (1000cb1c <check_ConnData_emptyEntry+0x20>)
1000cb04:	b2d8      	uxtb	r0, r3
1000cb06:	1852      	adds	r2, r2, r1
1000cb08:	8951      	ldrh	r1, [r2, #10]
1000cb0a:	4a05      	ldr	r2, [pc, #20]	; (1000cb20 <check_ConnData_emptyEntry+0x24>)
1000cb0c:	4291      	cmp	r1, r2
1000cb0e:	d003      	beq.n	1000cb18 <check_ConnData_emptyEntry+0x1c>
1000cb10:	3301      	adds	r3, #1
1000cb12:	2b08      	cmp	r3, #8
1000cb14:	d1f3      	bne.n	1000cafe <check_ConnData_emptyEntry+0x2>
1000cb16:	1c18      	adds	r0, r3, #0
1000cb18:	4770      	bx	lr
1000cb1a:	46c0      	nop			; (mov r8, r8)
1000cb1c:	10013726 	.word	0x10013726
1000cb20:	0000ffff 	.word	0x0000ffff

1000cb24 <gapc_cmp_evt>:
1000cb24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000cb26:	780b      	ldrb	r3, [r1, #0]
1000cb28:	1c05      	adds	r5, r0, #0
1000cb2a:	1e58      	subs	r0, r3, #1
1000cb2c:	784e      	ldrb	r6, [r1, #1]
1000cb2e:	280f      	cmp	r0, #15
1000cb30:	d85a      	bhi.n	1000cbe8 <gapc_cmp_evt+0xc4>
1000cb32:	1c14      	adds	r4, r2, #0
1000cb34:	f001 faaa 	bl	1000e08c <__gnu_thumb1_case_uqi>
1000cb38:	5858440a 	.word	0x5858440a
1000cb3c:	4b584444 	.word	0x4b584444
1000cb40:	0825122d 	.word	0x0825122d
1000cb44:	3e395858 	.word	0x3e395858
1000cb48:	203b      	movs	r0, #59	; 0x3b
1000cb4a:	e04e      	b.n	1000cbea <gapc_cmp_evt+0xc6>
1000cb4c:	203b      	movs	r0, #59	; 0x3b
1000cb4e:	2e00      	cmp	r6, #0
1000cb50:	d04b      	beq.n	1000cbea <gapc_cmp_evt+0xc6>
1000cb52:	0a2d      	lsrs	r5, r5, #8
1000cb54:	8015      	strh	r5, [r2, #0]
1000cb56:	7096      	strb	r6, [r2, #2]
1000cb58:	3835      	subs	r0, #53	; 0x35
1000cb5a:	e046      	b.n	1000cbea <gapc_cmp_evt+0xc6>
1000cb5c:	466b      	mov	r3, sp
1000cb5e:	1ddf      	adds	r7, r3, #7
1000cb60:	2301      	movs	r3, #1
1000cb62:	0a2d      	lsrs	r5, r5, #8
1000cb64:	703b      	strb	r3, [r7, #0]
1000cb66:	1c28      	adds	r0, r5, #0
1000cb68:	1c39      	adds	r1, r7, #0
1000cb6a:	4b20      	ldr	r3, [pc, #128]	; (1000cbec <gapc_cmp_evt+0xc8>)
1000cb6c:	4798      	blx	r3
1000cb6e:	2807      	cmp	r0, #7
1000cb70:	d803      	bhi.n	1000cb7a <gapc_cmp_evt+0x56>
1000cb72:	783b      	ldrb	r3, [r7, #0]
1000cb74:	203b      	movs	r0, #59	; 0x3b
1000cb76:	2b00      	cmp	r3, #0
1000cb78:	d037      	beq.n	1000cbea <gapc_cmp_evt+0xc6>
1000cb7a:	8065      	strh	r5, [r4, #2]
1000cb7c:	7126      	strb	r6, [r4, #4]
1000cb7e:	2009      	movs	r0, #9
1000cb80:	e033      	b.n	1000cbea <gapc_cmp_evt+0xc6>
1000cb82:	203b      	movs	r0, #59	; 0x3b
1000cb84:	2e00      	cmp	r6, #0
1000cb86:	d030      	beq.n	1000cbea <gapc_cmp_evt+0xc6>
1000cb88:	0a2d      	lsrs	r5, r5, #8
1000cb8a:	8015      	strh	r5, [r2, #0]
1000cb8c:	7096      	strb	r6, [r2, #2]
1000cb8e:	382d      	subs	r0, #45	; 0x2d
1000cb90:	e02b      	b.n	1000cbea <gapc_cmp_evt+0xc6>
1000cb92:	203b      	movs	r0, #59	; 0x3b
1000cb94:	2e00      	cmp	r6, #0
1000cb96:	d028      	beq.n	1000cbea <gapc_cmp_evt+0xc6>
1000cb98:	2300      	movs	r3, #0
1000cb9a:	0a2d      	lsrs	r5, r5, #8
1000cb9c:	8015      	strh	r5, [r2, #0]
1000cb9e:	7096      	strb	r6, [r2, #2]
1000cba0:	8093      	strh	r3, [r2, #4]
1000cba2:	80d3      	strh	r3, [r2, #6]
1000cba4:	8113      	strh	r3, [r2, #8]
1000cba6:	3834      	subs	r0, #52	; 0x34
1000cba8:	e01f      	b.n	1000cbea <gapc_cmp_evt+0xc6>
1000cbaa:	203b      	movs	r0, #59	; 0x3b
1000cbac:	2e00      	cmp	r6, #0
1000cbae:	d01c      	beq.n	1000cbea <gapc_cmp_evt+0xc6>
1000cbb0:	7216      	strb	r6, [r2, #8]
1000cbb2:	e003      	b.n	1000cbbc <gapc_cmp_evt+0x98>
1000cbb4:	203b      	movs	r0, #59	; 0x3b
1000cbb6:	2e00      	cmp	r6, #0
1000cbb8:	d017      	beq.n	1000cbea <gapc_cmp_evt+0xc6>
1000cbba:	7116      	strb	r6, [r2, #4]
1000cbbc:	3812      	subs	r0, #18
1000cbbe:	e014      	b.n	1000cbea <gapc_cmp_evt+0xc6>
1000cbc0:	203b      	movs	r0, #59	; 0x3b
1000cbc2:	2e00      	cmp	r6, #0
1000cbc4:	d011      	beq.n	1000cbea <gapc_cmp_evt+0xc6>
1000cbc6:	7093      	strb	r3, [r2, #2]
1000cbc8:	70d6      	strb	r6, [r2, #3]
1000cbca:	382a      	subs	r0, #42	; 0x2a
1000cbcc:	e00d      	b.n	1000cbea <gapc_cmp_evt+0xc6>
1000cbce:	203b      	movs	r0, #59	; 0x3b
1000cbd0:	2e00      	cmp	r6, #0
1000cbd2:	d00a      	beq.n	1000cbea <gapc_cmp_evt+0xc6>
1000cbd4:	0a2d      	lsrs	r5, r5, #8
1000cbd6:	7016      	strb	r6, [r2, #0]
1000cbd8:	8055      	strh	r5, [r2, #2]
1000cbda:	1d10      	adds	r0, r2, #4
1000cbdc:	2100      	movs	r1, #0
1000cbde:	2205      	movs	r2, #5
1000cbe0:	4b03      	ldr	r3, [pc, #12]	; (1000cbf0 <gapc_cmp_evt+0xcc>)
1000cbe2:	4798      	blx	r3
1000cbe4:	2012      	movs	r0, #18
1000cbe6:	e000      	b.n	1000cbea <gapc_cmp_evt+0xc6>
1000cbe8:	2000      	movs	r0, #0
1000cbea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000cbec:	1000cac1 	.word	0x1000cac1
1000cbf0:	1000f1bd 	.word	0x1000f1bd

1000cbf4 <gapc_connection_cfm_handler>:
1000cbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cbf6:	b085      	sub	sp, #20
1000cbf8:	1c1d      	adds	r5, r3, #0
1000cbfa:	ab0a      	add	r3, sp, #40	; 0x28
1000cbfc:	781b      	ldrb	r3, [r3, #0]
1000cbfe:	9201      	str	r2, [sp, #4]
1000cc00:	9302      	str	r3, [sp, #8]
1000cc02:	ab0b      	add	r3, sp, #44	; 0x2c
1000cc04:	781b      	ldrb	r3, [r3, #0]
1000cc06:	1c07      	adds	r7, r0, #0
1000cc08:	9303      	str	r3, [sp, #12]
1000cc0a:	ab0c      	add	r3, sp, #48	; 0x30
1000cc0c:	881a      	ldrh	r2, [r3, #0]
1000cc0e:	2302      	movs	r3, #2
1000cc10:	1c0e      	adds	r6, r1, #0
1000cc12:	4c23      	ldr	r4, [pc, #140]	; (1000cca0 <gapc_connection_cfm_handler+0xac>)
1000cc14:	1c39      	adds	r1, r7, #0
1000cc16:	7023      	strb	r3, [r4, #0]
1000cc18:	330c      	adds	r3, #12
1000cc1a:	7063      	strb	r3, [r4, #1]
1000cc1c:	70a3      	strb	r3, [r4, #2]
1000cc1e:	4b21      	ldr	r3, [pc, #132]	; (1000cca4 <gapc_connection_cfm_handler+0xb0>)
1000cc20:	70e2      	strb	r2, [r4, #3]
1000cc22:	881a      	ldrh	r2, [r3, #0]
1000cc24:	881b      	ldrh	r3, [r3, #0]
1000cc26:	7122      	strb	r2, [r4, #4]
1000cc28:	0a1b      	lsrs	r3, r3, #8
1000cc2a:	4f1f      	ldr	r7, [pc, #124]	; (1000cca8 <gapc_connection_cfm_handler+0xb4>)
1000cc2c:	2210      	movs	r2, #16
1000cc2e:	481f      	ldr	r0, [pc, #124]	; (1000ccac <gapc_connection_cfm_handler+0xb8>)
1000cc30:	7163      	strb	r3, [r4, #5]
1000cc32:	47b8      	blx	r7
1000cc34:	0a33      	lsrs	r3, r6, #8
1000cc36:	7626      	strb	r6, [r4, #24]
1000cc38:	7663      	strb	r3, [r4, #25]
1000cc3a:	9901      	ldr	r1, [sp, #4]
1000cc3c:	0c33      	lsrs	r3, r6, #16
1000cc3e:	2210      	movs	r2, #16
1000cc40:	0e36      	lsrs	r6, r6, #24
1000cc42:	481b      	ldr	r0, [pc, #108]	; (1000ccb0 <gapc_connection_cfm_handler+0xbc>)
1000cc44:	76a3      	strb	r3, [r4, #26]
1000cc46:	76e6      	strb	r6, [r4, #27]
1000cc48:	47b8      	blx	r7
1000cc4a:	1c23      	adds	r3, r4, #0
1000cc4c:	332c      	adds	r3, #44	; 0x2c
1000cc4e:	701d      	strb	r5, [r3, #0]
1000cc50:	1c23      	adds	r3, r4, #0
1000cc52:	0a2a      	lsrs	r2, r5, #8
1000cc54:	332d      	adds	r3, #45	; 0x2d
1000cc56:	701a      	strb	r2, [r3, #0]
1000cc58:	1c23      	adds	r3, r4, #0
1000cc5a:	0c2a      	lsrs	r2, r5, #16
1000cc5c:	332e      	adds	r3, #46	; 0x2e
1000cc5e:	701a      	strb	r2, [r3, #0]
1000cc60:	1c23      	adds	r3, r4, #0
1000cc62:	0e2d      	lsrs	r5, r5, #24
1000cc64:	332f      	adds	r3, #47	; 0x2f
1000cc66:	466a      	mov	r2, sp
1000cc68:	701d      	strb	r5, [r3, #0]
1000cc6a:	1c23      	adds	r3, r4, #0
1000cc6c:	7a12      	ldrb	r2, [r2, #8]
1000cc6e:	3330      	adds	r3, #48	; 0x30
1000cc70:	701a      	strb	r2, [r3, #0]
1000cc72:	1c23      	adds	r3, r4, #0
1000cc74:	2500      	movs	r5, #0
1000cc76:	3331      	adds	r3, #49	; 0x31
1000cc78:	466a      	mov	r2, sp
1000cc7a:	701d      	strb	r5, [r3, #0]
1000cc7c:	1c23      	adds	r3, r4, #0
1000cc7e:	7b12      	ldrb	r2, [r2, #12]
1000cc80:	3332      	adds	r3, #50	; 0x32
1000cc82:	701a      	strb	r2, [r3, #0]
1000cc84:	1c23      	adds	r3, r4, #0
1000cc86:	3333      	adds	r3, #51	; 0x33
1000cc88:	701d      	strb	r5, [r3, #0]
1000cc8a:	232c      	movs	r3, #44	; 0x2c
1000cc8c:	1c20      	adds	r0, r4, #0
1000cc8e:	71a3      	strb	r3, [r4, #6]
1000cc90:	2134      	movs	r1, #52	; 0x34
1000cc92:	4b08      	ldr	r3, [pc, #32]	; (1000ccb4 <gapc_connection_cfm_handler+0xc0>)
1000cc94:	71e5      	strb	r5, [r4, #7]
1000cc96:	4798      	blx	r3
1000cc98:	1c28      	adds	r0, r5, #0
1000cc9a:	b005      	add	sp, #20
1000cc9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cc9e:	46c0      	nop			; (mov r8, r8)
1000cca0:	10013a94 	.word	0x10013a94
1000cca4:	10013724 	.word	0x10013724
1000cca8:	1000f1ab 	.word	0x1000f1ab
1000ccac:	10013a9c 	.word	0x10013a9c
1000ccb0:	10013ab0 	.word	0x10013ab0
1000ccb4:	1000c8f1 	.word	0x1000c8f1

1000ccb8 <gapc_con_req_ind>:
1000ccb8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ccba:	7845      	ldrb	r5, [r0, #1]
1000ccbc:	7803      	ldrb	r3, [r0, #0]
1000ccbe:	4c30      	ldr	r4, [pc, #192]	; (1000cd80 <gapc_con_req_ind+0xc8>)
1000ccc0:	022d      	lsls	r5, r5, #8
1000ccc2:	431d      	orrs	r5, r3
1000ccc4:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000ccc6:	78c3      	ldrb	r3, [r0, #3]
1000ccc8:	7882      	ldrb	r2, [r0, #2]
1000ccca:	b08b      	sub	sp, #44	; 0x2c
1000cccc:	021b      	lsls	r3, r3, #8
1000ccce:	431a      	orrs	r2, r3
1000ccd0:	466b      	mov	r3, sp
1000ccd2:	9205      	str	r2, [sp, #20]
1000ccd4:	8a9b      	ldrh	r3, [r3, #20]
1000ccd6:	2120      	movs	r1, #32
1000ccd8:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000ccda:	7943      	ldrb	r3, [r0, #5]
1000ccdc:	7902      	ldrb	r2, [r0, #4]
1000ccde:	021b      	lsls	r3, r3, #8
1000cce0:	431a      	orrs	r2, r3
1000cce2:	466b      	mov	r3, sp
1000cce4:	9206      	str	r2, [sp, #24]
1000cce6:	8b1b      	ldrh	r3, [r3, #24]
1000cce8:	1c06      	adds	r6, r0, #0
1000ccea:	8623      	strh	r3, [r4, #48]	; 0x30
1000ccec:	79c3      	ldrb	r3, [r0, #7]
1000ccee:	7982      	ldrb	r2, [r0, #6]
1000ccf0:	021b      	lsls	r3, r3, #8
1000ccf2:	431a      	orrs	r2, r3
1000ccf4:	466b      	mov	r3, sp
1000ccf6:	9207      	str	r2, [sp, #28]
1000ccf8:	466a      	mov	r2, sp
1000ccfa:	8b9b      	ldrh	r3, [r3, #28]
1000ccfc:	1852      	adds	r2, r2, r1
1000ccfe:	8663      	strh	r3, [r4, #50]	; 0x32
1000cd00:	7a43      	ldrb	r3, [r0, #9]
1000cd02:	1c01      	adds	r1, r0, #0
1000cd04:	9308      	str	r3, [sp, #32]
1000cd06:	1c23      	adds	r3, r4, #0
1000cd08:	7812      	ldrb	r2, [r2, #0]
1000cd0a:	3377      	adds	r3, #119	; 0x77
1000cd0c:	3478      	adds	r4, #120	; 0x78
1000cd0e:	701a      	strb	r2, [r3, #0]
1000cd10:	310a      	adds	r1, #10
1000cd12:	2206      	movs	r2, #6
1000cd14:	4b1b      	ldr	r3, [pc, #108]	; (1000cd84 <gapc_con_req_ind+0xcc>)
1000cd16:	1c20      	adds	r0, r4, #0
1000cd18:	4798      	blx	r3
1000cd1a:	7c33      	ldrb	r3, [r6, #16]
1000cd1c:	9309      	str	r3, [sp, #36]	; 0x24
1000cd1e:	4b1a      	ldr	r3, [pc, #104]	; (1000cd88 <gapc_con_req_ind+0xd0>)
1000cd20:	4798      	blx	r3
1000cd22:	4e1a      	ldr	r6, [pc, #104]	; (1000cd8c <gapc_con_req_ind+0xd4>)
1000cd24:	1e07      	subs	r7, r0, #0
1000cd26:	2f07      	cmp	r7, #7
1000cd28:	d81b      	bhi.n	1000cd62 <gapc_con_req_ind+0xaa>
1000cd2a:	2312      	movs	r3, #18
1000cd2c:	4343      	muls	r3, r0
1000cd2e:	18f0      	adds	r0, r6, r3
1000cd30:	8145      	strh	r5, [r0, #10]
1000cd32:	4669      	mov	r1, sp
1000cd34:	2524      	movs	r5, #36	; 0x24
1000cd36:	1949      	adds	r1, r1, r5
1000cd38:	7809      	ldrb	r1, [r1, #0]
1000cd3a:	2206      	movs	r2, #6
1000cd3c:	54f1      	strb	r1, [r6, r3]
1000cd3e:	2120      	movs	r1, #32
1000cd40:	466b      	mov	r3, sp
1000cd42:	185b      	adds	r3, r3, r1
1000cd44:	781b      	ldrb	r3, [r3, #0]
1000cd46:	1c21      	adds	r1, r4, #0
1000cd48:	7043      	strb	r3, [r0, #1]
1000cd4a:	466b      	mov	r3, sp
1000cd4c:	8a9b      	ldrh	r3, [r3, #20]
1000cd4e:	3002      	adds	r0, #2
1000cd50:	8143      	strh	r3, [r0, #10]
1000cd52:	466b      	mov	r3, sp
1000cd54:	8b1b      	ldrh	r3, [r3, #24]
1000cd56:	8183      	strh	r3, [r0, #12]
1000cd58:	466b      	mov	r3, sp
1000cd5a:	8b9b      	ldrh	r3, [r3, #28]
1000cd5c:	81c3      	strh	r3, [r0, #14]
1000cd5e:	4b09      	ldr	r3, [pc, #36]	; (1000cd84 <gapc_con_req_ind+0xcc>)
1000cd60:	4798      	blx	r3
1000cd62:	2112      	movs	r1, #18
1000cd64:	2300      	movs	r3, #0
1000cd66:	434f      	muls	r7, r1
1000cd68:	9300      	str	r3, [sp, #0]
1000cd6a:	9301      	str	r3, [sp, #4]
1000cd6c:	19f6      	adds	r6, r6, r7
1000cd6e:	8971      	ldrh	r1, [r6, #10]
1000cd70:	4a07      	ldr	r2, [pc, #28]	; (1000cd90 <gapc_con_req_ind+0xd8>)
1000cd72:	9102      	str	r1, [sp, #8]
1000cd74:	1c10      	adds	r0, r2, #0
1000cd76:	1c19      	adds	r1, r3, #0
1000cd78:	4c06      	ldr	r4, [pc, #24]	; (1000cd94 <gapc_con_req_ind+0xdc>)
1000cd7a:	47a0      	blx	r4
1000cd7c:	b00b      	add	sp, #44	; 0x2c
1000cd7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cd80:	100137b6 	.word	0x100137b6
1000cd84:	1000f1ab 	.word	0x1000f1ab
1000cd88:	1000cafd 	.word	0x1000cafd
1000cd8c:	10013726 	.word	0x10013726
1000cd90:	10012a1c 	.word	0x10012a1c
1000cd94:	1000cbf5 	.word	0x1000cbf5

1000cd98 <gapc_disconnect_cmd_handler>:
1000cd98:	2204      	movs	r2, #4
1000cd9a:	b510      	push	{r4, lr}
1000cd9c:	4b0c      	ldr	r3, [pc, #48]	; (1000cdd0 <gapc_disconnect_cmd_handler+0x38>)
1000cd9e:	2400      	movs	r4, #0
1000cda0:	701a      	strb	r2, [r3, #0]
1000cda2:	320a      	adds	r2, #10
1000cda4:	705a      	strb	r2, [r3, #1]
1000cda6:	709a      	strb	r2, [r3, #2]
1000cda8:	4a0a      	ldr	r2, [pc, #40]	; (1000cdd4 <gapc_disconnect_cmd_handler+0x3c>)
1000cdaa:	70d9      	strb	r1, [r3, #3]
1000cdac:	8811      	ldrh	r1, [r2, #0]
1000cdae:	8812      	ldrh	r2, [r2, #0]
1000cdb0:	7119      	strb	r1, [r3, #4]
1000cdb2:	0a12      	lsrs	r2, r2, #8
1000cdb4:	715a      	strb	r2, [r3, #5]
1000cdb6:	2201      	movs	r2, #1
1000cdb8:	721a      	strb	r2, [r3, #8]
1000cdba:	1892      	adds	r2, r2, r2
1000cdbc:	7258      	strb	r0, [r3, #9]
1000cdbe:	719a      	strb	r2, [r3, #6]
1000cdc0:	71dc      	strb	r4, [r3, #7]
1000cdc2:	1c18      	adds	r0, r3, #0
1000cdc4:	210a      	movs	r1, #10
1000cdc6:	4b04      	ldr	r3, [pc, #16]	; (1000cdd8 <gapc_disconnect_cmd_handler+0x40>)
1000cdc8:	4798      	blx	r3
1000cdca:	1c20      	adds	r0, r4, #0
1000cdcc:	bd10      	pop	{r4, pc}
1000cdce:	46c0      	nop			; (mov r8, r8)
1000cdd0:	10013a94 	.word	0x10013a94
1000cdd4:	10013724 	.word	0x10013724
1000cdd8:	1000c8f1 	.word	0x1000c8f1

1000cddc <gapc_disconnect_ind>:
1000cddc:	1c02      	adds	r2, r0, #0
1000cdde:	b508      	push	{r3, lr}
1000cde0:	7843      	ldrb	r3, [r0, #1]
1000cde2:	7800      	ldrb	r0, [r0, #0]
1000cde4:	021b      	lsls	r3, r3, #8
1000cde6:	4318      	orrs	r0, r3
1000cde8:	8008      	strh	r0, [r1, #0]
1000cdea:	7893      	ldrb	r3, [r2, #2]
1000cdec:	708b      	strb	r3, [r1, #2]
1000cdee:	2100      	movs	r1, #0
1000cdf0:	4b05      	ldr	r3, [pc, #20]	; (1000ce08 <gapc_disconnect_ind+0x2c>)
1000cdf2:	4798      	blx	r3
1000cdf4:	2807      	cmp	r0, #7
1000cdf6:	d806      	bhi.n	1000ce06 <gapc_disconnect_ind+0x2a>
1000cdf8:	2312      	movs	r3, #18
1000cdfa:	4358      	muls	r0, r3
1000cdfc:	4b03      	ldr	r3, [pc, #12]	; (1000ce0c <gapc_disconnect_ind+0x30>)
1000cdfe:	1818      	adds	r0, r3, r0
1000ce00:	2301      	movs	r3, #1
1000ce02:	425b      	negs	r3, r3
1000ce04:	8143      	strh	r3, [r0, #10]
1000ce06:	bd08      	pop	{r3, pc}
1000ce08:	1000cac1 	.word	0x1000cac1
1000ce0c:	10013726 	.word	0x10013726

1000ce10 <gapc_bond_cmd_handler>:
1000ce10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ce12:	9300      	str	r3, [sp, #0]
1000ce14:	2312      	movs	r3, #18
1000ce16:	1c04      	adds	r4, r0, #0
1000ce18:	a808      	add	r0, sp, #32
1000ce1a:	7807      	ldrb	r7, [r0, #0]
1000ce1c:	a809      	add	r0, sp, #36	; 0x24
1000ce1e:	7806      	ldrb	r6, [r0, #0]
1000ce20:	a80a      	add	r0, sp, #40	; 0x28
1000ce22:	7805      	ldrb	r5, [r0, #0]
1000ce24:	a80b      	add	r0, sp, #44	; 0x2c
1000ce26:	7800      	ldrb	r0, [r0, #0]
1000ce28:	9001      	str	r0, [sp, #4]
1000ce2a:	4810      	ldr	r0, [pc, #64]	; (1000ce6c <gapc_bond_cmd_handler+0x5c>)
1000ce2c:	7003      	strb	r3, [r0, #0]
1000ce2e:	230e      	movs	r3, #14
1000ce30:	70c4      	strb	r4, [r0, #3]
1000ce32:	4c0f      	ldr	r4, [pc, #60]	; (1000ce70 <gapc_bond_cmd_handler+0x60>)
1000ce34:	7043      	strb	r3, [r0, #1]
1000ce36:	7083      	strb	r3, [r0, #2]
1000ce38:	8823      	ldrh	r3, [r4, #0]
1000ce3a:	8824      	ldrh	r4, [r4, #0]
1000ce3c:	7103      	strb	r3, [r0, #4]
1000ce3e:	466b      	mov	r3, sp
1000ce40:	781b      	ldrb	r3, [r3, #0]
1000ce42:	0a24      	lsrs	r4, r4, #8
1000ce44:	72c3      	strb	r3, [r0, #11]
1000ce46:	466b      	mov	r3, sp
1000ce48:	791b      	ldrb	r3, [r3, #4]
1000ce4a:	7144      	strb	r4, [r0, #5]
1000ce4c:	73c3      	strb	r3, [r0, #15]
1000ce4e:	2308      	movs	r3, #8
1000ce50:	7183      	strb	r3, [r0, #6]
1000ce52:	2300      	movs	r3, #0
1000ce54:	240a      	movs	r4, #10
1000ce56:	7241      	strb	r1, [r0, #9]
1000ce58:	71c3      	strb	r3, [r0, #7]
1000ce5a:	2110      	movs	r1, #16
1000ce5c:	4b05      	ldr	r3, [pc, #20]	; (1000ce74 <gapc_bond_cmd_handler+0x64>)
1000ce5e:	7307      	strb	r7, [r0, #12]
1000ce60:	7346      	strb	r6, [r0, #13]
1000ce62:	7385      	strb	r5, [r0, #14]
1000ce64:	7204      	strb	r4, [r0, #8]
1000ce66:	7282      	strb	r2, [r0, #10]
1000ce68:	4798      	blx	r3
1000ce6a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ce6c:	10013a94 	.word	0x10013a94
1000ce70:	10013724 	.word	0x10013724
1000ce74:	1000c8f1 	.word	0x1000c8f1

1000ce78 <gapc_bond_ind>:
1000ce78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ce7a:	780e      	ldrb	r6, [r1, #0]
1000ce7c:	1c03      	adds	r3, r0, #0
1000ce7e:	1eb0      	subs	r0, r6, #2
1000ce80:	2805      	cmp	r0, #5
1000ce82:	d85d      	bhi.n	1000cf40 <gapc_bond_ind+0xc8>
1000ce84:	1c15      	adds	r5, r2, #0
1000ce86:	1c0c      	adds	r4, r1, #0
1000ce88:	f001 f900 	bl	1000e08c <__gnu_thumb1_case_uqi>
1000ce8c:	2f5a030d 	.word	0x2f5a030d
1000ce90:	4740      	.short	0x4740
1000ce92:	2009      	movs	r0, #9
1000ce94:	2a00      	cmp	r2, #0
1000ce96:	d054      	beq.n	1000cf42 <gapc_bond_ind+0xca>
1000ce98:	0a1b      	lsrs	r3, r3, #8
1000ce9a:	8053      	strh	r3, [r2, #2]
1000ce9c:	788b      	ldrb	r3, [r1, #2]
1000ce9e:	4829      	ldr	r0, [pc, #164]	; (1000cf44 <gapc_bond_ind+0xcc>)
1000cea0:	7113      	strb	r3, [r2, #4]
1000cea2:	2100      	movs	r1, #0
1000cea4:	e01c      	b.n	1000cee0 <gapc_bond_ind+0x68>
1000cea6:	2009      	movs	r0, #9
1000cea8:	2a00      	cmp	r2, #0
1000ceaa:	d04a      	beq.n	1000cf42 <gapc_bond_ind+0xca>
1000ceac:	4c25      	ldr	r4, [pc, #148]	; (1000cf44 <gapc_bond_ind+0xcc>)
1000ceae:	0a1b      	lsrs	r3, r3, #8
1000ceb0:	8053      	strh	r3, [r2, #2]
1000ceb2:	788b      	ldrb	r3, [r1, #2]
1000ceb4:	2700      	movs	r7, #0
1000ceb6:	1c10      	adds	r0, r2, #0
1000ceb8:	1c21      	adds	r1, r4, #0
1000ceba:	7013      	strb	r3, [r2, #0]
1000cebc:	4e22      	ldr	r6, [pc, #136]	; (1000cf48 <gapc_bond_ind+0xd0>)
1000cebe:	7117      	strb	r7, [r2, #4]
1000cec0:	312e      	adds	r1, #46	; 0x2e
1000cec2:	2217      	movs	r2, #23
1000cec4:	3032      	adds	r0, #50	; 0x32
1000cec6:	47b0      	blx	r6
1000cec8:	1c28      	adds	r0, r5, #0
1000ceca:	1c21      	adds	r1, r4, #0
1000cecc:	2210      	movs	r2, #16
1000cece:	311e      	adds	r1, #30
1000ced0:	3022      	adds	r0, #34	; 0x22
1000ced2:	47b0      	blx	r6
1000ced4:	1ca1      	adds	r1, r4, #2
1000ced6:	1da8      	adds	r0, r5, #6
1000ced8:	221c      	movs	r2, #28
1000ceda:	47b0      	blx	r6
1000cedc:	1c20      	adds	r0, r4, #0
1000cede:	1c39      	adds	r1, r7, #0
1000cee0:	2246      	movs	r2, #70	; 0x46
1000cee2:	4b1a      	ldr	r3, [pc, #104]	; (1000cf4c <gapc_bond_ind+0xd4>)
1000cee4:	4798      	blx	r3
1000cee6:	2009      	movs	r0, #9
1000cee8:	e02b      	b.n	1000cf42 <gapc_bond_ind+0xca>
1000ceea:	4d16      	ldr	r5, [pc, #88]	; (1000cf44 <gapc_bond_ind+0xcc>)
1000ceec:	3102      	adds	r1, #2
1000ceee:	1c28      	adds	r0, r5, #0
1000cef0:	2210      	movs	r2, #16
1000cef2:	4e15      	ldr	r6, [pc, #84]	; (1000cf48 <gapc_bond_ind+0xd0>)
1000cef4:	302e      	adds	r0, #46	; 0x2e
1000cef6:	47b0      	blx	r6
1000cef8:	1c28      	adds	r0, r5, #0
1000cefa:	1c21      	adds	r1, r4, #0
1000cefc:	303f      	adds	r0, #63	; 0x3f
1000cefe:	3112      	adds	r1, #18
1000cf00:	2206      	movs	r2, #6
1000cf02:	47b0      	blx	r6
1000cf04:	7e23      	ldrb	r3, [r4, #24]
1000cf06:	353e      	adds	r5, #62	; 0x3e
1000cf08:	702b      	strb	r3, [r5, #0]
1000cf0a:	e019      	b.n	1000cf40 <gapc_bond_ind+0xc8>
1000cf0c:	480d      	ldr	r0, [pc, #52]	; (1000cf44 <gapc_bond_ind+0xcc>)
1000cf0e:	3102      	adds	r1, #2
1000cf10:	2210      	movs	r2, #16
1000cf12:	4b0d      	ldr	r3, [pc, #52]	; (1000cf48 <gapc_bond_ind+0xd0>)
1000cf14:	301e      	adds	r0, #30
1000cf16:	4798      	blx	r3
1000cf18:	e012      	b.n	1000cf40 <gapc_bond_ind+0xc8>
1000cf1a:	4d0a      	ldr	r5, [pc, #40]	; (1000cf44 <gapc_bond_ind+0xcc>)
1000cf1c:	3102      	adds	r1, #2
1000cf1e:	2210      	movs	r2, #16
1000cf20:	4e09      	ldr	r6, [pc, #36]	; (1000cf48 <gapc_bond_ind+0xd0>)
1000cf22:	1ca8      	adds	r0, r5, #2
1000cf24:	47b0      	blx	r6
1000cf26:	1c28      	adds	r0, r5, #0
1000cf28:	1c21      	adds	r1, r4, #0
1000cf2a:	7ce3      	ldrb	r3, [r4, #19]
1000cf2c:	7ca2      	ldrb	r2, [r4, #18]
1000cf2e:	021b      	lsls	r3, r3, #8
1000cf30:	4313      	orrs	r3, r2
1000cf32:	3014      	adds	r0, #20
1000cf34:	3114      	adds	r1, #20
1000cf36:	2208      	movs	r2, #8
1000cf38:	826b      	strh	r3, [r5, #18]
1000cf3a:	47b0      	blx	r6
1000cf3c:	7f23      	ldrb	r3, [r4, #28]
1000cf3e:	772b      	strb	r3, [r5, #28]
1000cf40:	2000      	movs	r0, #0
1000cf42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cf44:	10012a4c 	.word	0x10012a4c
1000cf48:	1000f1ab 	.word	0x1000f1ab
1000cf4c:	1000f1bd 	.word	0x1000f1bd

1000cf50 <gapc_bond_req_ind>:
1000cf50:	b570      	push	{r4, r5, r6, lr}
1000cf52:	780c      	ldrb	r4, [r1, #0]
1000cf54:	1c03      	adds	r3, r0, #0
1000cf56:	7849      	ldrb	r1, [r1, #1]
1000cf58:	2c07      	cmp	r4, #7
1000cf5a:	d85c      	bhi.n	1000d016 <gapc_bond_req_ind+0xc6>
1000cf5c:	1c20      	adds	r0, r4, #0
1000cf5e:	f001 f895 	bl	1000e08c <__gnu_thumb1_case_uqi>
1000cf62:	5a04      	.short	0x5a04
1000cf64:	5a0b5a5a 	.word	0x5a0b5a5a
1000cf68:	1f1f      	.short	0x1f1f
1000cf6a:	200a      	movs	r0, #10
1000cf6c:	2a00      	cmp	r2, #0
1000cf6e:	d053      	beq.n	1000d018 <gapc_bond_req_ind+0xc8>
1000cf70:	0a1b      	lsrs	r3, r3, #8
1000cf72:	8013      	strh	r3, [r2, #0]
1000cf74:	7091      	strb	r1, [r2, #2]
1000cf76:	e04f      	b.n	1000d018 <gapc_bond_req_ind+0xc8>
1000cf78:	2a00      	cmp	r2, #0
1000cf7a:	d00b      	beq.n	1000cf94 <gapc_bond_req_ind+0x44>
1000cf7c:	0a1b      	lsrs	r3, r3, #8
1000cf7e:	8013      	strh	r3, [r2, #0]
1000cf80:	2900      	cmp	r1, #0
1000cf82:	d102      	bne.n	1000cf8a <gapc_bond_req_ind+0x3a>
1000cf84:	2301      	movs	r3, #1
1000cf86:	7093      	strb	r3, [r2, #2]
1000cf88:	e004      	b.n	1000cf94 <gapc_bond_req_ind+0x44>
1000cf8a:	2300      	movs	r3, #0
1000cf8c:	7093      	strb	r3, [r2, #2]
1000cf8e:	2902      	cmp	r1, #2
1000cf90:	d102      	bne.n	1000cf98 <gapc_bond_req_ind+0x48>
1000cf92:	70d3      	strb	r3, [r2, #3]
1000cf94:	200c      	movs	r0, #12
1000cf96:	e03f      	b.n	1000d018 <gapc_bond_req_ind+0xc8>
1000cf98:	2901      	cmp	r1, #1
1000cf9a:	d1fb      	bne.n	1000cf94 <gapc_bond_req_ind+0x44>
1000cf9c:	70d1      	strb	r1, [r2, #3]
1000cf9e:	e7f9      	b.n	1000cf94 <gapc_bond_req_ind+0x44>
1000cfa0:	2214      	movs	r2, #20
1000cfa2:	481e      	ldr	r0, [pc, #120]	; (1000d01c <gapc_bond_req_ind+0xcc>)
1000cfa4:	0a1b      	lsrs	r3, r3, #8
1000cfa6:	70c3      	strb	r3, [r0, #3]
1000cfa8:	4b1d      	ldr	r3, [pc, #116]	; (1000d020 <gapc_bond_req_ind+0xd0>)
1000cfaa:	7002      	strb	r2, [r0, #0]
1000cfac:	3a06      	subs	r2, #6
1000cfae:	7042      	strb	r2, [r0, #1]
1000cfb0:	7082      	strb	r2, [r0, #2]
1000cfb2:	881a      	ldrh	r2, [r3, #0]
1000cfb4:	881b      	ldrh	r3, [r3, #0]
1000cfb6:	4e1b      	ldr	r6, [pc, #108]	; (1000d024 <gapc_bond_req_ind+0xd4>)
1000cfb8:	0a1b      	lsrs	r3, r3, #8
1000cfba:	7143      	strb	r3, [r0, #5]
1000cfbc:	2301      	movs	r3, #1
1000cfbe:	7102      	strb	r2, [r0, #4]
1000cfc0:	7204      	strb	r4, [r0, #8]
1000cfc2:	7243      	strb	r3, [r0, #9]
1000cfc4:	1c05      	adds	r5, r0, #0
1000cfc6:	1c31      	adds	r1, r6, #0
1000cfc8:	300a      	adds	r0, #10
1000cfca:	2c07      	cmp	r4, #7
1000cfcc:	d116      	bne.n	1000cffc <gapc_bond_req_ind+0xac>
1000cfce:	317e      	adds	r1, #126	; 0x7e
1000cfd0:	2210      	movs	r2, #16
1000cfd2:	4c15      	ldr	r4, [pc, #84]	; (1000d028 <gapc_bond_req_ind+0xd8>)
1000cfd4:	47a0      	blx	r4
1000cfd6:	1c33      	adds	r3, r6, #0
1000cfd8:	1c31      	adds	r1, r6, #0
1000cfda:	1c28      	adds	r0, r5, #0
1000cfdc:	338e      	adds	r3, #142	; 0x8e
1000cfde:	881b      	ldrh	r3, [r3, #0]
1000cfe0:	3190      	adds	r1, #144	; 0x90
1000cfe2:	76ab      	strb	r3, [r5, #26]
1000cfe4:	2208      	movs	r2, #8
1000cfe6:	0a1b      	lsrs	r3, r3, #8
1000cfe8:	301c      	adds	r0, #28
1000cfea:	76eb      	strb	r3, [r5, #27]
1000cfec:	47a0      	blx	r4
1000cfee:	1c31      	adds	r1, r6, #0
1000cff0:	3198      	adds	r1, #152	; 0x98
1000cff2:	780a      	ldrb	r2, [r1, #0]
1000cff4:	1d6b      	adds	r3, r5, #5
1000cff6:	77da      	strb	r2, [r3, #31]
1000cff8:	2125      	movs	r1, #37	; 0x25
1000cffa:	e004      	b.n	1000d006 <gapc_bond_req_ind+0xb6>
1000cffc:	319a      	adds	r1, #154	; 0x9a
1000cffe:	2210      	movs	r2, #16
1000d000:	4b09      	ldr	r3, [pc, #36]	; (1000d028 <gapc_bond_req_ind+0xd8>)
1000d002:	4798      	blx	r3
1000d004:	211a      	movs	r1, #26
1000d006:	1c0b      	adds	r3, r1, #0
1000d008:	2400      	movs	r4, #0
1000d00a:	3b08      	subs	r3, #8
1000d00c:	71ab      	strb	r3, [r5, #6]
1000d00e:	1c28      	adds	r0, r5, #0
1000d010:	4b06      	ldr	r3, [pc, #24]	; (1000d02c <gapc_bond_req_ind+0xdc>)
1000d012:	71ec      	strb	r4, [r5, #7]
1000d014:	4798      	blx	r3
1000d016:	2000      	movs	r0, #0
1000d018:	bd70      	pop	{r4, r5, r6, pc}
1000d01a:	46c0      	nop			; (mov r8, r8)
1000d01c:	10013a94 	.word	0x10013a94
1000d020:	10013724 	.word	0x10013724
1000d024:	100137b6 	.word	0x100137b6
1000d028:	1000f1ab 	.word	0x1000f1ab
1000d02c:	1000c8f1 	.word	0x1000c8f1

1000d030 <gapc_bond_cfm_handler_pair_resp>:
1000d030:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d032:	b085      	sub	sp, #20
1000d034:	1c07      	adds	r7, r0, #0
1000d036:	a80a      	add	r0, sp, #40	; 0x28
1000d038:	7806      	ldrb	r6, [r0, #0]
1000d03a:	a80b      	add	r0, sp, #44	; 0x2c
1000d03c:	7805      	ldrb	r5, [r0, #0]
1000d03e:	a80c      	add	r0, sp, #48	; 0x30
1000d040:	7800      	ldrb	r0, [r0, #0]
1000d042:	2414      	movs	r4, #20
1000d044:	9002      	str	r0, [sp, #8]
1000d046:	a80d      	add	r0, sp, #52	; 0x34
1000d048:	7800      	ldrb	r0, [r0, #0]
1000d04a:	9301      	str	r3, [sp, #4]
1000d04c:	9003      	str	r0, [sp, #12]
1000d04e:	a80e      	add	r0, sp, #56	; 0x38
1000d050:	8800      	ldrh	r0, [r0, #0]
1000d052:	4684      	mov	ip, r0
1000d054:	4812      	ldr	r0, [pc, #72]	; (1000d0a0 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000d056:	7004      	strb	r4, [r0, #0]
1000d058:	3c06      	subs	r4, #6
1000d05a:	7044      	strb	r4, [r0, #1]
1000d05c:	7084      	strb	r4, [r0, #2]
1000d05e:	4664      	mov	r4, ip
1000d060:	70c4      	strb	r4, [r0, #3]
1000d062:	4c10      	ldr	r4, [pc, #64]	; (1000d0a4 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000d064:	7247      	strb	r7, [r0, #9]
1000d066:	8823      	ldrh	r3, [r4, #0]
1000d068:	8824      	ldrh	r4, [r4, #0]
1000d06a:	7103      	strb	r3, [r0, #4]
1000d06c:	466b      	mov	r3, sp
1000d06e:	791b      	ldrb	r3, [r3, #4]
1000d070:	0a24      	lsrs	r4, r4, #8
1000d072:	7303      	strb	r3, [r0, #12]
1000d074:	466b      	mov	r3, sp
1000d076:	7a1b      	ldrb	r3, [r3, #8]
1000d078:	7144      	strb	r4, [r0, #5]
1000d07a:	73c3      	strb	r3, [r0, #15]
1000d07c:	466b      	mov	r3, sp
1000d07e:	7b1b      	ldrb	r3, [r3, #12]
1000d080:	2401      	movs	r4, #1
1000d082:	7403      	strb	r3, [r0, #16]
1000d084:	2309      	movs	r3, #9
1000d086:	7183      	strb	r3, [r0, #6]
1000d088:	2300      	movs	r3, #0
1000d08a:	7204      	strb	r4, [r0, #8]
1000d08c:	7281      	strb	r1, [r0, #10]
1000d08e:	72c2      	strb	r2, [r0, #11]
1000d090:	7346      	strb	r6, [r0, #13]
1000d092:	7385      	strb	r5, [r0, #14]
1000d094:	71c3      	strb	r3, [r0, #7]
1000d096:	2111      	movs	r1, #17
1000d098:	4b03      	ldr	r3, [pc, #12]	; (1000d0a8 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000d09a:	4798      	blx	r3
1000d09c:	b005      	add	sp, #20
1000d09e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d0a0:	10013a94 	.word	0x10013a94
1000d0a4:	10013724 	.word	0x10013724
1000d0a8:	1000c8f1 	.word	0x1000c8f1

1000d0ac <gapc_bond_cfm_handler_key_exch>:
1000d0ac:	b538      	push	{r3, r4, r5, lr}
1000d0ae:	2514      	movs	r5, #20
1000d0b0:	4c0d      	ldr	r4, [pc, #52]	; (1000d0e8 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000d0b2:	70e3      	strb	r3, [r4, #3]
1000d0b4:	4b0d      	ldr	r3, [pc, #52]	; (1000d0ec <gapc_bond_cfm_handler_key_exch+0x40>)
1000d0b6:	7025      	strb	r5, [r4, #0]
1000d0b8:	3d06      	subs	r5, #6
1000d0ba:	7065      	strb	r5, [r4, #1]
1000d0bc:	70a5      	strb	r5, [r4, #2]
1000d0be:	881d      	ldrh	r5, [r3, #0]
1000d0c0:	881b      	ldrh	r3, [r3, #0]
1000d0c2:	7220      	strb	r0, [r4, #8]
1000d0c4:	0a1b      	lsrs	r3, r3, #8
1000d0c6:	7163      	strb	r3, [r4, #5]
1000d0c8:	7261      	strb	r1, [r4, #9]
1000d0ca:	4b09      	ldr	r3, [pc, #36]	; (1000d0f0 <gapc_bond_cfm_handler_key_exch+0x44>)
1000d0cc:	1c11      	adds	r1, r2, #0
1000d0ce:	4809      	ldr	r0, [pc, #36]	; (1000d0f4 <gapc_bond_cfm_handler_key_exch+0x48>)
1000d0d0:	2210      	movs	r2, #16
1000d0d2:	7125      	strb	r5, [r4, #4]
1000d0d4:	4798      	blx	r3
1000d0d6:	2312      	movs	r3, #18
1000d0d8:	71a3      	strb	r3, [r4, #6]
1000d0da:	2300      	movs	r3, #0
1000d0dc:	1c20      	adds	r0, r4, #0
1000d0de:	71e3      	strb	r3, [r4, #7]
1000d0e0:	211a      	movs	r1, #26
1000d0e2:	4b05      	ldr	r3, [pc, #20]	; (1000d0f8 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000d0e4:	4798      	blx	r3
1000d0e6:	bd38      	pop	{r3, r4, r5, pc}
1000d0e8:	10013a94 	.word	0x10013a94
1000d0ec:	10013724 	.word	0x10013724
1000d0f0:	1000f1ab 	.word	0x1000f1ab
1000d0f4:	10013a9e 	.word	0x10013a9e
1000d0f8:	1000c8f1 	.word	0x1000c8f1

1000d0fc <gapc_security_cmd_handler>:
1000d0fc:	221a      	movs	r2, #26
1000d0fe:	b508      	push	{r3, lr}
1000d100:	4b0b      	ldr	r3, [pc, #44]	; (1000d130 <gapc_security_cmd_handler+0x34>)
1000d102:	701a      	strb	r2, [r3, #0]
1000d104:	3a0c      	subs	r2, #12
1000d106:	705a      	strb	r2, [r3, #1]
1000d108:	709a      	strb	r2, [r3, #2]
1000d10a:	4a0a      	ldr	r2, [pc, #40]	; (1000d134 <gapc_security_cmd_handler+0x38>)
1000d10c:	70d8      	strb	r0, [r3, #3]
1000d10e:	8810      	ldrh	r0, [r2, #0]
1000d110:	8812      	ldrh	r2, [r2, #0]
1000d112:	7118      	strb	r0, [r3, #4]
1000d114:	0a12      	lsrs	r2, r2, #8
1000d116:	715a      	strb	r2, [r3, #5]
1000d118:	220c      	movs	r2, #12
1000d11a:	721a      	strb	r2, [r3, #8]
1000d11c:	3a0a      	subs	r2, #10
1000d11e:	719a      	strb	r2, [r3, #6]
1000d120:	2200      	movs	r2, #0
1000d122:	7259      	strb	r1, [r3, #9]
1000d124:	71da      	strb	r2, [r3, #7]
1000d126:	1c18      	adds	r0, r3, #0
1000d128:	210a      	movs	r1, #10
1000d12a:	4b03      	ldr	r3, [pc, #12]	; (1000d138 <gapc_security_cmd_handler+0x3c>)
1000d12c:	4798      	blx	r3
1000d12e:	bd08      	pop	{r3, pc}
1000d130:	10013a94 	.word	0x10013a94
1000d134:	10013724 	.word	0x10013724
1000d138:	1000c8f1 	.word	0x1000c8f1

1000d13c <gapc_encrypt_cmd_handler>:
1000d13c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d13e:	2500      	movs	r5, #0
1000d140:	b089      	sub	sp, #36	; 0x24
1000d142:	9306      	str	r3, [sp, #24]
1000d144:	ab0e      	add	r3, sp, #56	; 0x38
1000d146:	781b      	ldrb	r3, [r3, #0]
1000d148:	1c17      	adds	r7, r2, #0
1000d14a:	9307      	str	r3, [sp, #28]
1000d14c:	ab0f      	add	r3, sp, #60	; 0x3c
1000d14e:	781b      	ldrb	r3, [r3, #0]
1000d150:	4a19      	ldr	r2, [pc, #100]	; (1000d1b8 <gapc_encrypt_cmd_handler+0x7c>)
1000d152:	1c06      	adds	r6, r0, #0
1000d154:	9105      	str	r1, [sp, #20]
1000d156:	9300      	str	r3, [sp, #0]
1000d158:	9002      	str	r0, [sp, #8]
1000d15a:	1c29      	adds	r1, r5, #0
1000d15c:	1c2b      	adds	r3, r5, #0
1000d15e:	9501      	str	r5, [sp, #4]
1000d160:	1c10      	adds	r0, r2, #0
1000d162:	4c16      	ldr	r4, [pc, #88]	; (1000d1bc <gapc_encrypt_cmd_handler+0x80>)
1000d164:	47a0      	blx	r4
1000d166:	2316      	movs	r3, #22
1000d168:	4c15      	ldr	r4, [pc, #84]	; (1000d1c0 <gapc_encrypt_cmd_handler+0x84>)
1000d16a:	9905      	ldr	r1, [sp, #20]
1000d16c:	7023      	strb	r3, [r4, #0]
1000d16e:	3b08      	subs	r3, #8
1000d170:	7063      	strb	r3, [r4, #1]
1000d172:	70a3      	strb	r3, [r4, #2]
1000d174:	4b13      	ldr	r3, [pc, #76]	; (1000d1c4 <gapc_encrypt_cmd_handler+0x88>)
1000d176:	70e6      	strb	r6, [r4, #3]
1000d178:	881a      	ldrh	r2, [r3, #0]
1000d17a:	881b      	ldrh	r3, [r3, #0]
1000d17c:	7122      	strb	r2, [r4, #4]
1000d17e:	0a1b      	lsrs	r3, r3, #8
1000d180:	7163      	strb	r3, [r4, #5]
1000d182:	230b      	movs	r3, #11
1000d184:	4e10      	ldr	r6, [pc, #64]	; (1000d1c8 <gapc_encrypt_cmd_handler+0x8c>)
1000d186:	2210      	movs	r2, #16
1000d188:	4810      	ldr	r0, [pc, #64]	; (1000d1cc <gapc_encrypt_cmd_handler+0x90>)
1000d18a:	7223      	strb	r3, [r4, #8]
1000d18c:	7265      	strb	r5, [r4, #9]
1000d18e:	47b0      	blx	r6
1000d190:	0a3b      	lsrs	r3, r7, #8
1000d192:	9906      	ldr	r1, [sp, #24]
1000d194:	2208      	movs	r2, #8
1000d196:	480e      	ldr	r0, [pc, #56]	; (1000d1d0 <gapc_encrypt_cmd_handler+0x94>)
1000d198:	76e3      	strb	r3, [r4, #27]
1000d19a:	76a7      	strb	r7, [r4, #26]
1000d19c:	47b0      	blx	r6
1000d19e:	466a      	mov	r2, sp
1000d1a0:	7f12      	ldrb	r2, [r2, #28]
1000d1a2:	1d63      	adds	r3, r4, #5
1000d1a4:	77da      	strb	r2, [r3, #31]
1000d1a6:	231d      	movs	r3, #29
1000d1a8:	1c20      	adds	r0, r4, #0
1000d1aa:	71a3      	strb	r3, [r4, #6]
1000d1ac:	2125      	movs	r1, #37	; 0x25
1000d1ae:	4b09      	ldr	r3, [pc, #36]	; (1000d1d4 <gapc_encrypt_cmd_handler+0x98>)
1000d1b0:	71e5      	strb	r5, [r4, #7]
1000d1b2:	4798      	blx	r3
1000d1b4:	b009      	add	sp, #36	; 0x24
1000d1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d1b8:	10012a2c 	.word	0x10012a2c
1000d1bc:	1000cbf5 	.word	0x1000cbf5
1000d1c0:	10013a94 	.word	0x10013a94
1000d1c4:	10013724 	.word	0x10013724
1000d1c8:	1000f1ab 	.word	0x1000f1ab
1000d1cc:	10013a9e 	.word	0x10013a9e
1000d1d0:	10013ab0 	.word	0x10013ab0
1000d1d4:	1000c8f1 	.word	0x1000c8f1

1000d1d8 <gapc_encrypt_req_ind>:
1000d1d8:	b508      	push	{r3, lr}
1000d1da:	0a00      	lsrs	r0, r0, #8
1000d1dc:	8010      	strh	r0, [r2, #0]
1000d1de:	784b      	ldrb	r3, [r1, #1]
1000d1e0:	7808      	ldrb	r0, [r1, #0]
1000d1e2:	021b      	lsls	r3, r3, #8
1000d1e4:	4303      	orrs	r3, r0
1000d1e6:	8053      	strh	r3, [r2, #2]
1000d1e8:	1d10      	adds	r0, r2, #4
1000d1ea:	3102      	adds	r1, #2
1000d1ec:	2208      	movs	r2, #8
1000d1ee:	4b01      	ldr	r3, [pc, #4]	; (1000d1f4 <gapc_encrypt_req_ind+0x1c>)
1000d1f0:	4798      	blx	r3
1000d1f2:	bd08      	pop	{r3, pc}
1000d1f4:	1000f1ab 	.word	0x1000f1ab

1000d1f8 <gapc_encrypt_cfm_handler>:
1000d1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d1fa:	2500      	movs	r5, #0
1000d1fc:	b087      	sub	sp, #28
1000d1fe:	9304      	str	r3, [sp, #16]
1000d200:	ab0c      	add	r3, sp, #48	; 0x30
1000d202:	781b      	ldrb	r3, [r3, #0]
1000d204:	1c17      	adds	r7, r2, #0
1000d206:	4a15      	ldr	r2, [pc, #84]	; (1000d25c <gapc_encrypt_cfm_handler+0x64>)
1000d208:	1c06      	adds	r6, r0, #0
1000d20a:	9305      	str	r3, [sp, #20]
1000d20c:	9100      	str	r1, [sp, #0]
1000d20e:	9002      	str	r0, [sp, #8]
1000d210:	1c29      	adds	r1, r5, #0
1000d212:	1c2b      	adds	r3, r5, #0
1000d214:	9501      	str	r5, [sp, #4]
1000d216:	1c10      	adds	r0, r2, #0
1000d218:	4c11      	ldr	r4, [pc, #68]	; (1000d260 <gapc_encrypt_cfm_handler+0x68>)
1000d21a:	47a0      	blx	r4
1000d21c:	2318      	movs	r3, #24
1000d21e:	4c11      	ldr	r4, [pc, #68]	; (1000d264 <gapc_encrypt_cfm_handler+0x6c>)
1000d220:	9904      	ldr	r1, [sp, #16]
1000d222:	7023      	strb	r3, [r4, #0]
1000d224:	3b0a      	subs	r3, #10
1000d226:	7063      	strb	r3, [r4, #1]
1000d228:	70a3      	strb	r3, [r4, #2]
1000d22a:	4b0f      	ldr	r3, [pc, #60]	; (1000d268 <gapc_encrypt_cfm_handler+0x70>)
1000d22c:	480f      	ldr	r0, [pc, #60]	; (1000d26c <gapc_encrypt_cfm_handler+0x74>)
1000d22e:	881a      	ldrh	r2, [r3, #0]
1000d230:	881b      	ldrh	r3, [r3, #0]
1000d232:	7122      	strb	r2, [r4, #4]
1000d234:	0a1b      	lsrs	r3, r3, #8
1000d236:	7163      	strb	r3, [r4, #5]
1000d238:	2210      	movs	r2, #16
1000d23a:	4b0d      	ldr	r3, [pc, #52]	; (1000d270 <gapc_encrypt_cfm_handler+0x78>)
1000d23c:	70e6      	strb	r6, [r4, #3]
1000d23e:	7227      	strb	r7, [r4, #8]
1000d240:	4798      	blx	r3
1000d242:	466b      	mov	r3, sp
1000d244:	7d1b      	ldrb	r3, [r3, #20]
1000d246:	1c20      	adds	r0, r4, #0
1000d248:	7663      	strb	r3, [r4, #25]
1000d24a:	2312      	movs	r3, #18
1000d24c:	211a      	movs	r1, #26
1000d24e:	71a3      	strb	r3, [r4, #6]
1000d250:	4b08      	ldr	r3, [pc, #32]	; (1000d274 <gapc_encrypt_cfm_handler+0x7c>)
1000d252:	71e5      	strb	r5, [r4, #7]
1000d254:	4798      	blx	r3
1000d256:	b007      	add	sp, #28
1000d258:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d25a:	46c0      	nop			; (mov r8, r8)
1000d25c:	10012a3c 	.word	0x10012a3c
1000d260:	1000cbf5 	.word	0x1000cbf5
1000d264:	10013a94 	.word	0x10013a94
1000d268:	10013724 	.word	0x10013724
1000d26c:	10013a9d 	.word	0x10013a9d
1000d270:	1000f1ab 	.word	0x1000f1ab
1000d274:	1000c8f1 	.word	0x1000c8f1

1000d278 <gapc_encrypt_ind>:
1000d278:	780b      	ldrb	r3, [r1, #0]
1000d27a:	0a00      	lsrs	r0, r0, #8
1000d27c:	70d3      	strb	r3, [r2, #3]
1000d27e:	2300      	movs	r3, #0
1000d280:	8010      	strh	r0, [r2, #0]
1000d282:	7093      	strb	r3, [r2, #2]
1000d284:	4770      	bx	lr
	...

1000d288 <gapc_param_update_cfm_handler>:
1000d288:	b538      	push	{r3, r4, r5, lr}
1000d28a:	2410      	movs	r4, #16
1000d28c:	1c05      	adds	r5, r0, #0
1000d28e:	480e      	ldr	r0, [pc, #56]	; (1000d2c8 <gapc_param_update_cfm_handler+0x40>)
1000d290:	7004      	strb	r4, [r0, #0]
1000d292:	3c02      	subs	r4, #2
1000d294:	7044      	strb	r4, [r0, #1]
1000d296:	7084      	strb	r4, [r0, #2]
1000d298:	4c0c      	ldr	r4, [pc, #48]	; (1000d2cc <gapc_param_update_cfm_handler+0x44>)
1000d29a:	70c5      	strb	r5, [r0, #3]
1000d29c:	8825      	ldrh	r5, [r4, #0]
1000d29e:	8824      	ldrh	r4, [r4, #0]
1000d2a0:	72c3      	strb	r3, [r0, #11]
1000d2a2:	0a1b      	lsrs	r3, r3, #8
1000d2a4:	0a24      	lsrs	r4, r4, #8
1000d2a6:	7303      	strb	r3, [r0, #12]
1000d2a8:	2305      	movs	r3, #5
1000d2aa:	7144      	strb	r4, [r0, #5]
1000d2ac:	2400      	movs	r4, #0
1000d2ae:	7201      	strb	r1, [r0, #8]
1000d2b0:	7242      	strb	r2, [r0, #9]
1000d2b2:	7183      	strb	r3, [r0, #6]
1000d2b4:	0a12      	lsrs	r2, r2, #8
1000d2b6:	210d      	movs	r1, #13
1000d2b8:	4b05      	ldr	r3, [pc, #20]	; (1000d2d0 <gapc_param_update_cfm_handler+0x48>)
1000d2ba:	7105      	strb	r5, [r0, #4]
1000d2bc:	7282      	strb	r2, [r0, #10]
1000d2be:	71c4      	strb	r4, [r0, #7]
1000d2c0:	4798      	blx	r3
1000d2c2:	1c20      	adds	r0, r4, #0
1000d2c4:	bd38      	pop	{r3, r4, r5, pc}
1000d2c6:	46c0      	nop			; (mov r8, r8)
1000d2c8:	10013a94 	.word	0x10013a94
1000d2cc:	10013724 	.word	0x10013724
1000d2d0:	1000c8f1 	.word	0x1000c8f1

1000d2d4 <gapc_param_updated_ind>:
1000d2d4:	2300      	movs	r3, #0
1000d2d6:	0a00      	lsrs	r0, r0, #8
1000d2d8:	8010      	strh	r0, [r2, #0]
1000d2da:	7093      	strb	r3, [r2, #2]
1000d2dc:	784b      	ldrb	r3, [r1, #1]
1000d2de:	7808      	ldrb	r0, [r1, #0]
1000d2e0:	021b      	lsls	r3, r3, #8
1000d2e2:	4303      	orrs	r3, r0
1000d2e4:	8093      	strh	r3, [r2, #4]
1000d2e6:	78cb      	ldrb	r3, [r1, #3]
1000d2e8:	7888      	ldrb	r0, [r1, #2]
1000d2ea:	021b      	lsls	r3, r3, #8
1000d2ec:	4303      	orrs	r3, r0
1000d2ee:	80d3      	strh	r3, [r2, #6]
1000d2f0:	794b      	ldrb	r3, [r1, #5]
1000d2f2:	7909      	ldrb	r1, [r1, #4]
1000d2f4:	021b      	lsls	r3, r3, #8
1000d2f6:	430b      	orrs	r3, r1
1000d2f8:	2007      	movs	r0, #7
1000d2fa:	8113      	strh	r3, [r2, #8]
1000d2fc:	4770      	bx	lr

1000d2fe <gapc_param_updated_req_ind>:
1000d2fe:	0a00      	lsrs	r0, r0, #8
1000d300:	8010      	strh	r0, [r2, #0]
1000d302:	784b      	ldrb	r3, [r1, #1]
1000d304:	7808      	ldrb	r0, [r1, #0]
1000d306:	021b      	lsls	r3, r3, #8
1000d308:	4303      	orrs	r3, r0
1000d30a:	8053      	strh	r3, [r2, #2]
1000d30c:	78cb      	ldrb	r3, [r1, #3]
1000d30e:	7888      	ldrb	r0, [r1, #2]
1000d310:	021b      	lsls	r3, r3, #8
1000d312:	4303      	orrs	r3, r0
1000d314:	8093      	strh	r3, [r2, #4]
1000d316:	794b      	ldrb	r3, [r1, #5]
1000d318:	7908      	ldrb	r0, [r1, #4]
1000d31a:	021b      	lsls	r3, r3, #8
1000d31c:	4303      	orrs	r3, r0
1000d31e:	80d3      	strh	r3, [r2, #6]
1000d320:	79cb      	ldrb	r3, [r1, #7]
1000d322:	7989      	ldrb	r1, [r1, #6]
1000d324:	021b      	lsls	r3, r3, #8
1000d326:	430b      	orrs	r3, r1
1000d328:	2008      	movs	r0, #8
1000d32a:	8113      	strh	r3, [r2, #8]
1000d32c:	4770      	bx	lr
	...

1000d330 <gapc_dev_info_req_ind_handler>:
1000d330:	b508      	push	{r3, lr}
1000d332:	1c0b      	adds	r3, r1, #0
1000d334:	0a01      	lsrs	r1, r0, #8
1000d336:	8011      	strh	r1, [r2, #0]
1000d338:	7818      	ldrb	r0, [r3, #0]
1000d33a:	7090      	strb	r0, [r2, #2]
1000d33c:	2800      	cmp	r0, #0
1000d33e:	d104      	bne.n	1000d34a <gapc_dev_info_req_ind_handler+0x1a>
1000d340:	4b03      	ldr	r3, [pc, #12]	; (1000d350 <gapc_dev_info_req_ind_handler+0x20>)
1000d342:	33aa      	adds	r3, #170	; 0xaa
1000d344:	881b      	ldrh	r3, [r3, #0]
1000d346:	2b00      	cmp	r3, #0
1000d348:	d001      	beq.n	1000d34e <gapc_dev_info_req_ind_handler+0x1e>
1000d34a:	4b02      	ldr	r3, [pc, #8]	; (1000d354 <gapc_dev_info_req_ind_handler+0x24>)
1000d34c:	4798      	blx	r3
1000d34e:	bd08      	pop	{r3, pc}
1000d350:	100137b6 	.word	0x100137b6
1000d354:	1000ca01 	.word	0x1000ca01

1000d358 <gapc_sec_req_ind>:
1000d358:	0a00      	lsrs	r0, r0, #8
1000d35a:	8010      	strh	r0, [r2, #0]
1000d35c:	7809      	ldrb	r1, [r1, #0]
1000d35e:	2301      	movs	r3, #1
1000d360:	1c08      	adds	r0, r1, #0
1000d362:	0889      	lsrs	r1, r1, #2
1000d364:	4018      	ands	r0, r3
1000d366:	400b      	ands	r3, r1
1000d368:	70d0      	strb	r0, [r2, #3]
1000d36a:	7113      	strb	r3, [r2, #4]
1000d36c:	4770      	bx	lr

1000d36e <gapc_sign_counter_ind_handler>:
1000d36e:	0a00      	lsrs	r0, r0, #8
1000d370:	8010      	strh	r0, [r2, #0]
1000d372:	784b      	ldrb	r3, [r1, #1]
1000d374:	0218      	lsls	r0, r3, #8
1000d376:	788b      	ldrb	r3, [r1, #2]
1000d378:	041b      	lsls	r3, r3, #16
1000d37a:	4303      	orrs	r3, r0
1000d37c:	7808      	ldrb	r0, [r1, #0]
1000d37e:	4303      	orrs	r3, r0
1000d380:	78c8      	ldrb	r0, [r1, #3]
1000d382:	0600      	lsls	r0, r0, #24
1000d384:	4303      	orrs	r3, r0
1000d386:	6053      	str	r3, [r2, #4]
1000d388:	794b      	ldrb	r3, [r1, #5]
1000d38a:	0218      	lsls	r0, r3, #8
1000d38c:	798b      	ldrb	r3, [r1, #6]
1000d38e:	041b      	lsls	r3, r3, #16
1000d390:	4303      	orrs	r3, r0
1000d392:	7908      	ldrb	r0, [r1, #4]
1000d394:	79c9      	ldrb	r1, [r1, #7]
1000d396:	4303      	orrs	r3, r0
1000d398:	0609      	lsls	r1, r1, #24
1000d39a:	430b      	orrs	r3, r1
1000d39c:	2000      	movs	r0, #0
1000d39e:	6093      	str	r3, [r2, #8]
1000d3a0:	4770      	bx	lr
	...

1000d3a4 <gapc_peer_att_info_ind_handler>:
1000d3a4:	b510      	push	{r4, lr}
1000d3a6:	0a00      	lsrs	r0, r0, #8
1000d3a8:	8010      	strh	r0, [r2, #0]
1000d3aa:	7808      	ldrb	r0, [r1, #0]
1000d3ac:	7090      	strb	r0, [r2, #2]
1000d3ae:	788b      	ldrb	r3, [r1, #2]
1000d3b0:	784c      	ldrb	r4, [r1, #1]
1000d3b2:	021b      	lsls	r3, r3, #8
1000d3b4:	4323      	orrs	r3, r4
1000d3b6:	8093      	strh	r3, [r2, #4]
1000d3b8:	2801      	cmp	r0, #1
1000d3ba:	d027      	beq.n	1000d40c <gapc_peer_att_info_ind_handler+0x68>
1000d3bc:	2800      	cmp	r0, #0
1000d3be:	d017      	beq.n	1000d3f0 <gapc_peer_att_info_ind_handler+0x4c>
1000d3c0:	2802      	cmp	r0, #2
1000d3c2:	d12a      	bne.n	1000d41a <gapc_peer_att_info_ind_handler+0x76>
1000d3c4:	790b      	ldrb	r3, [r1, #4]
1000d3c6:	78c8      	ldrb	r0, [r1, #3]
1000d3c8:	021b      	lsls	r3, r3, #8
1000d3ca:	4303      	orrs	r3, r0
1000d3cc:	8113      	strh	r3, [r2, #8]
1000d3ce:	798b      	ldrb	r3, [r1, #6]
1000d3d0:	7948      	ldrb	r0, [r1, #5]
1000d3d2:	021b      	lsls	r3, r3, #8
1000d3d4:	4303      	orrs	r3, r0
1000d3d6:	80d3      	strh	r3, [r2, #6]
1000d3d8:	7a0b      	ldrb	r3, [r1, #8]
1000d3da:	79c8      	ldrb	r0, [r1, #7]
1000d3dc:	021b      	lsls	r3, r3, #8
1000d3de:	4303      	orrs	r3, r0
1000d3e0:	8193      	strh	r3, [r2, #12]
1000d3e2:	7a8b      	ldrb	r3, [r1, #10]
1000d3e4:	7a49      	ldrb	r1, [r1, #9]
1000d3e6:	021b      	lsls	r3, r3, #8
1000d3e8:	430b      	orrs	r3, r1
1000d3ea:	8153      	strh	r3, [r2, #10]
1000d3ec:	2306      	movs	r3, #6
1000d3ee:	e013      	b.n	1000d418 <gapc_peer_att_info_ind_handler+0x74>
1000d3f0:	1c14      	adds	r4, r2, #0
1000d3f2:	1c20      	adds	r0, r4, #0
1000d3f4:	790a      	ldrb	r2, [r1, #4]
1000d3f6:	78cb      	ldrb	r3, [r1, #3]
1000d3f8:	0212      	lsls	r2, r2, #8
1000d3fa:	431a      	orrs	r2, r3
1000d3fc:	80e2      	strh	r2, [r4, #6]
1000d3fe:	4b07      	ldr	r3, [pc, #28]	; (1000d41c <gapc_peer_att_info_ind_handler+0x78>)
1000d400:	3008      	adds	r0, #8
1000d402:	3105      	adds	r1, #5
1000d404:	4798      	blx	r3
1000d406:	2302      	movs	r3, #2
1000d408:	70a3      	strb	r3, [r4, #2]
1000d40a:	e006      	b.n	1000d41a <gapc_peer_att_info_ind_handler+0x76>
1000d40c:	790b      	ldrb	r3, [r1, #4]
1000d40e:	78c9      	ldrb	r1, [r1, #3]
1000d410:	021b      	lsls	r3, r3, #8
1000d412:	430b      	orrs	r3, r1
1000d414:	80d3      	strh	r3, [r2, #6]
1000d416:	2305      	movs	r3, #5
1000d418:	7093      	strb	r3, [r2, #2]
1000d41a:	bd10      	pop	{r4, pc}
1000d41c:	1000f1ab 	.word	0x1000f1ab

1000d420 <gapc_con_channel_map_ind_handler>:
1000d420:	b508      	push	{r3, lr}
1000d422:	2300      	movs	r3, #0
1000d424:	0a00      	lsrs	r0, r0, #8
1000d426:	7013      	strb	r3, [r2, #0]
1000d428:	8050      	strh	r0, [r2, #2]
1000d42a:	4b02      	ldr	r3, [pc, #8]	; (1000d434 <gapc_con_channel_map_ind_handler+0x14>)
1000d42c:	1d10      	adds	r0, r2, #4
1000d42e:	2205      	movs	r2, #5
1000d430:	4798      	blx	r3
1000d432:	bd08      	pop	{r3, pc}
1000d434:	1000f1ab 	.word	0x1000f1ab

1000d438 <gapc_lecb_connected>:
1000d438:	7843      	ldrb	r3, [r0, #1]
1000d43a:	7802      	ldrb	r2, [r0, #0]
1000d43c:	021b      	lsls	r3, r3, #8
1000d43e:	4313      	orrs	r3, r2
1000d440:	800b      	strh	r3, [r1, #0]
1000d442:	78c3      	ldrb	r3, [r0, #3]
1000d444:	7882      	ldrb	r2, [r0, #2]
1000d446:	021b      	lsls	r3, r3, #8
1000d448:	4313      	orrs	r3, r2
1000d44a:	804b      	strh	r3, [r1, #2]
1000d44c:	7943      	ldrb	r3, [r0, #5]
1000d44e:	7902      	ldrb	r2, [r0, #4]
1000d450:	021b      	lsls	r3, r3, #8
1000d452:	4313      	orrs	r3, r2
1000d454:	808b      	strh	r3, [r1, #4]
1000d456:	79c3      	ldrb	r3, [r0, #7]
1000d458:	7982      	ldrb	r2, [r0, #6]
1000d45a:	021b      	lsls	r3, r3, #8
1000d45c:	4313      	orrs	r3, r2
1000d45e:	80cb      	strh	r3, [r1, #6]
1000d460:	2300      	movs	r3, #0
1000d462:	720b      	strb	r3, [r1, #8]
1000d464:	4770      	bx	lr

1000d466 <gapc_lecb_disconnected>:
1000d466:	7843      	ldrb	r3, [r0, #1]
1000d468:	7802      	ldrb	r2, [r0, #0]
1000d46a:	021b      	lsls	r3, r3, #8
1000d46c:	4313      	orrs	r3, r2
1000d46e:	800b      	strh	r3, [r1, #0]
1000d470:	78c3      	ldrb	r3, [r0, #3]
1000d472:	7882      	ldrb	r2, [r0, #2]
1000d474:	021b      	lsls	r3, r3, #8
1000d476:	4313      	orrs	r3, r2
1000d478:	804b      	strh	r3, [r1, #2]
1000d47a:	4770      	bx	lr

1000d47c <gapc_lecb_connect_req_ind>:
1000d47c:	7843      	ldrb	r3, [r0, #1]
1000d47e:	7802      	ldrb	r2, [r0, #0]
1000d480:	021b      	lsls	r3, r3, #8
1000d482:	4313      	orrs	r3, r2
1000d484:	800b      	strh	r3, [r1, #0]
1000d486:	78c3      	ldrb	r3, [r0, #3]
1000d488:	7882      	ldrb	r2, [r0, #2]
1000d48a:	021b      	lsls	r3, r3, #8
1000d48c:	4313      	orrs	r3, r2
1000d48e:	804b      	strh	r3, [r1, #2]
1000d490:	7943      	ldrb	r3, [r0, #5]
1000d492:	7902      	ldrb	r2, [r0, #4]
1000d494:	021b      	lsls	r3, r3, #8
1000d496:	4313      	orrs	r3, r2
1000d498:	808b      	strh	r3, [r1, #4]
1000d49a:	79c3      	ldrb	r3, [r0, #7]
1000d49c:	7982      	ldrb	r2, [r0, #6]
1000d49e:	021b      	lsls	r3, r3, #8
1000d4a0:	4313      	orrs	r3, r2
1000d4a2:	80cb      	strh	r3, [r1, #6]
1000d4a4:	4770      	bx	lr

1000d4a6 <gapc_lecb_add_credit_resp_handler>:
1000d4a6:	7843      	ldrb	r3, [r0, #1]
1000d4a8:	7802      	ldrb	r2, [r0, #0]
1000d4aa:	021b      	lsls	r3, r3, #8
1000d4ac:	4313      	orrs	r3, r2
1000d4ae:	800b      	strh	r3, [r1, #0]
1000d4b0:	78c3      	ldrb	r3, [r0, #3]
1000d4b2:	7882      	ldrb	r2, [r0, #2]
1000d4b4:	021b      	lsls	r3, r3, #8
1000d4b6:	4313      	orrs	r3, r2
1000d4b8:	804b      	strh	r3, [r1, #2]
1000d4ba:	7943      	ldrb	r3, [r0, #5]
1000d4bc:	7902      	ldrb	r2, [r0, #4]
1000d4be:	021b      	lsls	r3, r3, #8
1000d4c0:	4313      	orrs	r3, r2
1000d4c2:	808b      	strh	r3, [r1, #4]
1000d4c4:	4770      	bx	lr
	...

1000d4c8 <gapm_reset_req_handler>:
1000d4c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000d4ca:	466b      	mov	r3, sp
1000d4cc:	4915      	ldr	r1, [pc, #84]	; (1000d524 <gapm_reset_req_handler+0x5c>)
1000d4ce:	4816      	ldr	r0, [pc, #88]	; (1000d528 <gapm_reset_req_handler+0x60>)
1000d4d0:	880c      	ldrh	r4, [r1, #0]
1000d4d2:	8809      	ldrh	r1, [r1, #0]
1000d4d4:	1ddd      	adds	r5, r3, #7
1000d4d6:	0a09      	lsrs	r1, r1, #8
1000d4d8:	2300      	movs	r3, #0
1000d4da:	2202      	movs	r2, #2
1000d4dc:	7141      	strb	r1, [r0, #5]
1000d4de:	26d0      	movs	r6, #208	; 0xd0
1000d4e0:	2101      	movs	r1, #1
1000d4e2:	7104      	strb	r4, [r0, #4]
1000d4e4:	4c11      	ldr	r4, [pc, #68]	; (1000d52c <gapm_reset_req_handler+0x64>)
1000d4e6:	702b      	strb	r3, [r5, #0]
1000d4e8:	7002      	strb	r2, [r0, #0]
1000d4ea:	70c3      	strb	r3, [r0, #3]
1000d4ec:	320b      	adds	r2, #11
1000d4ee:	7201      	strb	r1, [r0, #8]
1000d4f0:	7181      	strb	r1, [r0, #6]
1000d4f2:	71c3      	strb	r3, [r0, #7]
1000d4f4:	3108      	adds	r1, #8
1000d4f6:	4b0e      	ldr	r3, [pc, #56]	; (1000d530 <gapm_reset_req_handler+0x68>)
1000d4f8:	0136      	lsls	r6, r6, #4
1000d4fa:	7042      	strb	r2, [r0, #1]
1000d4fc:	7082      	strb	r2, [r0, #2]
1000d4fe:	80a2      	strh	r2, [r4, #4]
1000d500:	8026      	strh	r6, [r4, #0]
1000d502:	4798      	blx	r3
1000d504:	1c28      	adds	r0, r5, #0
1000d506:	4b0b      	ldr	r3, [pc, #44]	; (1000d534 <gapm_reset_req_handler+0x6c>)
1000d508:	4798      	blx	r3
1000d50a:	782b      	ldrb	r3, [r5, #0]
1000d50c:	20e2      	movs	r0, #226	; 0xe2
1000d50e:	2b00      	cmp	r3, #0
1000d510:	d106      	bne.n	1000d520 <gapm_reset_req_handler+0x58>
1000d512:	68a3      	ldr	r3, [r4, #8]
1000d514:	20e2      	movs	r0, #226	; 0xe2
1000d516:	781a      	ldrb	r2, [r3, #0]
1000d518:	785b      	ldrb	r3, [r3, #1]
1000d51a:	2a01      	cmp	r2, #1
1000d51c:	d100      	bne.n	1000d520 <gapm_reset_req_handler+0x58>
1000d51e:	1c18      	adds	r0, r3, #0
1000d520:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000d522:	46c0      	nop			; (mov r8, r8)
1000d524:	10013724 	.word	0x10013724
1000d528:	10013a94 	.word	0x10013a94
1000d52c:	10013718 	.word	0x10013718
1000d530:	1000c8f1 	.word	0x1000c8f1
1000d534:	1000c955 	.word	0x1000c955

1000d538 <gapm_set_dev_config_cmd_handler>:
1000d538:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d53a:	b089      	sub	sp, #36	; 0x24
1000d53c:	9303      	str	r3, [sp, #12]
1000d53e:	ab0e      	add	r3, sp, #56	; 0x38
1000d540:	781b      	ldrb	r3, [r3, #0]
1000d542:	4c37      	ldr	r4, [pc, #220]	; (1000d620 <gapm_set_dev_config_cmd_handler+0xe8>)
1000d544:	9304      	str	r3, [sp, #16]
1000d546:	ab0f      	add	r3, sp, #60	; 0x3c
1000d548:	781b      	ldrb	r3, [r3, #0]
1000d54a:	270d      	movs	r7, #13
1000d54c:	9305      	str	r3, [sp, #20]
1000d54e:	ab10      	add	r3, sp, #64	; 0x40
1000d550:	881b      	ldrh	r3, [r3, #0]
1000d552:	72a1      	strb	r1, [r4, #10]
1000d554:	9300      	str	r3, [sp, #0]
1000d556:	ab11      	add	r3, sp, #68	; 0x44
1000d558:	881b      	ldrh	r3, [r3, #0]
1000d55a:	0a09      	lsrs	r1, r1, #8
1000d55c:	9301      	str	r3, [sp, #4]
1000d55e:	ab12      	add	r3, sp, #72	; 0x48
1000d560:	881b      	ldrh	r3, [r3, #0]
1000d562:	7260      	strb	r0, [r4, #9]
1000d564:	9302      	str	r3, [sp, #8]
1000d566:	ab06      	add	r3, sp, #24
1000d568:	1dde      	adds	r6, r3, #7
1000d56a:	2300      	movs	r3, #0
1000d56c:	7033      	strb	r3, [r6, #0]
1000d56e:	2304      	movs	r3, #4
1000d570:	7023      	strb	r3, [r4, #0]
1000d572:	2300      	movs	r3, #0
1000d574:	70e3      	strb	r3, [r4, #3]
1000d576:	4b2b      	ldr	r3, [pc, #172]	; (1000d624 <gapm_set_dev_config_cmd_handler+0xec>)
1000d578:	72e1      	strb	r1, [r4, #11]
1000d57a:	881d      	ldrh	r5, [r3, #0]
1000d57c:	881b      	ldrh	r3, [r3, #0]
1000d57e:	1c11      	adds	r1, r2, #0
1000d580:	0a1b      	lsrs	r3, r3, #8
1000d582:	7163      	strb	r3, [r4, #5]
1000d584:	2303      	movs	r3, #3
1000d586:	7125      	strb	r5, [r4, #4]
1000d588:	2206      	movs	r2, #6
1000d58a:	4d27      	ldr	r5, [pc, #156]	; (1000d628 <gapm_set_dev_config_cmd_handler+0xf0>)
1000d58c:	4827      	ldr	r0, [pc, #156]	; (1000d62c <gapm_set_dev_config_cmd_handler+0xf4>)
1000d58e:	7223      	strb	r3, [r4, #8]
1000d590:	7067      	strb	r7, [r4, #1]
1000d592:	70a7      	strb	r7, [r4, #2]
1000d594:	47a8      	blx	r5
1000d596:	9903      	ldr	r1, [sp, #12]
1000d598:	2210      	movs	r2, #16
1000d59a:	4825      	ldr	r0, [pc, #148]	; (1000d630 <gapm_set_dev_config_cmd_handler+0xf8>)
1000d59c:	47a8      	blx	r5
1000d59e:	466a      	mov	r2, sp
1000d5a0:	7c12      	ldrb	r2, [r2, #16]
1000d5a2:	1ce3      	adds	r3, r4, #3
1000d5a4:	77da      	strb	r2, [r3, #31]
1000d5a6:	466a      	mov	r2, sp
1000d5a8:	7d12      	ldrb	r2, [r2, #20]
1000d5aa:	1d23      	adds	r3, r4, #4
1000d5ac:	77da      	strb	r2, [r3, #31]
1000d5ae:	466a      	mov	r2, sp
1000d5b0:	7812      	ldrb	r2, [r2, #0]
1000d5b2:	1d63      	adds	r3, r4, #5
1000d5b4:	77da      	strb	r2, [r3, #31]
1000d5b6:	9b00      	ldr	r3, [sp, #0]
1000d5b8:	1da2      	adds	r2, r4, #6
1000d5ba:	0a1b      	lsrs	r3, r3, #8
1000d5bc:	77d3      	strb	r3, [r2, #31]
1000d5be:	466a      	mov	r2, sp
1000d5c0:	7912      	ldrb	r2, [r2, #4]
1000d5c2:	1de3      	adds	r3, r4, #7
1000d5c4:	77da      	strb	r2, [r3, #31]
1000d5c6:	1c22      	adds	r2, r4, #0
1000d5c8:	9b01      	ldr	r3, [sp, #4]
1000d5ca:	3208      	adds	r2, #8
1000d5cc:	0a1b      	lsrs	r3, r3, #8
1000d5ce:	77d3      	strb	r3, [r2, #31]
1000d5d0:	466a      	mov	r2, sp
1000d5d2:	1c23      	adds	r3, r4, #0
1000d5d4:	7a12      	ldrb	r2, [r2, #8]
1000d5d6:	3328      	adds	r3, #40	; 0x28
1000d5d8:	701a      	strb	r2, [r3, #0]
1000d5da:	1c22      	adds	r2, r4, #0
1000d5dc:	9b02      	ldr	r3, [sp, #8]
1000d5de:	3229      	adds	r2, #41	; 0x29
1000d5e0:	0a1b      	lsrs	r3, r3, #8
1000d5e2:	7013      	strb	r3, [r2, #0]
1000d5e4:	23d0      	movs	r3, #208	; 0xd0
1000d5e6:	4d13      	ldr	r5, [pc, #76]	; (1000d634 <gapm_set_dev_config_cmd_handler+0xfc>)
1000d5e8:	011b      	lsls	r3, r3, #4
1000d5ea:	802b      	strh	r3, [r5, #0]
1000d5ec:	2322      	movs	r3, #34	; 0x22
1000d5ee:	71a3      	strb	r3, [r4, #6]
1000d5f0:	2300      	movs	r3, #0
1000d5f2:	212a      	movs	r1, #42	; 0x2a
1000d5f4:	71e3      	strb	r3, [r4, #7]
1000d5f6:	1c20      	adds	r0, r4, #0
1000d5f8:	4b0f      	ldr	r3, [pc, #60]	; (1000d638 <gapm_set_dev_config_cmd_handler+0x100>)
1000d5fa:	80af      	strh	r7, [r5, #4]
1000d5fc:	4798      	blx	r3
1000d5fe:	1c30      	adds	r0, r6, #0
1000d600:	4b0e      	ldr	r3, [pc, #56]	; (1000d63c <gapm_set_dev_config_cmd_handler+0x104>)
1000d602:	4798      	blx	r3
1000d604:	7833      	ldrb	r3, [r6, #0]
1000d606:	20e2      	movs	r0, #226	; 0xe2
1000d608:	2b00      	cmp	r3, #0
1000d60a:	d106      	bne.n	1000d61a <gapm_set_dev_config_cmd_handler+0xe2>
1000d60c:	68ab      	ldr	r3, [r5, #8]
1000d60e:	20e2      	movs	r0, #226	; 0xe2
1000d610:	781a      	ldrb	r2, [r3, #0]
1000d612:	785b      	ldrb	r3, [r3, #1]
1000d614:	2a03      	cmp	r2, #3
1000d616:	d100      	bne.n	1000d61a <gapm_set_dev_config_cmd_handler+0xe2>
1000d618:	1c18      	adds	r0, r3, #0
1000d61a:	b009      	add	sp, #36	; 0x24
1000d61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d61e:	46c0      	nop			; (mov r8, r8)
1000d620:	10013a94 	.word	0x10013a94
1000d624:	10013724 	.word	0x10013724
1000d628:	1000f1ab 	.word	0x1000f1ab
1000d62c:	10013aa0 	.word	0x10013aa0
1000d630:	10013aa6 	.word	0x10013aa6
1000d634:	10013718 	.word	0x10013718
1000d638:	1000c8f1 	.word	0x1000c8f1
1000d63c:	1000c955 	.word	0x1000c955

1000d640 <gapm_get_dev_config_cmd_handler>:
1000d640:	4684      	mov	ip, r0
1000d642:	4663      	mov	r3, ip
1000d644:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d646:	b085      	sub	sp, #20
1000d648:	9100      	str	r1, [sp, #0]
1000d64a:	20cf      	movs	r0, #207	; 0xcf
1000d64c:	2b01      	cmp	r3, #1
1000d64e:	d854      	bhi.n	1000d6fa <gapm_get_dev_config_cmd_handler+0xba>
1000d650:	2900      	cmp	r1, #0
1000d652:	d052      	beq.n	1000d6fa <gapm_get_dev_config_cmd_handler+0xba>
1000d654:	2200      	movs	r2, #0
1000d656:	492a      	ldr	r1, [pc, #168]	; (1000d700 <gapm_get_dev_config_cmd_handler+0xc0>)
1000d658:	ab02      	add	r3, sp, #8
1000d65a:	880c      	ldrh	r4, [r1, #0]
1000d65c:	8809      	ldrh	r1, [r1, #0]
1000d65e:	1d9f      	adds	r7, r3, #6
1000d660:	719a      	strb	r2, [r3, #6]
1000d662:	4b28      	ldr	r3, [pc, #160]	; (1000d704 <gapm_get_dev_config_cmd_handler+0xc4>)
1000d664:	0a09      	lsrs	r1, r1, #8
1000d666:	250d      	movs	r5, #13
1000d668:	2606      	movs	r6, #6
1000d66a:	7159      	strb	r1, [r3, #5]
1000d66c:	4661      	mov	r1, ip
1000d66e:	701e      	strb	r6, [r3, #0]
1000d670:	705d      	strb	r5, [r3, #1]
1000d672:	709d      	strb	r5, [r3, #2]
1000d674:	70da      	strb	r2, [r3, #3]
1000d676:	711c      	strb	r4, [r3, #4]
1000d678:	2901      	cmp	r1, #1
1000d67a:	d13e      	bne.n	1000d6fa <gapm_get_dev_config_cmd_handler+0xba>
1000d67c:	21d0      	movs	r1, #208	; 0xd0
1000d67e:	4c22      	ldr	r4, [pc, #136]	; (1000d708 <gapm_get_dev_config_cmd_handler+0xc8>)
1000d680:	0109      	lsls	r1, r1, #4
1000d682:	8061      	strh	r1, [r4, #2]
1000d684:	4921      	ldr	r1, [pc, #132]	; (1000d70c <gapm_get_dev_config_cmd_handler+0xcc>)
1000d686:	71da      	strb	r2, [r3, #7]
1000d688:	8021      	strh	r1, [r4, #0]
1000d68a:	4661      	mov	r1, ip
1000d68c:	721e      	strb	r6, [r3, #8]
1000d68e:	7199      	strb	r1, [r3, #6]
1000d690:	1c18      	adds	r0, r3, #0
1000d692:	2109      	movs	r1, #9
1000d694:	4b1e      	ldr	r3, [pc, #120]	; (1000d710 <gapm_get_dev_config_cmd_handler+0xd0>)
1000d696:	80a5      	strh	r5, [r4, #4]
1000d698:	4798      	blx	r3
1000d69a:	1c38      	adds	r0, r7, #0
1000d69c:	4b1d      	ldr	r3, [pc, #116]	; (1000d714 <gapm_get_dev_config_cmd_handler+0xd4>)
1000d69e:	4798      	blx	r3
1000d6a0:	783b      	ldrb	r3, [r7, #0]
1000d6a2:	20e2      	movs	r0, #226	; 0xe2
1000d6a4:	9301      	str	r3, [sp, #4]
1000d6a6:	2b00      	cmp	r3, #0
1000d6a8:	d127      	bne.n	1000d6fa <gapm_get_dev_config_cmd_handler+0xba>
1000d6aa:	8821      	ldrh	r1, [r4, #0]
1000d6ac:	4a1a      	ldr	r2, [pc, #104]	; (1000d718 <gapm_get_dev_config_cmd_handler+0xd8>)
1000d6ae:	68a7      	ldr	r7, [r4, #8]
1000d6b0:	3b01      	subs	r3, #1
1000d6b2:	4291      	cmp	r1, r2
1000d6b4:	d001      	beq.n	1000d6ba <gapm_get_dev_config_cmd_handler+0x7a>
1000d6b6:	8023      	strh	r3, [r4, #0]
1000d6b8:	e01a      	b.n	1000d6f0 <gapm_get_dev_config_cmd_handler+0xb0>
1000d6ba:	8063      	strh	r3, [r4, #2]
1000d6bc:	9b00      	ldr	r3, [sp, #0]
1000d6be:	1c39      	adds	r1, r7, #0
1000d6c0:	1c58      	adds	r0, r3, #1
1000d6c2:	1c32      	adds	r2, r6, #0
1000d6c4:	4b15      	ldr	r3, [pc, #84]	; (1000d71c <gapm_get_dev_config_cmd_handler+0xdc>)
1000d6c6:	4798      	blx	r3
1000d6c8:	79bb      	ldrb	r3, [r7, #6]
1000d6ca:	9a00      	ldr	r2, [sp, #0]
1000d6cc:	7013      	strb	r3, [r2, #0]
1000d6ce:	23d0      	movs	r3, #208	; 0xd0
1000d6d0:	011b      	lsls	r3, r3, #4
1000d6d2:	8023      	strh	r3, [r4, #0]
1000d6d4:	ab02      	add	r3, sp, #8
1000d6d6:	80a5      	strh	r5, [r4, #4]
1000d6d8:	1ddd      	adds	r5, r3, #7
1000d6da:	466b      	mov	r3, sp
1000d6dc:	791b      	ldrb	r3, [r3, #4]
1000d6de:	1c28      	adds	r0, r5, #0
1000d6e0:	702b      	strb	r3, [r5, #0]
1000d6e2:	4b0c      	ldr	r3, [pc, #48]	; (1000d714 <gapm_get_dev_config_cmd_handler+0xd4>)
1000d6e4:	4798      	blx	r3
1000d6e6:	782b      	ldrb	r3, [r5, #0]
1000d6e8:	20d0      	movs	r0, #208	; 0xd0
1000d6ea:	2b00      	cmp	r3, #0
1000d6ec:	d105      	bne.n	1000d6fa <gapm_get_dev_config_cmd_handler+0xba>
1000d6ee:	68a7      	ldr	r7, [r4, #8]
1000d6f0:	783b      	ldrb	r3, [r7, #0]
1000d6f2:	7878      	ldrb	r0, [r7, #1]
1000d6f4:	2b06      	cmp	r3, #6
1000d6f6:	d000      	beq.n	1000d6fa <gapm_get_dev_config_cmd_handler+0xba>
1000d6f8:	20e2      	movs	r0, #226	; 0xe2
1000d6fa:	b005      	add	sp, #20
1000d6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d6fe:	46c0      	nop			; (mov r8, r8)
1000d700:	10013724 	.word	0x10013724
1000d704:	10013a94 	.word	0x10013a94
1000d708:	10013718 	.word	0x10013718
1000d70c:	00000d08 	.word	0x00000d08
1000d710:	1000c8f1 	.word	0x1000c8f1
1000d714:	1000c955 	.word	0x1000c955
1000d718:	0000ffff 	.word	0x0000ffff
1000d71c:	1000f1ab 	.word	0x1000f1ab

1000d720 <gapm_cancel_cmd_handler>:
1000d720:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000d722:	4916      	ldr	r1, [pc, #88]	; (1000d77c <gapm_cancel_cmd_handler+0x5c>)
1000d724:	4816      	ldr	r0, [pc, #88]	; (1000d780 <gapm_cancel_cmd_handler+0x60>)
1000d726:	880c      	ldrh	r4, [r1, #0]
1000d728:	8809      	ldrh	r1, [r1, #0]
1000d72a:	466b      	mov	r3, sp
1000d72c:	0a09      	lsrs	r1, r1, #8
1000d72e:	7141      	strb	r1, [r0, #5]
1000d730:	2102      	movs	r1, #2
1000d732:	2203      	movs	r2, #3
1000d734:	7201      	strb	r1, [r0, #8]
1000d736:	21d0      	movs	r1, #208	; 0xd0
1000d738:	1ddd      	adds	r5, r3, #7
1000d73a:	2300      	movs	r3, #0
1000d73c:	7104      	strb	r4, [r0, #4]
1000d73e:	4c11      	ldr	r4, [pc, #68]	; (1000d784 <gapm_cancel_cmd_handler+0x64>)
1000d740:	7002      	strb	r2, [r0, #0]
1000d742:	0109      	lsls	r1, r1, #4
1000d744:	320a      	adds	r2, #10
1000d746:	702b      	strb	r3, [r5, #0]
1000d748:	7042      	strb	r2, [r0, #1]
1000d74a:	7082      	strb	r2, [r0, #2]
1000d74c:	70c3      	strb	r3, [r0, #3]
1000d74e:	8021      	strh	r1, [r4, #0]
1000d750:	80a2      	strh	r2, [r4, #4]
1000d752:	71c3      	strb	r3, [r0, #7]
1000d754:	3a0c      	subs	r2, #12
1000d756:	2109      	movs	r1, #9
1000d758:	4b0b      	ldr	r3, [pc, #44]	; (1000d788 <gapm_cancel_cmd_handler+0x68>)
1000d75a:	7182      	strb	r2, [r0, #6]
1000d75c:	4798      	blx	r3
1000d75e:	1c28      	adds	r0, r5, #0
1000d760:	4b0a      	ldr	r3, [pc, #40]	; (1000d78c <gapm_cancel_cmd_handler+0x6c>)
1000d762:	4798      	blx	r3
1000d764:	7828      	ldrb	r0, [r5, #0]
1000d766:	2800      	cmp	r0, #0
1000d768:	d001      	beq.n	1000d76e <gapm_cancel_cmd_handler+0x4e>
1000d76a:	20e2      	movs	r0, #226	; 0xe2
1000d76c:	e004      	b.n	1000d778 <gapm_cancel_cmd_handler+0x58>
1000d76e:	68a3      	ldr	r3, [r4, #8]
1000d770:	785b      	ldrb	r3, [r3, #1]
1000d772:	2b44      	cmp	r3, #68	; 0x44
1000d774:	d000      	beq.n	1000d778 <gapm_cancel_cmd_handler+0x58>
1000d776:	1c18      	adds	r0, r3, #0
1000d778:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000d77a:	46c0      	nop			; (mov r8, r8)
1000d77c:	10013724 	.word	0x10013724
1000d780:	10013a94 	.word	0x10013a94
1000d784:	10013718 	.word	0x10013718
1000d788:	1000c8f1 	.word	0x1000c8f1
1000d78c:	1000c955 	.word	0x1000c955

1000d790 <gapm_dev_bdaddr_ind_handler>:
1000d790:	b538      	push	{r3, r4, r5, lr}
1000d792:	1c05      	adds	r5, r0, #0
1000d794:	1c0c      	adds	r4, r1, #0
1000d796:	1c48      	adds	r0, r1, #1
1000d798:	2206      	movs	r2, #6
1000d79a:	1c29      	adds	r1, r5, #0
1000d79c:	4b02      	ldr	r3, [pc, #8]	; (1000d7a8 <gapm_dev_bdaddr_ind_handler+0x18>)
1000d79e:	4798      	blx	r3
1000d7a0:	79ab      	ldrb	r3, [r5, #6]
1000d7a2:	2000      	movs	r0, #0
1000d7a4:	7023      	strb	r3, [r4, #0]
1000d7a6:	bd38      	pop	{r3, r4, r5, pc}
1000d7a8:	1000f1ab 	.word	0x1000f1ab

1000d7ac <gapm_cmp_evt>:
1000d7ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d7ae:	7803      	ldrb	r3, [r0, #0]
1000d7b0:	7845      	ldrb	r5, [r0, #1]
1000d7b2:	3b0c      	subs	r3, #12
1000d7b4:	1e18      	subs	r0, r3, #0
1000d7b6:	280b      	cmp	r0, #11
1000d7b8:	d900      	bls.n	1000d7bc <gapm_cmp_evt+0x10>
1000d7ba:	e08d      	b.n	1000d8d8 <gapm_cmp_evt+0x12c>
1000d7bc:	1c0c      	adds	r4, r1, #0
1000d7be:	f000 fc65 	bl	1000e08c <__gnu_thumb1_case_uqi>
1000d7c2:	1952      	.short	0x1952
1000d7c4:	068b1919 	.word	0x068b1919
1000d7c8:	8b595906 	.word	0x8b595906
1000d7cc:	0d8b      	.short	0x0d8b
1000d7ce:	2300      	movs	r3, #0
1000d7d0:	2d45      	cmp	r5, #69	; 0x45
1000d7d2:	d000      	beq.n	1000d7d6 <gapm_cmp_evt+0x2a>
1000d7d4:	1c2b      	adds	r3, r5, #0
1000d7d6:	7023      	strb	r3, [r4, #0]
1000d7d8:	2002      	movs	r0, #2
1000d7da:	e07e      	b.n	1000d8da <gapm_cmp_evt+0x12e>
1000d7dc:	203b      	movs	r0, #59	; 0x3b
1000d7de:	2d00      	cmp	r5, #0
1000d7e0:	d100      	bne.n	1000d7e4 <gapm_cmp_evt+0x38>
1000d7e2:	e07a      	b.n	1000d8da <gapm_cmp_evt+0x12e>
1000d7e4:	700d      	strb	r5, [r1, #0]
1000d7e6:	1c48      	adds	r0, r1, #1
1000d7e8:	2210      	movs	r2, #16
1000d7ea:	2100      	movs	r1, #0
1000d7ec:	4b3b      	ldr	r3, [pc, #236]	; (1000d8dc <gapm_cmp_evt+0x130>)
1000d7ee:	4798      	blx	r3
1000d7f0:	200f      	movs	r0, #15
1000d7f2:	e072      	b.n	1000d8da <gapm_cmp_evt+0x12e>
1000d7f4:	2d00      	cmp	r5, #0
1000d7f6:	d134      	bne.n	1000d862 <gapm_cmp_evt+0xb6>
1000d7f8:	4b39      	ldr	r3, [pc, #228]	; (1000d8e0 <gapm_cmp_evt+0x134>)
1000d7fa:	4798      	blx	r3
1000d7fc:	1e43      	subs	r3, r0, #1
1000d7fe:	b2db      	uxtb	r3, r3
1000d800:	1c28      	adds	r0, r5, #0
1000d802:	2b06      	cmp	r3, #6
1000d804:	d869      	bhi.n	1000d8da <gapm_cmp_evt+0x12e>
1000d806:	466b      	mov	r3, sp
1000d808:	4e36      	ldr	r6, [pc, #216]	; (1000d8e4 <gapm_cmp_evt+0x138>)
1000d80a:	1dd9      	adds	r1, r3, #7
1000d80c:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000d80e:	4b36      	ldr	r3, [pc, #216]	; (1000d8e8 <gapm_cmp_evt+0x13c>)
1000d810:	4798      	blx	r3
1000d812:	2312      	movs	r3, #18
1000d814:	4358      	muls	r0, r3
1000d816:	4935      	ldr	r1, [pc, #212]	; (1000d8ec <gapm_cmp_evt+0x140>)
1000d818:	1809      	adds	r1, r1, r0
1000d81a:	1c0b      	adds	r3, r1, #0
1000d81c:	894a      	ldrh	r2, [r1, #10]
1000d81e:	3308      	adds	r3, #8
1000d820:	8122      	strh	r2, [r4, #8]
1000d822:	784f      	ldrb	r7, [r1, #1]
1000d824:	72a5      	strb	r5, [r4, #10]
1000d826:	7027      	strb	r7, [r4, #0]
1000d828:	898a      	ldrh	r2, [r1, #12]
1000d82a:	1c60      	adds	r0, r4, #1
1000d82c:	81a2      	strh	r2, [r4, #12]
1000d82e:	88db      	ldrh	r3, [r3, #6]
1000d830:	3102      	adds	r1, #2
1000d832:	81e3      	strh	r3, [r4, #14]
1000d834:	89cb      	ldrh	r3, [r1, #14]
1000d836:	2206      	movs	r2, #6
1000d838:	8223      	strh	r3, [r4, #16]
1000d83a:	4b2d      	ldr	r3, [pc, #180]	; (1000d8f0 <gapm_cmp_evt+0x144>)
1000d83c:	4798      	blx	r3
1000d83e:	2f00      	cmp	r7, #0
1000d840:	d00a      	beq.n	1000d858 <gapm_cmp_evt+0xac>
1000d842:	79a3      	ldrb	r3, [r4, #6]
1000d844:	223f      	movs	r2, #63	; 0x3f
1000d846:	1c19      	adds	r1, r3, #0
1000d848:	3501      	adds	r5, #1
1000d84a:	4391      	bics	r1, r2
1000d84c:	29c0      	cmp	r1, #192	; 0xc0
1000d84e:	d003      	beq.n	1000d858 <gapm_cmp_evt+0xac>
1000d850:	065b      	lsls	r3, r3, #25
1000d852:	0fdb      	lsrs	r3, r3, #31
1000d854:	3502      	adds	r5, #2
1000d856:	1aed      	subs	r5, r5, r3
1000d858:	2301      	movs	r3, #1
1000d85a:	425b      	negs	r3, r3
1000d85c:	7025      	strb	r5, [r4, #0]
1000d85e:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000d860:	e038      	b.n	1000d8d4 <gapm_cmp_evt+0x128>
1000d862:	700d      	strb	r5, [r1, #0]
1000d864:	e004      	b.n	1000d870 <gapm_cmp_evt+0xc4>
1000d866:	2300      	movs	r3, #0
1000d868:	2d45      	cmp	r5, #69	; 0x45
1000d86a:	d000      	beq.n	1000d86e <gapm_cmp_evt+0xc2>
1000d86c:	1c2b      	adds	r3, r5, #0
1000d86e:	7023      	strb	r3, [r4, #0]
1000d870:	2003      	movs	r0, #3
1000d872:	e032      	b.n	1000d8da <gapm_cmp_evt+0x12e>
1000d874:	4e1b      	ldr	r6, [pc, #108]	; (1000d8e4 <gapm_cmp_evt+0x138>)
1000d876:	2100      	movs	r1, #0
1000d878:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000d87a:	4b1b      	ldr	r3, [pc, #108]	; (1000d8e8 <gapm_cmp_evt+0x13c>)
1000d87c:	4798      	blx	r3
1000d87e:	2807      	cmp	r0, #7
1000d880:	d818      	bhi.n	1000d8b4 <gapm_cmp_evt+0x108>
1000d882:	2301      	movs	r3, #1
1000d884:	425b      	negs	r3, r3
1000d886:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000d888:	3313      	adds	r3, #19
1000d88a:	4358      	muls	r0, r3
1000d88c:	4917      	ldr	r1, [pc, #92]	; (1000d8ec <gapm_cmp_evt+0x140>)
1000d88e:	1809      	adds	r1, r1, r0
1000d890:	1c0b      	adds	r3, r1, #0
1000d892:	894a      	ldrh	r2, [r1, #10]
1000d894:	3308      	adds	r3, #8
1000d896:	8122      	strh	r2, [r4, #8]
1000d898:	784a      	ldrb	r2, [r1, #1]
1000d89a:	72a5      	strb	r5, [r4, #10]
1000d89c:	7022      	strb	r2, [r4, #0]
1000d89e:	898a      	ldrh	r2, [r1, #12]
1000d8a0:	1c60      	adds	r0, r4, #1
1000d8a2:	81a2      	strh	r2, [r4, #12]
1000d8a4:	88db      	ldrh	r3, [r3, #6]
1000d8a6:	3102      	adds	r1, #2
1000d8a8:	81e3      	strh	r3, [r4, #14]
1000d8aa:	89cb      	ldrh	r3, [r1, #14]
1000d8ac:	2206      	movs	r2, #6
1000d8ae:	8223      	strh	r3, [r4, #16]
1000d8b0:	4b0f      	ldr	r3, [pc, #60]	; (1000d8f0 <gapm_cmp_evt+0x144>)
1000d8b2:	4798      	blx	r3
1000d8b4:	2200      	movs	r2, #0
1000d8b6:	7823      	ldrb	r3, [r4, #0]
1000d8b8:	4293      	cmp	r3, r2
1000d8ba:	d00a      	beq.n	1000d8d2 <gapm_cmp_evt+0x126>
1000d8bc:	79a3      	ldrb	r3, [r4, #6]
1000d8be:	323f      	adds	r2, #63	; 0x3f
1000d8c0:	1c19      	adds	r1, r3, #0
1000d8c2:	4391      	bics	r1, r2
1000d8c4:	3a3e      	subs	r2, #62	; 0x3e
1000d8c6:	29c0      	cmp	r1, #192	; 0xc0
1000d8c8:	d003      	beq.n	1000d8d2 <gapm_cmp_evt+0x126>
1000d8ca:	065b      	lsls	r3, r3, #25
1000d8cc:	0fdb      	lsrs	r3, r3, #31
1000d8ce:	3202      	adds	r2, #2
1000d8d0:	1ad2      	subs	r2, r2, r3
1000d8d2:	7022      	strb	r2, [r4, #0]
1000d8d4:	2005      	movs	r0, #5
1000d8d6:	e000      	b.n	1000d8da <gapm_cmp_evt+0x12e>
1000d8d8:	2000      	movs	r0, #0
1000d8da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d8dc:	1000f1bd 	.word	0x1000f1bd
1000d8e0:	1000cafd 	.word	0x1000cafd
1000d8e4:	100137b6 	.word	0x100137b6
1000d8e8:	1000cac1 	.word	0x1000cac1
1000d8ec:	10013726 	.word	0x10013726
1000d8f0:	1000f1ab 	.word	0x1000f1ab

1000d8f4 <gapm_start_adv_cmd_handler>:
1000d8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d8f6:	b089      	sub	sp, #36	; 0x24
1000d8f8:	9303      	str	r3, [sp, #12]
1000d8fa:	ab0e      	add	r3, sp, #56	; 0x38
1000d8fc:	9102      	str	r1, [sp, #8]
1000d8fe:	cb02      	ldmia	r3!, {r1}
1000d900:	aa08      	add	r2, sp, #32
1000d902:	881b      	ldrh	r3, [r3, #0]
1000d904:	4e3c      	ldr	r6, [pc, #240]	; (1000d9f8 <gapm_start_adv_cmd_handler+0x104>)
1000d906:	9300      	str	r3, [sp, #0]
1000d908:	ab10      	add	r3, sp, #64	; 0x40
1000d90a:	881b      	ldrh	r3, [r3, #0]
1000d90c:	240d      	movs	r4, #13
1000d90e:	469c      	mov	ip, r3
1000d910:	ab11      	add	r3, sp, #68	; 0x44
1000d912:	781b      	ldrb	r3, [r3, #0]
1000d914:	9304      	str	r3, [sp, #16]
1000d916:	ab12      	add	r3, sp, #72	; 0x48
1000d918:	781b      	ldrb	r3, [r3, #0]
1000d91a:	9305      	str	r3, [sp, #20]
1000d91c:	ab13      	add	r3, sp, #76	; 0x4c
1000d91e:	781b      	ldrb	r3, [r3, #0]
1000d920:	9306      	str	r3, [sp, #24]
1000d922:	ab14      	add	r3, sp, #80	; 0x50
1000d924:	781b      	ldrb	r3, [r3, #0]
1000d926:	9301      	str	r3, [sp, #4]
1000d928:	2319      	movs	r3, #25
1000d92a:	189b      	adds	r3, r3, r2
1000d92c:	7fdd      	ldrb	r5, [r3, #31]
1000d92e:	ab18      	add	r3, sp, #96	; 0x60
1000d930:	881f      	ldrh	r7, [r3, #0]
1000d932:	ab19      	add	r3, sp, #100	; 0x64
1000d934:	781b      	ldrb	r3, [r3, #0]
1000d936:	8832      	ldrh	r2, [r6, #0]
1000d938:	9307      	str	r3, [sp, #28]
1000d93a:	4b30      	ldr	r3, [pc, #192]	; (1000d9fc <gapm_start_adv_cmd_handler+0x108>)
1000d93c:	8836      	ldrh	r6, [r6, #0]
1000d93e:	711a      	strb	r2, [r3, #4]
1000d940:	466a      	mov	r2, sp
1000d942:	7a12      	ldrb	r2, [r2, #8]
1000d944:	701c      	strb	r4, [r3, #0]
1000d946:	705c      	strb	r4, [r3, #1]
1000d948:	709c      	strb	r4, [r3, #2]
1000d94a:	725a      	strb	r2, [r3, #9]
1000d94c:	2400      	movs	r4, #0
1000d94e:	466a      	mov	r2, sp
1000d950:	0a36      	lsrs	r6, r6, #8
1000d952:	70dc      	strb	r4, [r3, #3]
1000d954:	7218      	strb	r0, [r3, #8]
1000d956:	729c      	strb	r4, [r3, #10]
1000d958:	715e      	strb	r6, [r3, #5]
1000d95a:	72dc      	strb	r4, [r3, #11]
1000d95c:	7812      	ldrb	r2, [r2, #0]
1000d95e:	380e      	subs	r0, #14
1000d960:	731a      	strb	r2, [r3, #12]
1000d962:	9a00      	ldr	r2, [sp, #0]
1000d964:	0a14      	lsrs	r4, r2, #8
1000d966:	4662      	mov	r2, ip
1000d968:	739a      	strb	r2, [r3, #14]
1000d96a:	4662      	mov	r2, ip
1000d96c:	735c      	strb	r4, [r3, #13]
1000d96e:	0a14      	lsrs	r4, r2, #8
1000d970:	466a      	mov	r2, sp
1000d972:	7c12      	ldrb	r2, [r2, #16]
1000d974:	73dc      	strb	r4, [r3, #15]
1000d976:	741a      	strb	r2, [r3, #16]
1000d978:	1c1c      	adds	r4, r3, #0
1000d97a:	2801      	cmp	r0, #1
1000d97c:	d809      	bhi.n	1000d992 <gapm_start_adv_cmd_handler+0x9e>
1000d97e:	2900      	cmp	r1, #0
1000d980:	d003      	beq.n	1000d98a <gapm_start_adv_cmd_handler+0x96>
1000d982:	481f      	ldr	r0, [pc, #124]	; (1000da00 <gapm_start_adv_cmd_handler+0x10c>)
1000d984:	2206      	movs	r2, #6
1000d986:	4b1f      	ldr	r3, [pc, #124]	; (1000da04 <gapm_start_adv_cmd_handler+0x110>)
1000d988:	4798      	blx	r3
1000d98a:	466b      	mov	r3, sp
1000d98c:	7b1b      	ldrb	r3, [r3, #12]
1000d98e:	75e3      	strb	r3, [r4, #23]
1000d990:	e014      	b.n	1000d9bc <gapm_start_adv_cmd_handler+0xc8>
1000d992:	466b      	mov	r3, sp
1000d994:	7d1b      	ldrb	r3, [r3, #20]
1000d996:	9915      	ldr	r1, [sp, #84]	; 0x54
1000d998:	7463      	strb	r3, [r4, #17]
1000d99a:	466b      	mov	r3, sp
1000d99c:	7e1b      	ldrb	r3, [r3, #24]
1000d99e:	9a01      	ldr	r2, [sp, #4]
1000d9a0:	74a3      	strb	r3, [r4, #18]
1000d9a2:	466b      	mov	r3, sp
1000d9a4:	791b      	ldrb	r3, [r3, #4]
1000d9a6:	4818      	ldr	r0, [pc, #96]	; (1000da08 <gapm_start_adv_cmd_handler+0x114>)
1000d9a8:	4e16      	ldr	r6, [pc, #88]	; (1000da04 <gapm_start_adv_cmd_handler+0x110>)
1000d9aa:	74e3      	strb	r3, [r4, #19]
1000d9ac:	47b0      	blx	r6
1000d9ae:	1c23      	adds	r3, r4, #0
1000d9b0:	4816      	ldr	r0, [pc, #88]	; (1000da0c <gapm_start_adv_cmd_handler+0x118>)
1000d9b2:	3330      	adds	r3, #48	; 0x30
1000d9b4:	9917      	ldr	r1, [sp, #92]	; 0x5c
1000d9b6:	1c2a      	adds	r2, r5, #0
1000d9b8:	701d      	strb	r5, [r3, #0]
1000d9ba:	47b0      	blx	r6
1000d9bc:	1c22      	adds	r2, r4, #0
1000d9be:	23a5      	movs	r3, #165	; 0xa5
1000d9c0:	3250      	adds	r2, #80	; 0x50
1000d9c2:	7013      	strb	r3, [r2, #0]
1000d9c4:	1c22      	adds	r2, r4, #0
1000d9c6:	3251      	adds	r2, #81	; 0x51
1000d9c8:	7013      	strb	r3, [r2, #0]
1000d9ca:	1c23      	adds	r3, r4, #0
1000d9cc:	1c22      	adds	r2, r4, #0
1000d9ce:	3352      	adds	r3, #82	; 0x52
1000d9d0:	701f      	strb	r7, [r3, #0]
1000d9d2:	3253      	adds	r2, #83	; 0x53
1000d9d4:	0a3b      	lsrs	r3, r7, #8
1000d9d6:	7013      	strb	r3, [r2, #0]
1000d9d8:	466a      	mov	r2, sp
1000d9da:	1c23      	adds	r3, r4, #0
1000d9dc:	7f12      	ldrb	r2, [r2, #28]
1000d9de:	3354      	adds	r3, #84	; 0x54
1000d9e0:	701a      	strb	r2, [r3, #0]
1000d9e2:	234d      	movs	r3, #77	; 0x4d
1000d9e4:	2500      	movs	r5, #0
1000d9e6:	71a3      	strb	r3, [r4, #6]
1000d9e8:	1c20      	adds	r0, r4, #0
1000d9ea:	2155      	movs	r1, #85	; 0x55
1000d9ec:	4b08      	ldr	r3, [pc, #32]	; (1000da10 <gapm_start_adv_cmd_handler+0x11c>)
1000d9ee:	71e5      	strb	r5, [r4, #7]
1000d9f0:	4798      	blx	r3
1000d9f2:	1c28      	adds	r0, r5, #0
1000d9f4:	b009      	add	sp, #36	; 0x24
1000d9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d9f8:	10013724 	.word	0x10013724
1000d9fc:	10013a94 	.word	0x10013a94
1000da00:	10013aa5 	.word	0x10013aa5
1000da04:	1000f1ab 	.word	0x1000f1ab
1000da08:	10013aa8 	.word	0x10013aa8
1000da0c:	10013ac5 	.word	0x10013ac5
1000da10:	1000c8f1 	.word	0x1000c8f1

1000da14 <get_gap_local_addr_type>:
1000da14:	4b04      	ldr	r3, [pc, #16]	; (1000da28 <get_gap_local_addr_type+0x14>)
1000da16:	2001      	movs	r0, #1
1000da18:	791b      	ldrb	r3, [r3, #4]
1000da1a:	2b02      	cmp	r3, #2
1000da1c:	d003      	beq.n	1000da26 <get_gap_local_addr_type+0x12>
1000da1e:	3b03      	subs	r3, #3
1000da20:	4258      	negs	r0, r3
1000da22:	4158      	adcs	r0, r3
1000da24:	0040      	lsls	r0, r0, #1
1000da26:	4770      	bx	lr
1000da28:	100137b6 	.word	0x100137b6

1000da2c <gapm_adv_report_evt_handler>:
1000da2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000da2e:	7843      	ldrb	r3, [r0, #1]
1000da30:	1c05      	adds	r5, r0, #0
1000da32:	9301      	str	r3, [sp, #4]
1000da34:	466b      	mov	r3, sp
1000da36:	1c0c      	adds	r4, r1, #0
1000da38:	791b      	ldrb	r3, [r3, #4]
1000da3a:	7806      	ldrb	r6, [r0, #0]
1000da3c:	2206      	movs	r2, #6
1000da3e:	704b      	strb	r3, [r1, #1]
1000da40:	1c88      	adds	r0, r1, #2
1000da42:	4f1b      	ldr	r7, [pc, #108]	; (1000dab0 <gapm_adv_report_evt_handler+0x84>)
1000da44:	1ca9      	adds	r1, r5, #2
1000da46:	47b8      	blx	r7
1000da48:	1c20      	adds	r0, r4, #0
1000da4a:	1c29      	adds	r1, r5, #0
1000da4c:	7a2a      	ldrb	r2, [r5, #8]
1000da4e:	3008      	adds	r0, #8
1000da50:	77c2      	strb	r2, [r0, #31]
1000da52:	3109      	adds	r1, #9
1000da54:	3528      	adds	r5, #40	; 0x28
1000da56:	47b8      	blx	r7
1000da58:	782b      	ldrb	r3, [r5, #0]
1000da5a:	b25a      	sxtb	r2, r3
1000da5c:	2a00      	cmp	r2, #0
1000da5e:	da01      	bge.n	1000da64 <gapm_adv_report_evt_handler+0x38>
1000da60:	3301      	adds	r3, #1
1000da62:	b2db      	uxtb	r3, r3
1000da64:	1c22      	adds	r2, r4, #0
1000da66:	3228      	adds	r2, #40	; 0x28
1000da68:	7013      	strb	r3, [r2, #0]
1000da6a:	2200      	movs	r2, #0
1000da6c:	9b01      	ldr	r3, [sp, #4]
1000da6e:	4293      	cmp	r3, r2
1000da70:	d00a      	beq.n	1000da88 <gapm_adv_report_evt_handler+0x5c>
1000da72:	79e3      	ldrb	r3, [r4, #7]
1000da74:	323f      	adds	r2, #63	; 0x3f
1000da76:	1c19      	adds	r1, r3, #0
1000da78:	4391      	bics	r1, r2
1000da7a:	3a3e      	subs	r2, #62	; 0x3e
1000da7c:	29c0      	cmp	r1, #192	; 0xc0
1000da7e:	d003      	beq.n	1000da88 <gapm_adv_report_evt_handler+0x5c>
1000da80:	065b      	lsls	r3, r3, #25
1000da82:	0fdb      	lsrs	r3, r3, #31
1000da84:	3202      	adds	r2, #2
1000da86:	1ad2      	subs	r2, r2, r3
1000da88:	7062      	strb	r2, [r4, #1]
1000da8a:	2e04      	cmp	r6, #4
1000da8c:	d80f      	bhi.n	1000daae <gapm_adv_report_evt_handler+0x82>
1000da8e:	1c30      	adds	r0, r6, #0
1000da90:	f000 fafc 	bl	1000e08c <__gnu_thumb1_case_uqi>
1000da94:	09070503 	.word	0x09070503
1000da98:	0b          	.byte	0x0b
1000da99:	00          	.byte	0x00
1000da9a:	2300      	movs	r3, #0
1000da9c:	e006      	b.n	1000daac <gapm_adv_report_evt_handler+0x80>
1000da9e:	2301      	movs	r3, #1
1000daa0:	e004      	b.n	1000daac <gapm_adv_report_evt_handler+0x80>
1000daa2:	2302      	movs	r3, #2
1000daa4:	e002      	b.n	1000daac <gapm_adv_report_evt_handler+0x80>
1000daa6:	2303      	movs	r3, #3
1000daa8:	e000      	b.n	1000daac <gapm_adv_report_evt_handler+0x80>
1000daaa:	2305      	movs	r3, #5
1000daac:	7023      	strb	r3, [r4, #0]
1000daae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000dab0:	1000f1ab 	.word	0x1000f1ab

1000dab4 <gapm_resolv_addr_cmd_handler>:
1000dab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000dab6:	2314      	movs	r3, #20
1000dab8:	4c12      	ldr	r4, [pc, #72]	; (1000db04 <gapm_resolv_addr_cmd_handler+0x50>)
1000daba:	1c17      	adds	r7, r2, #0
1000dabc:	7023      	strb	r3, [r4, #0]
1000dabe:	3b07      	subs	r3, #7
1000dac0:	7063      	strb	r3, [r4, #1]
1000dac2:	70a3      	strb	r3, [r4, #2]
1000dac4:	2300      	movs	r3, #0
1000dac6:	70e3      	strb	r3, [r4, #3]
1000dac8:	4b0f      	ldr	r3, [pc, #60]	; (1000db08 <gapm_resolv_addr_cmd_handler+0x54>)
1000daca:	1c05      	adds	r5, r0, #0
1000dacc:	881a      	ldrh	r2, [r3, #0]
1000dace:	881b      	ldrh	r3, [r3, #0]
1000dad0:	4e0e      	ldr	r6, [pc, #56]	; (1000db0c <gapm_resolv_addr_cmd_handler+0x58>)
1000dad2:	0a1b      	lsrs	r3, r3, #8
1000dad4:	7163      	strb	r3, [r4, #5]
1000dad6:	2317      	movs	r3, #23
1000dad8:	012d      	lsls	r5, r5, #4
1000dada:	7122      	strb	r2, [r4, #4]
1000dadc:	7260      	strb	r0, [r4, #9]
1000dade:	2206      	movs	r2, #6
1000dae0:	480b      	ldr	r0, [pc, #44]	; (1000db10 <gapm_resolv_addr_cmd_handler+0x5c>)
1000dae2:	7223      	strb	r3, [r4, #8]
1000dae4:	47b0      	blx	r6
1000dae6:	1c39      	adds	r1, r7, #0
1000dae8:	1c2a      	adds	r2, r5, #0
1000daea:	480a      	ldr	r0, [pc, #40]	; (1000db14 <gapm_resolv_addr_cmd_handler+0x60>)
1000daec:	47b0      	blx	r6
1000daee:	1c29      	adds	r1, r5, #0
1000daf0:	3110      	adds	r1, #16
1000daf2:	1c0b      	adds	r3, r1, #0
1000daf4:	3b08      	subs	r3, #8
1000daf6:	71a3      	strb	r3, [r4, #6]
1000daf8:	121b      	asrs	r3, r3, #8
1000dafa:	71e3      	strb	r3, [r4, #7]
1000dafc:	1c20      	adds	r0, r4, #0
1000dafe:	4b06      	ldr	r3, [pc, #24]	; (1000db18 <gapm_resolv_addr_cmd_handler+0x64>)
1000db00:	4798      	blx	r3
1000db02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000db04:	10013a94 	.word	0x10013a94
1000db08:	10013724 	.word	0x10013724
1000db0c:	1000f1ab 	.word	0x1000f1ab
1000db10:	10013a9e 	.word	0x10013a9e
1000db14:	10013aa4 	.word	0x10013aa4
1000db18:	1000c8f1 	.word	0x1000c8f1

1000db1c <gapm_addr_solved_ind_handler>:
1000db1c:	b570      	push	{r4, r5, r6, lr}
1000db1e:	1c04      	adds	r4, r0, #0
1000db20:	1c08      	adds	r0, r1, #0
1000db22:	1c0d      	adds	r5, r1, #0
1000db24:	4e05      	ldr	r6, [pc, #20]	; (1000db3c <gapm_addr_solved_ind_handler+0x20>)
1000db26:	1c21      	adds	r1, r4, #0
1000db28:	2206      	movs	r2, #6
1000db2a:	3011      	adds	r0, #17
1000db2c:	47b0      	blx	r6
1000db2e:	1c68      	adds	r0, r5, #1
1000db30:	1da1      	adds	r1, r4, #6
1000db32:	2210      	movs	r2, #16
1000db34:	47b0      	blx	r6
1000db36:	2300      	movs	r3, #0
1000db38:	702b      	strb	r3, [r5, #0]
1000db3a:	bd70      	pop	{r4, r5, r6, pc}
1000db3c:	1000f1ab 	.word	0x1000f1ab

1000db40 <gapm_profile_added_ind_handler>:
1000db40:	b510      	push	{r4, lr}
1000db42:	7843      	ldrb	r3, [r0, #1]
1000db44:	7902      	ldrb	r2, [r0, #4]
1000db46:	7944      	ldrb	r4, [r0, #5]
1000db48:	7800      	ldrb	r0, [r0, #0]
1000db4a:	021b      	lsls	r3, r3, #8
1000db4c:	4303      	orrs	r3, r0
1000db4e:	2b1b      	cmp	r3, #27
1000db50:	d104      	bne.n	1000db5c <gapm_profile_added_ind_handler+0x1c>
1000db52:	2300      	movs	r3, #0
1000db54:	700b      	strb	r3, [r1, #0]
1000db56:	0223      	lsls	r3, r4, #8
1000db58:	4313      	orrs	r3, r2
1000db5a:	804b      	strh	r3, [r1, #2]
1000db5c:	203b      	movs	r0, #59	; 0x3b
1000db5e:	bd10      	pop	{r4, pc}

1000db60 <gattc_read_req_ind_parser>:
1000db60:	7843      	ldrb	r3, [r0, #1]
1000db62:	7802      	ldrb	r2, [r0, #0]
1000db64:	021b      	lsls	r3, r3, #8
1000db66:	4313      	orrs	r3, r2
1000db68:	804b      	strh	r3, [r1, #2]
1000db6a:	4770      	bx	lr

1000db6c <gattc_write_req_ind_parser>:
1000db6c:	b508      	push	{r3, lr}
1000db6e:	1c13      	adds	r3, r2, #0
1000db70:	0a00      	lsrs	r0, r0, #8
1000db72:	8010      	strh	r0, [r2, #0]
1000db74:	784a      	ldrb	r2, [r1, #1]
1000db76:	7808      	ldrb	r0, [r1, #0]
1000db78:	0212      	lsls	r2, r2, #8
1000db7a:	4302      	orrs	r2, r0
1000db7c:	805a      	strh	r2, [r3, #2]
1000db7e:	78ca      	ldrb	r2, [r1, #3]
1000db80:	7888      	ldrb	r0, [r1, #2]
1000db82:	0212      	lsls	r2, r2, #8
1000db84:	4302      	orrs	r2, r0
1000db86:	809a      	strh	r2, [r3, #4]
1000db88:	794a      	ldrb	r2, [r1, #5]
1000db8a:	7908      	ldrb	r0, [r1, #4]
1000db8c:	0212      	lsls	r2, r2, #8
1000db8e:	4302      	orrs	r2, r0
1000db90:	80da      	strh	r2, [r3, #6]
1000db92:	3308      	adds	r3, #8
1000db94:	1c18      	adds	r0, r3, #0
1000db96:	3106      	adds	r1, #6
1000db98:	4b01      	ldr	r3, [pc, #4]	; (1000dba0 <gattc_write_req_ind_parser+0x34>)
1000db9a:	4798      	blx	r3
1000db9c:	bd08      	pop	{r3, pc}
1000db9e:	46c0      	nop			; (mov r8, r8)
1000dba0:	1000f1ab 	.word	0x1000f1ab

1000dba4 <gattc_att_info_req_parser>:
1000dba4:	7843      	ldrb	r3, [r0, #1]
1000dba6:	7802      	ldrb	r2, [r0, #0]
1000dba8:	021b      	lsls	r3, r3, #8
1000dbaa:	4313      	orrs	r3, r2
1000dbac:	800b      	strh	r3, [r1, #0]
1000dbae:	4770      	bx	lr

1000dbb0 <gattc_read_cfm>:
1000dbb0:	b538      	push	{r3, r4, r5, lr}
1000dbb2:	2514      	movs	r5, #20
1000dbb4:	1c1c      	adds	r4, r3, #0
1000dbb6:	4b14      	ldr	r3, [pc, #80]	; (1000dc08 <gattc_read_cfm+0x58>)
1000dbb8:	70d9      	strb	r1, [r3, #3]
1000dbba:	4914      	ldr	r1, [pc, #80]	; (1000dc0c <gattc_read_cfm+0x5c>)
1000dbbc:	701d      	strb	r5, [r3, #0]
1000dbbe:	3d08      	subs	r5, #8
1000dbc0:	705d      	strb	r5, [r3, #1]
1000dbc2:	709d      	strb	r5, [r3, #2]
1000dbc4:	880d      	ldrh	r5, [r1, #0]
1000dbc6:	8809      	ldrh	r1, [r1, #0]
1000dbc8:	7218      	strb	r0, [r3, #8]
1000dbca:	0a09      	lsrs	r1, r1, #8
1000dbcc:	7159      	strb	r1, [r3, #5]
1000dbce:	0a00      	lsrs	r0, r0, #8
1000dbd0:	0a21      	lsrs	r1, r4, #8
1000dbd2:	711d      	strb	r5, [r3, #4]
1000dbd4:	7258      	strb	r0, [r3, #9]
1000dbd6:	729c      	strb	r4, [r3, #10]
1000dbd8:	72d9      	strb	r1, [r3, #11]
1000dbda:	731a      	strb	r2, [r3, #12]
1000dbdc:	1c1d      	adds	r5, r3, #0
1000dbde:	2c00      	cmp	r4, #0
1000dbe0:	d007      	beq.n	1000dbf2 <gattc_read_cfm+0x42>
1000dbe2:	9904      	ldr	r1, [sp, #16]
1000dbe4:	1c22      	adds	r2, r4, #0
1000dbe6:	480a      	ldr	r0, [pc, #40]	; (1000dc10 <gattc_read_cfm+0x60>)
1000dbe8:	4b0a      	ldr	r3, [pc, #40]	; (1000dc14 <gattc_read_cfm+0x64>)
1000dbea:	340d      	adds	r4, #13
1000dbec:	4798      	blx	r3
1000dbee:	b2a1      	uxth	r1, r4
1000dbf0:	e001      	b.n	1000dbf6 <gattc_read_cfm+0x46>
1000dbf2:	210e      	movs	r1, #14
1000dbf4:	735c      	strb	r4, [r3, #13]
1000dbf6:	1c0b      	adds	r3, r1, #0
1000dbf8:	3b08      	subs	r3, #8
1000dbfa:	71ab      	strb	r3, [r5, #6]
1000dbfc:	121b      	asrs	r3, r3, #8
1000dbfe:	71eb      	strb	r3, [r5, #7]
1000dc00:	1c28      	adds	r0, r5, #0
1000dc02:	4b05      	ldr	r3, [pc, #20]	; (1000dc18 <gattc_read_cfm+0x68>)
1000dc04:	4798      	blx	r3
1000dc06:	bd38      	pop	{r3, r4, r5, pc}
1000dc08:	10013a94 	.word	0x10013a94
1000dc0c:	10013724 	.word	0x10013724
1000dc10:	10013aa1 	.word	0x10013aa1
1000dc14:	1000f1ab 	.word	0x1000f1ab
1000dc18:	1000c8f1 	.word	0x1000c8f1

1000dc1c <gattc_write_cfm>:
1000dc1c:	4b0d      	ldr	r3, [pc, #52]	; (1000dc54 <gattc_write_cfm+0x38>)
1000dc1e:	b510      	push	{r4, lr}
1000dc20:	729a      	strb	r2, [r3, #10]
1000dc22:	2203      	movs	r2, #3
1000dc24:	2416      	movs	r4, #22
1000dc26:	719a      	strb	r2, [r3, #6]
1000dc28:	2200      	movs	r2, #0
1000dc2a:	70d9      	strb	r1, [r3, #3]
1000dc2c:	490a      	ldr	r1, [pc, #40]	; (1000dc58 <gattc_write_cfm+0x3c>)
1000dc2e:	701c      	strb	r4, [r3, #0]
1000dc30:	3c0a      	subs	r4, #10
1000dc32:	705c      	strb	r4, [r3, #1]
1000dc34:	709c      	strb	r4, [r3, #2]
1000dc36:	880c      	ldrh	r4, [r1, #0]
1000dc38:	8809      	ldrh	r1, [r1, #0]
1000dc3a:	7218      	strb	r0, [r3, #8]
1000dc3c:	0a09      	lsrs	r1, r1, #8
1000dc3e:	0a00      	lsrs	r0, r0, #8
1000dc40:	711c      	strb	r4, [r3, #4]
1000dc42:	7159      	strb	r1, [r3, #5]
1000dc44:	7258      	strb	r0, [r3, #9]
1000dc46:	71da      	strb	r2, [r3, #7]
1000dc48:	1c18      	adds	r0, r3, #0
1000dc4a:	210b      	movs	r1, #11
1000dc4c:	4b03      	ldr	r3, [pc, #12]	; (1000dc5c <gattc_write_cfm+0x40>)
1000dc4e:	4798      	blx	r3
1000dc50:	bd10      	pop	{r4, pc}
1000dc52:	46c0      	nop			; (mov r8, r8)
1000dc54:	10013a94 	.word	0x10013a94
1000dc58:	10013724 	.word	0x10013724
1000dc5c:	1000c8f1 	.word	0x1000c8f1

1000dc60 <gattc_att_info_cfm>:
1000dc60:	b538      	push	{r3, r4, r5, lr}
1000dc62:	4c0e      	ldr	r4, [pc, #56]	; (1000dc9c <gattc_att_info_cfm+0x3c>)
1000dc64:	2518      	movs	r5, #24
1000dc66:	7323      	strb	r3, [r4, #12]
1000dc68:	2305      	movs	r3, #5
1000dc6a:	71a3      	strb	r3, [r4, #6]
1000dc6c:	2300      	movs	r3, #0
1000dc6e:	70e1      	strb	r1, [r4, #3]
1000dc70:	490b      	ldr	r1, [pc, #44]	; (1000dca0 <gattc_att_info_cfm+0x40>)
1000dc72:	7025      	strb	r5, [r4, #0]
1000dc74:	3d0c      	subs	r5, #12
1000dc76:	7065      	strb	r5, [r4, #1]
1000dc78:	70a5      	strb	r5, [r4, #2]
1000dc7a:	880d      	ldrh	r5, [r1, #0]
1000dc7c:	8809      	ldrh	r1, [r1, #0]
1000dc7e:	7220      	strb	r0, [r4, #8]
1000dc80:	0a09      	lsrs	r1, r1, #8
1000dc82:	0a00      	lsrs	r0, r0, #8
1000dc84:	7161      	strb	r1, [r4, #5]
1000dc86:	7260      	strb	r0, [r4, #9]
1000dc88:	72a2      	strb	r2, [r4, #10]
1000dc8a:	71e3      	strb	r3, [r4, #7]
1000dc8c:	0a12      	lsrs	r2, r2, #8
1000dc8e:	1c20      	adds	r0, r4, #0
1000dc90:	210d      	movs	r1, #13
1000dc92:	4b04      	ldr	r3, [pc, #16]	; (1000dca4 <gattc_att_info_cfm+0x44>)
1000dc94:	7125      	strb	r5, [r4, #4]
1000dc96:	72e2      	strb	r2, [r4, #11]
1000dc98:	4798      	blx	r3
1000dc9a:	bd38      	pop	{r3, r4, r5, pc}
1000dc9c:	10013a94 	.word	0x10013a94
1000dca0:	10013724 	.word	0x10013724
1000dca4:	1000c8f1 	.word	0x1000c8f1

1000dca8 <gattc_event_cfm_handler>:
1000dca8:	220e      	movs	r2, #14
1000dcaa:	b508      	push	{r3, lr}
1000dcac:	4b0b      	ldr	r3, [pc, #44]	; (1000dcdc <gattc_event_cfm_handler+0x34>)
1000dcae:	701a      	strb	r2, [r3, #0]
1000dcb0:	3a02      	subs	r2, #2
1000dcb2:	705a      	strb	r2, [r3, #1]
1000dcb4:	709a      	strb	r2, [r3, #2]
1000dcb6:	4a0a      	ldr	r2, [pc, #40]	; (1000dce0 <gattc_event_cfm_handler+0x38>)
1000dcb8:	70d8      	strb	r0, [r3, #3]
1000dcba:	8810      	ldrh	r0, [r2, #0]
1000dcbc:	8812      	ldrh	r2, [r2, #0]
1000dcbe:	7219      	strb	r1, [r3, #8]
1000dcc0:	0a12      	lsrs	r2, r2, #8
1000dcc2:	715a      	strb	r2, [r3, #5]
1000dcc4:	2202      	movs	r2, #2
1000dcc6:	719a      	strb	r2, [r3, #6]
1000dcc8:	2200      	movs	r2, #0
1000dcca:	0a09      	lsrs	r1, r1, #8
1000dccc:	7118      	strb	r0, [r3, #4]
1000dcce:	7259      	strb	r1, [r3, #9]
1000dcd0:	71da      	strb	r2, [r3, #7]
1000dcd2:	1c18      	adds	r0, r3, #0
1000dcd4:	210a      	movs	r1, #10
1000dcd6:	4b03      	ldr	r3, [pc, #12]	; (1000dce4 <gattc_event_cfm_handler+0x3c>)
1000dcd8:	4798      	blx	r3
1000dcda:	bd08      	pop	{r3, pc}
1000dcdc:	10013a94 	.word	0x10013a94
1000dce0:	10013724 	.word	0x10013724
1000dce4:	1000c8f1 	.word	0x1000c8f1

1000dce8 <gattc_disc_svc_ind_parser>:
1000dce8:	b570      	push	{r4, r5, r6, lr}
1000dcea:	1c15      	adds	r5, r2, #0
1000dcec:	0a00      	lsrs	r0, r0, #8
1000dcee:	8010      	strh	r0, [r2, #0]
1000dcf0:	784b      	ldrb	r3, [r1, #1]
1000dcf2:	780a      	ldrb	r2, [r1, #0]
1000dcf4:	021b      	lsls	r3, r3, #8
1000dcf6:	4313      	orrs	r3, r2
1000dcf8:	806b      	strh	r3, [r5, #2]
1000dcfa:	78cb      	ldrb	r3, [r1, #3]
1000dcfc:	788a      	ldrb	r2, [r1, #2]
1000dcfe:	021b      	lsls	r3, r3, #8
1000dd00:	4313      	orrs	r3, r2
1000dd02:	80ab      	strh	r3, [r5, #4]
1000dd04:	790e      	ldrb	r6, [r1, #4]
1000dd06:	4b05      	ldr	r3, [pc, #20]	; (1000dd1c <gattc_disc_svc_ind_parser+0x34>)
1000dd08:	1c30      	adds	r0, r6, #0
1000dd0a:	1c0c      	adds	r4, r1, #0
1000dd0c:	4798      	blx	r3
1000dd0e:	1c32      	adds	r2, r6, #0
1000dd10:	71a8      	strb	r0, [r5, #6]
1000dd12:	1d61      	adds	r1, r4, #5
1000dd14:	1de8      	adds	r0, r5, #7
1000dd16:	4b02      	ldr	r3, [pc, #8]	; (1000dd20 <gattc_disc_svc_ind_parser+0x38>)
1000dd18:	4798      	blx	r3
1000dd1a:	bd70      	pop	{r4, r5, r6, pc}
1000dd1c:	1000c2a9 	.word	0x1000c2a9
1000dd20:	1000f1ab 	.word	0x1000f1ab

1000dd24 <gattc_disc_svc_incl_ind_parser>:
1000dd24:	b570      	push	{r4, r5, r6, lr}
1000dd26:	1c15      	adds	r5, r2, #0
1000dd28:	0a00      	lsrs	r0, r0, #8
1000dd2a:	8010      	strh	r0, [r2, #0]
1000dd2c:	784b      	ldrb	r3, [r1, #1]
1000dd2e:	780a      	ldrb	r2, [r1, #0]
1000dd30:	021b      	lsls	r3, r3, #8
1000dd32:	4313      	orrs	r3, r2
1000dd34:	806b      	strh	r3, [r5, #2]
1000dd36:	78cb      	ldrb	r3, [r1, #3]
1000dd38:	788a      	ldrb	r2, [r1, #2]
1000dd3a:	021b      	lsls	r3, r3, #8
1000dd3c:	4313      	orrs	r3, r2
1000dd3e:	80ab      	strh	r3, [r5, #4]
1000dd40:	794b      	ldrb	r3, [r1, #5]
1000dd42:	790a      	ldrb	r2, [r1, #4]
1000dd44:	021b      	lsls	r3, r3, #8
1000dd46:	4313      	orrs	r3, r2
1000dd48:	80eb      	strh	r3, [r5, #6]
1000dd4a:	798e      	ldrb	r6, [r1, #6]
1000dd4c:	4b05      	ldr	r3, [pc, #20]	; (1000dd64 <gattc_disc_svc_incl_ind_parser+0x40>)
1000dd4e:	1c30      	adds	r0, r6, #0
1000dd50:	1c0c      	adds	r4, r1, #0
1000dd52:	4798      	blx	r3
1000dd54:	7228      	strb	r0, [r5, #8]
1000dd56:	1c28      	adds	r0, r5, #0
1000dd58:	1c32      	adds	r2, r6, #0
1000dd5a:	1de1      	adds	r1, r4, #7
1000dd5c:	4b02      	ldr	r3, [pc, #8]	; (1000dd68 <gattc_disc_svc_incl_ind_parser+0x44>)
1000dd5e:	3009      	adds	r0, #9
1000dd60:	4798      	blx	r3
1000dd62:	bd70      	pop	{r4, r5, r6, pc}
1000dd64:	1000c2a9 	.word	0x1000c2a9
1000dd68:	1000f1ab 	.word	0x1000f1ab

1000dd6c <gattc_disc_char_ind_parser>:
1000dd6c:	b570      	push	{r4, r5, r6, lr}
1000dd6e:	1c15      	adds	r5, r2, #0
1000dd70:	0a00      	lsrs	r0, r0, #8
1000dd72:	8010      	strh	r0, [r2, #0]
1000dd74:	784b      	ldrb	r3, [r1, #1]
1000dd76:	780a      	ldrb	r2, [r1, #0]
1000dd78:	021b      	lsls	r3, r3, #8
1000dd7a:	4313      	orrs	r3, r2
1000dd7c:	806b      	strh	r3, [r5, #2]
1000dd7e:	78cb      	ldrb	r3, [r1, #3]
1000dd80:	788a      	ldrb	r2, [r1, #2]
1000dd82:	021b      	lsls	r3, r3, #8
1000dd84:	4313      	orrs	r3, r2
1000dd86:	80ab      	strh	r3, [r5, #4]
1000dd88:	790b      	ldrb	r3, [r1, #4]
1000dd8a:	1c0c      	adds	r4, r1, #0
1000dd8c:	71ab      	strb	r3, [r5, #6]
1000dd8e:	794e      	ldrb	r6, [r1, #5]
1000dd90:	4b05      	ldr	r3, [pc, #20]	; (1000dda8 <gattc_disc_char_ind_parser+0x3c>)
1000dd92:	1c30      	adds	r0, r6, #0
1000dd94:	4798      	blx	r3
1000dd96:	71e8      	strb	r0, [r5, #7]
1000dd98:	1c28      	adds	r0, r5, #0
1000dd9a:	1c32      	adds	r2, r6, #0
1000dd9c:	1da1      	adds	r1, r4, #6
1000dd9e:	4b03      	ldr	r3, [pc, #12]	; (1000ddac <gattc_disc_char_ind_parser+0x40>)
1000dda0:	3008      	adds	r0, #8
1000dda2:	4798      	blx	r3
1000dda4:	bd70      	pop	{r4, r5, r6, pc}
1000dda6:	46c0      	nop			; (mov r8, r8)
1000dda8:	1000c2a9 	.word	0x1000c2a9
1000ddac:	1000f1ab 	.word	0x1000f1ab

1000ddb0 <gattc_disc_char_desc_ind_parser>:
1000ddb0:	b570      	push	{r4, r5, r6, lr}
1000ddb2:	1c15      	adds	r5, r2, #0
1000ddb4:	0a00      	lsrs	r0, r0, #8
1000ddb6:	8010      	strh	r0, [r2, #0]
1000ddb8:	784b      	ldrb	r3, [r1, #1]
1000ddba:	780a      	ldrb	r2, [r1, #0]
1000ddbc:	021b      	lsls	r3, r3, #8
1000ddbe:	4313      	orrs	r3, r2
1000ddc0:	806b      	strh	r3, [r5, #2]
1000ddc2:	788e      	ldrb	r6, [r1, #2]
1000ddc4:	4b05      	ldr	r3, [pc, #20]	; (1000dddc <gattc_disc_char_desc_ind_parser+0x2c>)
1000ddc6:	1c30      	adds	r0, r6, #0
1000ddc8:	1c0c      	adds	r4, r1, #0
1000ddca:	4798      	blx	r3
1000ddcc:	1c32      	adds	r2, r6, #0
1000ddce:	7128      	strb	r0, [r5, #4]
1000ddd0:	1ce1      	adds	r1, r4, #3
1000ddd2:	1d68      	adds	r0, r5, #5
1000ddd4:	4b02      	ldr	r3, [pc, #8]	; (1000dde0 <gattc_disc_char_desc_ind_parser+0x30>)
1000ddd6:	4798      	blx	r3
1000ddd8:	bd70      	pop	{r4, r5, r6, pc}
1000ddda:	46c0      	nop			; (mov r8, r8)
1000dddc:	1000c2a9 	.word	0x1000c2a9
1000dde0:	1000f1ab 	.word	0x1000f1ab

1000dde4 <gattc_event_ind_and_notification_parser>:
1000dde4:	b510      	push	{r4, lr}
1000dde6:	780c      	ldrb	r4, [r1, #0]
1000dde8:	1c13      	adds	r3, r2, #0
1000ddea:	2c12      	cmp	r4, #18
1000ddec:	d10e      	bne.n	1000de0c <gattc_event_ind_and_notification_parser+0x28>
1000ddee:	0a00      	lsrs	r0, r0, #8
1000ddf0:	8010      	strh	r0, [r2, #0]
1000ddf2:	788a      	ldrb	r2, [r1, #2]
1000ddf4:	709a      	strb	r2, [r3, #2]
1000ddf6:	7948      	ldrb	r0, [r1, #5]
1000ddf8:	790c      	ldrb	r4, [r1, #4]
1000ddfa:	0200      	lsls	r0, r0, #8
1000ddfc:	4320      	orrs	r0, r4
1000ddfe:	8098      	strh	r0, [r3, #4]
1000de00:	3106      	adds	r1, #6
1000de02:	1d98      	adds	r0, r3, #6
1000de04:	4b0b      	ldr	r3, [pc, #44]	; (1000de34 <gattc_event_ind_and_notification_parser+0x50>)
1000de06:	4798      	blx	r3
1000de08:	221b      	movs	r2, #27
1000de0a:	e010      	b.n	1000de2e <gattc_event_ind_and_notification_parser+0x4a>
1000de0c:	2200      	movs	r2, #0
1000de0e:	2c13      	cmp	r4, #19
1000de10:	d10d      	bne.n	1000de2e <gattc_event_ind_and_notification_parser+0x4a>
1000de12:	0a00      	lsrs	r0, r0, #8
1000de14:	8018      	strh	r0, [r3, #0]
1000de16:	788a      	ldrb	r2, [r1, #2]
1000de18:	709a      	strb	r2, [r3, #2]
1000de1a:	7908      	ldrb	r0, [r1, #4]
1000de1c:	78cc      	ldrb	r4, [r1, #3]
1000de1e:	0200      	lsls	r0, r0, #8
1000de20:	4320      	orrs	r0, r4
1000de22:	8098      	strh	r0, [r3, #4]
1000de24:	3106      	adds	r1, #6
1000de26:	1d98      	adds	r0, r3, #6
1000de28:	4b02      	ldr	r3, [pc, #8]	; (1000de34 <gattc_event_ind_and_notification_parser+0x50>)
1000de2a:	4798      	blx	r3
1000de2c:	221c      	movs	r2, #28
1000de2e:	1c10      	adds	r0, r2, #0
1000de30:	bd10      	pop	{r4, pc}
1000de32:	46c0      	nop			; (mov r8, r8)
1000de34:	1000f1ab 	.word	0x1000f1ab

1000de38 <gattc_complete_evt_handler>:
1000de38:	b500      	push	{lr}
1000de3a:	0a00      	lsrs	r0, r0, #8
1000de3c:	8010      	strh	r0, [r2, #0]
1000de3e:	7808      	ldrb	r0, [r1, #0]
1000de40:	7090      	strb	r0, [r2, #2]
1000de42:	784b      	ldrb	r3, [r1, #1]
1000de44:	3801      	subs	r0, #1
1000de46:	70d3      	strb	r3, [r2, #3]
1000de48:	2813      	cmp	r0, #19
1000de4a:	d82c      	bhi.n	1000dea6 <gattc_complete_evt_handler+0x6e>
1000de4c:	f000 f91e 	bl	1000e08c <__gnu_thumb1_case_uqi>
1000de50:	0a0a0a0c 	.word	0x0a0a0a0c
1000de54:	210a0a0a 	.word	0x210a0a0a
1000de58:	111f2121 	.word	0x111f2121
1000de5c:	2b111111 	.word	0x2b111111
1000de60:	2919132b 	.word	0x2919132b
1000de64:	2017      	movs	r0, #23
1000de66:	e01f      	b.n	1000dea8 <gattc_complete_evt_handler+0x70>
1000de68:	2024      	movs	r0, #36	; 0x24
1000de6a:	2b00      	cmp	r3, #0
1000de6c:	d11c      	bne.n	1000dea8 <gattc_complete_evt_handler+0x70>
1000de6e:	3017      	adds	r0, #23
1000de70:	e01a      	b.n	1000dea8 <gattc_complete_evt_handler+0x70>
1000de72:	2025      	movs	r0, #37	; 0x25
1000de74:	e018      	b.n	1000dea8 <gattc_complete_evt_handler+0x70>
1000de76:	4a0d      	ldr	r2, [pc, #52]	; (1000deac <gattc_complete_evt_handler+0x74>)
1000de78:	201d      	movs	r0, #29
1000de7a:	6813      	ldr	r3, [r2, #0]
1000de7c:	3b01      	subs	r3, #1
1000de7e:	6013      	str	r3, [r2, #0]
1000de80:	e012      	b.n	1000dea8 <gattc_complete_evt_handler+0x70>
1000de82:	4a0a      	ldr	r2, [pc, #40]	; (1000deac <gattc_complete_evt_handler+0x74>)
1000de84:	201e      	movs	r0, #30
1000de86:	6813      	ldr	r3, [r2, #0]
1000de88:	3b01      	subs	r3, #1
1000de8a:	6013      	str	r3, [r2, #0]
1000de8c:	e00c      	b.n	1000dea8 <gattc_complete_evt_handler+0x70>
1000de8e:	2019      	movs	r0, #25
1000de90:	e00a      	b.n	1000dea8 <gattc_complete_evt_handler+0x70>
1000de92:	203b      	movs	r0, #59	; 0x3b
1000de94:	2b00      	cmp	r3, #0
1000de96:	d007      	beq.n	1000dea8 <gattc_complete_evt_handler+0x70>
1000de98:	2182      	movs	r1, #130	; 0x82
1000de9a:	0089      	lsls	r1, r1, #2
1000de9c:	5453      	strb	r3, [r2, r1]
1000de9e:	3823      	subs	r0, #35	; 0x23
1000dea0:	e002      	b.n	1000dea8 <gattc_complete_evt_handler+0x70>
1000dea2:	2021      	movs	r0, #33	; 0x21
1000dea4:	e000      	b.n	1000dea8 <gattc_complete_evt_handler+0x70>
1000dea6:	2000      	movs	r0, #0
1000dea8:	bd00      	pop	{pc}
1000deaa:	46c0      	nop			; (mov r8, r8)
1000deac:	10012a98 	.word	0x10012a98

1000deb0 <gattc_event_mtu_changed_ind_parser>:
1000deb0:	0a00      	lsrs	r0, r0, #8
1000deb2:	8010      	strh	r0, [r2, #0]
1000deb4:	784b      	ldrb	r3, [r1, #1]
1000deb6:	7809      	ldrb	r1, [r1, #0]
1000deb8:	021b      	lsls	r3, r3, #8
1000deba:	430b      	orrs	r3, r1
1000debc:	8053      	strh	r3, [r2, #2]
1000debe:	4770      	bx	lr

1000dec0 <gattc_read_ind_parser>:
1000dec0:	0a00      	lsrs	r0, r0, #8
1000dec2:	b508      	push	{r3, lr}
1000dec4:	8010      	strh	r0, [r2, #0]
1000dec6:	1c13      	adds	r3, r2, #0
1000dec8:	2282      	movs	r2, #130	; 0x82
1000deca:	2000      	movs	r0, #0
1000decc:	0092      	lsls	r2, r2, #2
1000dece:	5498      	strb	r0, [r3, r2]
1000ded0:	784a      	ldrb	r2, [r1, #1]
1000ded2:	7808      	ldrb	r0, [r1, #0]
1000ded4:	0212      	lsls	r2, r2, #8
1000ded6:	4302      	orrs	r2, r0
1000ded8:	805a      	strh	r2, [r3, #2]
1000deda:	78ca      	ldrb	r2, [r1, #3]
1000dedc:	7888      	ldrb	r0, [r1, #2]
1000dede:	0212      	lsls	r2, r2, #8
1000dee0:	4302      	orrs	r2, r0
1000dee2:	80da      	strh	r2, [r3, #6]
1000dee4:	794a      	ldrb	r2, [r1, #5]
1000dee6:	7908      	ldrb	r0, [r1, #4]
1000dee8:	0212      	lsls	r2, r2, #8
1000deea:	4302      	orrs	r2, r0
1000deec:	809a      	strh	r2, [r3, #4]
1000deee:	3308      	adds	r3, #8
1000def0:	1c18      	adds	r0, r3, #0
1000def2:	3106      	adds	r1, #6
1000def4:	4b01      	ldr	r3, [pc, #4]	; (1000defc <gattc_read_ind_parser+0x3c>)
1000def6:	4798      	blx	r3
1000def8:	bd08      	pop	{r3, pc}
1000defa:	46c0      	nop			; (mov r8, r8)
1000defc:	1000f1ab 	.word	0x1000f1ab

1000df00 <gattc_svc_changed_cfg_ind_parser>:
1000df00:	0a00      	lsrs	r0, r0, #8
1000df02:	8010      	strh	r0, [r2, #0]
1000df04:	784b      	ldrb	r3, [r1, #1]
1000df06:	7809      	ldrb	r1, [r1, #0]
1000df08:	021b      	lsls	r3, r3, #8
1000df0a:	430b      	orrs	r3, r1
1000df0c:	8053      	strh	r3, [r2, #2]
1000df0e:	4770      	bx	lr

1000df10 <init_gattc_task_module>:
1000df10:	2300      	movs	r3, #0
1000df12:	4a02      	ldr	r2, [pc, #8]	; (1000df1c <init_gattc_task_module+0xc>)
1000df14:	8013      	strh	r3, [r2, #0]
1000df16:	4a02      	ldr	r2, [pc, #8]	; (1000df20 <init_gattc_task_module+0x10>)
1000df18:	8013      	strh	r3, [r2, #0]
1000df1a:	4770      	bx	lr
1000df1c:	10012a92 	.word	0x10012a92
1000df20:	10012a94 	.word	0x10012a94

1000df24 <gattm_att_set_value_req_handler>:
1000df24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000df26:	466b      	mov	r3, sp
1000df28:	1dde      	adds	r6, r3, #7
1000df2a:	2300      	movs	r3, #0
1000df2c:	1c0d      	adds	r5, r1, #0
1000df2e:	210c      	movs	r1, #12
1000df30:	270b      	movs	r7, #11
1000df32:	4c17      	ldr	r4, [pc, #92]	; (1000df90 <gattm_att_set_value_req_handler+0x6c>)
1000df34:	7033      	strb	r3, [r6, #0]
1000df36:	70e3      	strb	r3, [r4, #3]
1000df38:	4b16      	ldr	r3, [pc, #88]	; (1000df94 <gattm_att_set_value_req_handler+0x70>)
1000df3a:	7021      	strb	r1, [r4, #0]
1000df3c:	8819      	ldrh	r1, [r3, #0]
1000df3e:	881b      	ldrh	r3, [r3, #0]
1000df40:	7220      	strb	r0, [r4, #8]
1000df42:	0a1b      	lsrs	r3, r3, #8
1000df44:	7163      	strb	r3, [r4, #5]
1000df46:	0a00      	lsrs	r0, r0, #8
1000df48:	0a2b      	lsrs	r3, r5, #8
1000df4a:	7121      	strb	r1, [r4, #4]
1000df4c:	7260      	strb	r0, [r4, #9]
1000df4e:	1c11      	adds	r1, r2, #0
1000df50:	72a5      	strb	r5, [r4, #10]
1000df52:	1c2a      	adds	r2, r5, #0
1000df54:	72e3      	strb	r3, [r4, #11]
1000df56:	350c      	adds	r5, #12
1000df58:	4b0f      	ldr	r3, [pc, #60]	; (1000df98 <gattm_att_set_value_req_handler+0x74>)
1000df5a:	4810      	ldr	r0, [pc, #64]	; (1000df9c <gattm_att_set_value_req_handler+0x78>)
1000df5c:	7067      	strb	r7, [r4, #1]
1000df5e:	70a7      	strb	r7, [r4, #2]
1000df60:	4798      	blx	r3
1000df62:	b2a9      	uxth	r1, r5
1000df64:	4b0e      	ldr	r3, [pc, #56]	; (1000dfa0 <gattm_att_set_value_req_handler+0x7c>)
1000df66:	4d0f      	ldr	r5, [pc, #60]	; (1000dfa4 <gattm_att_set_value_req_handler+0x80>)
1000df68:	1c20      	adds	r0, r4, #0
1000df6a:	802b      	strh	r3, [r5, #0]
1000df6c:	1c0b      	adds	r3, r1, #0
1000df6e:	3b08      	subs	r3, #8
1000df70:	71a3      	strb	r3, [r4, #6]
1000df72:	121b      	asrs	r3, r3, #8
1000df74:	71e3      	strb	r3, [r4, #7]
1000df76:	4b0c      	ldr	r3, [pc, #48]	; (1000dfa8 <gattm_att_set_value_req_handler+0x84>)
1000df78:	80af      	strh	r7, [r5, #4]
1000df7a:	4798      	blx	r3
1000df7c:	1c30      	adds	r0, r6, #0
1000df7e:	4b0b      	ldr	r3, [pc, #44]	; (1000dfac <gattm_att_set_value_req_handler+0x88>)
1000df80:	4798      	blx	r3
1000df82:	7833      	ldrb	r3, [r6, #0]
1000df84:	20e2      	movs	r0, #226	; 0xe2
1000df86:	2b00      	cmp	r3, #0
1000df88:	d101      	bne.n	1000df8e <gattm_att_set_value_req_handler+0x6a>
1000df8a:	68ab      	ldr	r3, [r5, #8]
1000df8c:	7898      	ldrb	r0, [r3, #2]
1000df8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000df90:	10013a94 	.word	0x10013a94
1000df94:	10013724 	.word	0x10013724
1000df98:	1000f1ab 	.word	0x1000f1ab
1000df9c:	10013aa0 	.word	0x10013aa0
1000dfa0:	00000b0d 	.word	0x00000b0d
1000dfa4:	10013718 	.word	0x10013718
1000dfa8:	1000c8f1 	.word	0x1000c8f1
1000dfac:	1000c955 	.word	0x1000c955

1000dfb0 <gattm_att_get_value_req_handler>:
1000dfb0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dfb2:	b085      	sub	sp, #20
1000dfb4:	9201      	str	r2, [sp, #4]
1000dfb6:	220a      	movs	r2, #10
1000dfb8:	1c04      	adds	r4, r0, #0
1000dfba:	481d      	ldr	r0, [pc, #116]	; (1000e030 <gattm_att_get_value_req_handler+0x80>)
1000dfbc:	ab02      	add	r3, sp, #8
1000dfbe:	1dde      	adds	r6, r3, #7
1000dfc0:	7002      	strb	r2, [r0, #0]
1000dfc2:	2300      	movs	r3, #0
1000dfc4:	220b      	movs	r2, #11
1000dfc6:	4d1b      	ldr	r5, [pc, #108]	; (1000e034 <gattm_att_get_value_req_handler+0x84>)
1000dfc8:	1c0f      	adds	r7, r1, #0
1000dfca:	8829      	ldrh	r1, [r5, #0]
1000dfcc:	882d      	ldrh	r5, [r5, #0]
1000dfce:	7101      	strb	r1, [r0, #4]
1000dfd0:	0a2d      	lsrs	r5, r5, #8
1000dfd2:	7145      	strb	r5, [r0, #5]
1000dfd4:	0a25      	lsrs	r5, r4, #8
1000dfd6:	7245      	strb	r5, [r0, #9]
1000dfd8:	4917      	ldr	r1, [pc, #92]	; (1000e038 <gattm_att_get_value_req_handler+0x88>)
1000dfda:	4d18      	ldr	r5, [pc, #96]	; (1000e03c <gattm_att_get_value_req_handler+0x8c>)
1000dfdc:	7033      	strb	r3, [r6, #0]
1000dfde:	7042      	strb	r2, [r0, #1]
1000dfe0:	7082      	strb	r2, [r0, #2]
1000dfe2:	70c3      	strb	r3, [r0, #3]
1000dfe4:	8029      	strh	r1, [r5, #0]
1000dfe6:	80aa      	strh	r2, [r5, #4]
1000dfe8:	71c3      	strb	r3, [r0, #7]
1000dfea:	3a09      	subs	r2, #9
1000dfec:	210a      	movs	r1, #10
1000dfee:	4b14      	ldr	r3, [pc, #80]	; (1000e040 <gattm_att_get_value_req_handler+0x90>)
1000dff0:	7182      	strb	r2, [r0, #6]
1000dff2:	7204      	strb	r4, [r0, #8]
1000dff4:	4798      	blx	r3
1000dff6:	1c30      	adds	r0, r6, #0
1000dff8:	4b12      	ldr	r3, [pc, #72]	; (1000e044 <gattm_att_get_value_req_handler+0x94>)
1000dffa:	4798      	blx	r3
1000dffc:	7833      	ldrb	r3, [r6, #0]
1000dffe:	20e2      	movs	r0, #226	; 0xe2
1000e000:	2b00      	cmp	r3, #0
1000e002:	d112      	bne.n	1000e02a <gattm_att_get_value_req_handler+0x7a>
1000e004:	68a9      	ldr	r1, [r5, #8]
1000e006:	9801      	ldr	r0, [sp, #4]
1000e008:	784d      	ldrb	r5, [r1, #1]
1000e00a:	780b      	ldrb	r3, [r1, #0]
1000e00c:	78ca      	ldrb	r2, [r1, #3]
1000e00e:	022d      	lsls	r5, r5, #8
1000e010:	431d      	orrs	r5, r3
1000e012:	788b      	ldrb	r3, [r1, #2]
1000e014:	0212      	lsls	r2, r2, #8
1000e016:	431a      	orrs	r2, r3
1000e018:	803a      	strh	r2, [r7, #0]
1000e01a:	790e      	ldrb	r6, [r1, #4]
1000e01c:	4b0a      	ldr	r3, [pc, #40]	; (1000e048 <gattm_att_get_value_req_handler+0x98>)
1000e01e:	3105      	adds	r1, #5
1000e020:	4798      	blx	r3
1000e022:	20e2      	movs	r0, #226	; 0xe2
1000e024:	42ac      	cmp	r4, r5
1000e026:	d100      	bne.n	1000e02a <gattm_att_get_value_req_handler+0x7a>
1000e028:	1c30      	adds	r0, r6, #0
1000e02a:	b005      	add	sp, #20
1000e02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e02e:	46c0      	nop			; (mov r8, r8)
1000e030:	10013a94 	.word	0x10013a94
1000e034:	10013724 	.word	0x10013724
1000e038:	00000b0b 	.word	0x00000b0b
1000e03c:	10013718 	.word	0x10013718
1000e040:	1000c8f1 	.word	0x1000c8f1
1000e044:	1000c955 	.word	0x1000c955
1000e048:	1000f1ab 	.word	0x1000f1ab

1000e04c <htpt_enable_rsp_handler>:
1000e04c:	780b      	ldrb	r3, [r1, #0]
1000e04e:	7013      	strb	r3, [r2, #0]
1000e050:	784b      	ldrb	r3, [r1, #1]
1000e052:	7053      	strb	r3, [r2, #1]
1000e054:	4770      	bx	lr

1000e056 <htpt_temp_send_rsp_handler>:
1000e056:	780b      	ldrb	r3, [r1, #0]
1000e058:	7013      	strb	r3, [r2, #0]
1000e05a:	4770      	bx	lr

1000e05c <htpt_meas_intv_upd_rsp_handler>:
1000e05c:	780b      	ldrb	r3, [r1, #0]
1000e05e:	7013      	strb	r3, [r2, #0]
1000e060:	4770      	bx	lr

1000e062 <htpt_meas_intv_chg_req_ind_handler>:
1000e062:	78cb      	ldrb	r3, [r1, #3]
1000e064:	7889      	ldrb	r1, [r1, #2]
1000e066:	021b      	lsls	r3, r3, #8
1000e068:	430b      	orrs	r3, r1
1000e06a:	8013      	strh	r3, [r2, #0]
1000e06c:	4770      	bx	lr

1000e06e <htpt_cfg_indntf_ind_handler>:
1000e06e:	780b      	ldrb	r3, [r1, #0]
1000e070:	7013      	strb	r3, [r2, #0]
1000e072:	784b      	ldrb	r3, [r1, #1]
1000e074:	7053      	strb	r3, [r2, #1]
1000e076:	4770      	bx	lr

1000e078 <__gnu_thumb1_case_sqi>:
1000e078:	b402      	push	{r1}
1000e07a:	4671      	mov	r1, lr
1000e07c:	0849      	lsrs	r1, r1, #1
1000e07e:	0049      	lsls	r1, r1, #1
1000e080:	5609      	ldrsb	r1, [r1, r0]
1000e082:	0049      	lsls	r1, r1, #1
1000e084:	448e      	add	lr, r1
1000e086:	bc02      	pop	{r1}
1000e088:	4770      	bx	lr
1000e08a:	46c0      	nop			; (mov r8, r8)

1000e08c <__gnu_thumb1_case_uqi>:
1000e08c:	b402      	push	{r1}
1000e08e:	4671      	mov	r1, lr
1000e090:	0849      	lsrs	r1, r1, #1
1000e092:	0049      	lsls	r1, r1, #1
1000e094:	5c09      	ldrb	r1, [r1, r0]
1000e096:	0049      	lsls	r1, r1, #1
1000e098:	448e      	add	lr, r1
1000e09a:	bc02      	pop	{r1}
1000e09c:	4770      	bx	lr
1000e09e:	46c0      	nop			; (mov r8, r8)

1000e0a0 <__aeabi_uidiv>:
1000e0a0:	2200      	movs	r2, #0
1000e0a2:	0843      	lsrs	r3, r0, #1
1000e0a4:	428b      	cmp	r3, r1
1000e0a6:	d374      	bcc.n	1000e192 <__aeabi_uidiv+0xf2>
1000e0a8:	0903      	lsrs	r3, r0, #4
1000e0aa:	428b      	cmp	r3, r1
1000e0ac:	d35f      	bcc.n	1000e16e <__aeabi_uidiv+0xce>
1000e0ae:	0a03      	lsrs	r3, r0, #8
1000e0b0:	428b      	cmp	r3, r1
1000e0b2:	d344      	bcc.n	1000e13e <__aeabi_uidiv+0x9e>
1000e0b4:	0b03      	lsrs	r3, r0, #12
1000e0b6:	428b      	cmp	r3, r1
1000e0b8:	d328      	bcc.n	1000e10c <__aeabi_uidiv+0x6c>
1000e0ba:	0c03      	lsrs	r3, r0, #16
1000e0bc:	428b      	cmp	r3, r1
1000e0be:	d30d      	bcc.n	1000e0dc <__aeabi_uidiv+0x3c>
1000e0c0:	22ff      	movs	r2, #255	; 0xff
1000e0c2:	0209      	lsls	r1, r1, #8
1000e0c4:	ba12      	rev	r2, r2
1000e0c6:	0c03      	lsrs	r3, r0, #16
1000e0c8:	428b      	cmp	r3, r1
1000e0ca:	d302      	bcc.n	1000e0d2 <__aeabi_uidiv+0x32>
1000e0cc:	1212      	asrs	r2, r2, #8
1000e0ce:	0209      	lsls	r1, r1, #8
1000e0d0:	d065      	beq.n	1000e19e <__aeabi_uidiv+0xfe>
1000e0d2:	0b03      	lsrs	r3, r0, #12
1000e0d4:	428b      	cmp	r3, r1
1000e0d6:	d319      	bcc.n	1000e10c <__aeabi_uidiv+0x6c>
1000e0d8:	e000      	b.n	1000e0dc <__aeabi_uidiv+0x3c>
1000e0da:	0a09      	lsrs	r1, r1, #8
1000e0dc:	0bc3      	lsrs	r3, r0, #15
1000e0de:	428b      	cmp	r3, r1
1000e0e0:	d301      	bcc.n	1000e0e6 <__aeabi_uidiv+0x46>
1000e0e2:	03cb      	lsls	r3, r1, #15
1000e0e4:	1ac0      	subs	r0, r0, r3
1000e0e6:	4152      	adcs	r2, r2
1000e0e8:	0b83      	lsrs	r3, r0, #14
1000e0ea:	428b      	cmp	r3, r1
1000e0ec:	d301      	bcc.n	1000e0f2 <__aeabi_uidiv+0x52>
1000e0ee:	038b      	lsls	r3, r1, #14
1000e0f0:	1ac0      	subs	r0, r0, r3
1000e0f2:	4152      	adcs	r2, r2
1000e0f4:	0b43      	lsrs	r3, r0, #13
1000e0f6:	428b      	cmp	r3, r1
1000e0f8:	d301      	bcc.n	1000e0fe <__aeabi_uidiv+0x5e>
1000e0fa:	034b      	lsls	r3, r1, #13
1000e0fc:	1ac0      	subs	r0, r0, r3
1000e0fe:	4152      	adcs	r2, r2
1000e100:	0b03      	lsrs	r3, r0, #12
1000e102:	428b      	cmp	r3, r1
1000e104:	d301      	bcc.n	1000e10a <__aeabi_uidiv+0x6a>
1000e106:	030b      	lsls	r3, r1, #12
1000e108:	1ac0      	subs	r0, r0, r3
1000e10a:	4152      	adcs	r2, r2
1000e10c:	0ac3      	lsrs	r3, r0, #11
1000e10e:	428b      	cmp	r3, r1
1000e110:	d301      	bcc.n	1000e116 <__aeabi_uidiv+0x76>
1000e112:	02cb      	lsls	r3, r1, #11
1000e114:	1ac0      	subs	r0, r0, r3
1000e116:	4152      	adcs	r2, r2
1000e118:	0a83      	lsrs	r3, r0, #10
1000e11a:	428b      	cmp	r3, r1
1000e11c:	d301      	bcc.n	1000e122 <__aeabi_uidiv+0x82>
1000e11e:	028b      	lsls	r3, r1, #10
1000e120:	1ac0      	subs	r0, r0, r3
1000e122:	4152      	adcs	r2, r2
1000e124:	0a43      	lsrs	r3, r0, #9
1000e126:	428b      	cmp	r3, r1
1000e128:	d301      	bcc.n	1000e12e <__aeabi_uidiv+0x8e>
1000e12a:	024b      	lsls	r3, r1, #9
1000e12c:	1ac0      	subs	r0, r0, r3
1000e12e:	4152      	adcs	r2, r2
1000e130:	0a03      	lsrs	r3, r0, #8
1000e132:	428b      	cmp	r3, r1
1000e134:	d301      	bcc.n	1000e13a <__aeabi_uidiv+0x9a>
1000e136:	020b      	lsls	r3, r1, #8
1000e138:	1ac0      	subs	r0, r0, r3
1000e13a:	4152      	adcs	r2, r2
1000e13c:	d2cd      	bcs.n	1000e0da <__aeabi_uidiv+0x3a>
1000e13e:	09c3      	lsrs	r3, r0, #7
1000e140:	428b      	cmp	r3, r1
1000e142:	d301      	bcc.n	1000e148 <__aeabi_uidiv+0xa8>
1000e144:	01cb      	lsls	r3, r1, #7
1000e146:	1ac0      	subs	r0, r0, r3
1000e148:	4152      	adcs	r2, r2
1000e14a:	0983      	lsrs	r3, r0, #6
1000e14c:	428b      	cmp	r3, r1
1000e14e:	d301      	bcc.n	1000e154 <__aeabi_uidiv+0xb4>
1000e150:	018b      	lsls	r3, r1, #6
1000e152:	1ac0      	subs	r0, r0, r3
1000e154:	4152      	adcs	r2, r2
1000e156:	0943      	lsrs	r3, r0, #5
1000e158:	428b      	cmp	r3, r1
1000e15a:	d301      	bcc.n	1000e160 <__aeabi_uidiv+0xc0>
1000e15c:	014b      	lsls	r3, r1, #5
1000e15e:	1ac0      	subs	r0, r0, r3
1000e160:	4152      	adcs	r2, r2
1000e162:	0903      	lsrs	r3, r0, #4
1000e164:	428b      	cmp	r3, r1
1000e166:	d301      	bcc.n	1000e16c <__aeabi_uidiv+0xcc>
1000e168:	010b      	lsls	r3, r1, #4
1000e16a:	1ac0      	subs	r0, r0, r3
1000e16c:	4152      	adcs	r2, r2
1000e16e:	08c3      	lsrs	r3, r0, #3
1000e170:	428b      	cmp	r3, r1
1000e172:	d301      	bcc.n	1000e178 <__aeabi_uidiv+0xd8>
1000e174:	00cb      	lsls	r3, r1, #3
1000e176:	1ac0      	subs	r0, r0, r3
1000e178:	4152      	adcs	r2, r2
1000e17a:	0883      	lsrs	r3, r0, #2
1000e17c:	428b      	cmp	r3, r1
1000e17e:	d301      	bcc.n	1000e184 <__aeabi_uidiv+0xe4>
1000e180:	008b      	lsls	r3, r1, #2
1000e182:	1ac0      	subs	r0, r0, r3
1000e184:	4152      	adcs	r2, r2
1000e186:	0843      	lsrs	r3, r0, #1
1000e188:	428b      	cmp	r3, r1
1000e18a:	d301      	bcc.n	1000e190 <__aeabi_uidiv+0xf0>
1000e18c:	004b      	lsls	r3, r1, #1
1000e18e:	1ac0      	subs	r0, r0, r3
1000e190:	4152      	adcs	r2, r2
1000e192:	1a41      	subs	r1, r0, r1
1000e194:	d200      	bcs.n	1000e198 <__aeabi_uidiv+0xf8>
1000e196:	4601      	mov	r1, r0
1000e198:	4152      	adcs	r2, r2
1000e19a:	4610      	mov	r0, r2
1000e19c:	4770      	bx	lr
1000e19e:	e7ff      	b.n	1000e1a0 <__aeabi_uidiv+0x100>
1000e1a0:	b501      	push	{r0, lr}
1000e1a2:	2000      	movs	r0, #0
1000e1a4:	f000 f806 	bl	1000e1b4 <__aeabi_idiv0>
1000e1a8:	bd02      	pop	{r1, pc}
1000e1aa:	46c0      	nop			; (mov r8, r8)

1000e1ac <__aeabi_uidivmod>:
1000e1ac:	2900      	cmp	r1, #0
1000e1ae:	d0f7      	beq.n	1000e1a0 <__aeabi_uidiv+0x100>
1000e1b0:	e776      	b.n	1000e0a0 <__aeabi_uidiv>
1000e1b2:	4770      	bx	lr

1000e1b4 <__aeabi_idiv0>:
1000e1b4:	4770      	bx	lr
1000e1b6:	46c0      	nop			; (mov r8, r8)

1000e1b8 <__aeabi_d2uiz>:
1000e1b8:	b570      	push	{r4, r5, r6, lr}
1000e1ba:	2200      	movs	r2, #0
1000e1bc:	4b0c      	ldr	r3, [pc, #48]	; (1000e1f0 <__aeabi_d2uiz+0x38>)
1000e1be:	0004      	movs	r4, r0
1000e1c0:	000d      	movs	r5, r1
1000e1c2:	f000 fe87 	bl	1000eed4 <__aeabi_dcmpge>
1000e1c6:	2800      	cmp	r0, #0
1000e1c8:	d104      	bne.n	1000e1d4 <__aeabi_d2uiz+0x1c>
1000e1ca:	0020      	movs	r0, r4
1000e1cc:	0029      	movs	r1, r5
1000e1ce:	f000 fddf 	bl	1000ed90 <__aeabi_d2iz>
1000e1d2:	bd70      	pop	{r4, r5, r6, pc}
1000e1d4:	4b06      	ldr	r3, [pc, #24]	; (1000e1f0 <__aeabi_d2uiz+0x38>)
1000e1d6:	2200      	movs	r2, #0
1000e1d8:	0020      	movs	r0, r4
1000e1da:	0029      	movs	r1, r5
1000e1dc:	f000 fa84 	bl	1000e6e8 <__aeabi_dsub>
1000e1e0:	f000 fdd6 	bl	1000ed90 <__aeabi_d2iz>
1000e1e4:	2380      	movs	r3, #128	; 0x80
1000e1e6:	061b      	lsls	r3, r3, #24
1000e1e8:	469c      	mov	ip, r3
1000e1ea:	4460      	add	r0, ip
1000e1ec:	e7f1      	b.n	1000e1d2 <__aeabi_d2uiz+0x1a>
1000e1ee:	46c0      	nop			; (mov r8, r8)
1000e1f0:	41e00000 	.word	0x41e00000

1000e1f4 <__aeabi_dmul>:
1000e1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e1f6:	465f      	mov	r7, fp
1000e1f8:	4656      	mov	r6, sl
1000e1fa:	464d      	mov	r5, r9
1000e1fc:	4644      	mov	r4, r8
1000e1fe:	b4f0      	push	{r4, r5, r6, r7}
1000e200:	030d      	lsls	r5, r1, #12
1000e202:	4699      	mov	r9, r3
1000e204:	004e      	lsls	r6, r1, #1
1000e206:	0b2b      	lsrs	r3, r5, #12
1000e208:	b087      	sub	sp, #28
1000e20a:	0007      	movs	r7, r0
1000e20c:	4692      	mov	sl, r2
1000e20e:	4680      	mov	r8, r0
1000e210:	469b      	mov	fp, r3
1000e212:	0d76      	lsrs	r6, r6, #21
1000e214:	0fcc      	lsrs	r4, r1, #31
1000e216:	2e00      	cmp	r6, #0
1000e218:	d069      	beq.n	1000e2ee <__aeabi_dmul+0xfa>
1000e21a:	4b6d      	ldr	r3, [pc, #436]	; (1000e3d0 <__aeabi_dmul+0x1dc>)
1000e21c:	429e      	cmp	r6, r3
1000e21e:	d035      	beq.n	1000e28c <__aeabi_dmul+0x98>
1000e220:	465b      	mov	r3, fp
1000e222:	2280      	movs	r2, #128	; 0x80
1000e224:	00dd      	lsls	r5, r3, #3
1000e226:	0412      	lsls	r2, r2, #16
1000e228:	0f43      	lsrs	r3, r0, #29
1000e22a:	4313      	orrs	r3, r2
1000e22c:	432b      	orrs	r3, r5
1000e22e:	469b      	mov	fp, r3
1000e230:	00c3      	lsls	r3, r0, #3
1000e232:	4698      	mov	r8, r3
1000e234:	4b67      	ldr	r3, [pc, #412]	; (1000e3d4 <__aeabi_dmul+0x1e0>)
1000e236:	2700      	movs	r7, #0
1000e238:	469c      	mov	ip, r3
1000e23a:	2300      	movs	r3, #0
1000e23c:	4466      	add	r6, ip
1000e23e:	9301      	str	r3, [sp, #4]
1000e240:	464a      	mov	r2, r9
1000e242:	0315      	lsls	r5, r2, #12
1000e244:	0050      	lsls	r0, r2, #1
1000e246:	0fd2      	lsrs	r2, r2, #31
1000e248:	4653      	mov	r3, sl
1000e24a:	0b2d      	lsrs	r5, r5, #12
1000e24c:	0d40      	lsrs	r0, r0, #21
1000e24e:	4691      	mov	r9, r2
1000e250:	d100      	bne.n	1000e254 <__aeabi_dmul+0x60>
1000e252:	e076      	b.n	1000e342 <__aeabi_dmul+0x14e>
1000e254:	4a5e      	ldr	r2, [pc, #376]	; (1000e3d0 <__aeabi_dmul+0x1dc>)
1000e256:	4290      	cmp	r0, r2
1000e258:	d06c      	beq.n	1000e334 <__aeabi_dmul+0x140>
1000e25a:	2280      	movs	r2, #128	; 0x80
1000e25c:	0f5b      	lsrs	r3, r3, #29
1000e25e:	0412      	lsls	r2, r2, #16
1000e260:	4313      	orrs	r3, r2
1000e262:	4a5c      	ldr	r2, [pc, #368]	; (1000e3d4 <__aeabi_dmul+0x1e0>)
1000e264:	00ed      	lsls	r5, r5, #3
1000e266:	4694      	mov	ip, r2
1000e268:	431d      	orrs	r5, r3
1000e26a:	4653      	mov	r3, sl
1000e26c:	2200      	movs	r2, #0
1000e26e:	00db      	lsls	r3, r3, #3
1000e270:	4460      	add	r0, ip
1000e272:	4649      	mov	r1, r9
1000e274:	1836      	adds	r6, r6, r0
1000e276:	1c70      	adds	r0, r6, #1
1000e278:	4061      	eors	r1, r4
1000e27a:	9002      	str	r0, [sp, #8]
1000e27c:	4317      	orrs	r7, r2
1000e27e:	2f0f      	cmp	r7, #15
1000e280:	d900      	bls.n	1000e284 <__aeabi_dmul+0x90>
1000e282:	e0af      	b.n	1000e3e4 <__aeabi_dmul+0x1f0>
1000e284:	4854      	ldr	r0, [pc, #336]	; (1000e3d8 <__aeabi_dmul+0x1e4>)
1000e286:	00bf      	lsls	r7, r7, #2
1000e288:	59c7      	ldr	r7, [r0, r7]
1000e28a:	46bf      	mov	pc, r7
1000e28c:	465b      	mov	r3, fp
1000e28e:	431f      	orrs	r7, r3
1000e290:	d000      	beq.n	1000e294 <__aeabi_dmul+0xa0>
1000e292:	e088      	b.n	1000e3a6 <__aeabi_dmul+0x1b2>
1000e294:	2300      	movs	r3, #0
1000e296:	469b      	mov	fp, r3
1000e298:	4698      	mov	r8, r3
1000e29a:	3302      	adds	r3, #2
1000e29c:	2708      	movs	r7, #8
1000e29e:	9301      	str	r3, [sp, #4]
1000e2a0:	e7ce      	b.n	1000e240 <__aeabi_dmul+0x4c>
1000e2a2:	4649      	mov	r1, r9
1000e2a4:	2a02      	cmp	r2, #2
1000e2a6:	d06a      	beq.n	1000e37e <__aeabi_dmul+0x18a>
1000e2a8:	2a03      	cmp	r2, #3
1000e2aa:	d100      	bne.n	1000e2ae <__aeabi_dmul+0xba>
1000e2ac:	e209      	b.n	1000e6c2 <__aeabi_dmul+0x4ce>
1000e2ae:	2a01      	cmp	r2, #1
1000e2b0:	d000      	beq.n	1000e2b4 <__aeabi_dmul+0xc0>
1000e2b2:	e1bb      	b.n	1000e62c <__aeabi_dmul+0x438>
1000e2b4:	4011      	ands	r1, r2
1000e2b6:	2200      	movs	r2, #0
1000e2b8:	2300      	movs	r3, #0
1000e2ba:	2500      	movs	r5, #0
1000e2bc:	4690      	mov	r8, r2
1000e2be:	b2cc      	uxtb	r4, r1
1000e2c0:	2100      	movs	r1, #0
1000e2c2:	032d      	lsls	r5, r5, #12
1000e2c4:	0d0a      	lsrs	r2, r1, #20
1000e2c6:	0512      	lsls	r2, r2, #20
1000e2c8:	0b2d      	lsrs	r5, r5, #12
1000e2ca:	4315      	orrs	r5, r2
1000e2cc:	4a43      	ldr	r2, [pc, #268]	; (1000e3dc <__aeabi_dmul+0x1e8>)
1000e2ce:	051b      	lsls	r3, r3, #20
1000e2d0:	4015      	ands	r5, r2
1000e2d2:	431d      	orrs	r5, r3
1000e2d4:	006d      	lsls	r5, r5, #1
1000e2d6:	07e4      	lsls	r4, r4, #31
1000e2d8:	086d      	lsrs	r5, r5, #1
1000e2da:	4325      	orrs	r5, r4
1000e2dc:	4640      	mov	r0, r8
1000e2de:	0029      	movs	r1, r5
1000e2e0:	b007      	add	sp, #28
1000e2e2:	bc3c      	pop	{r2, r3, r4, r5}
1000e2e4:	4690      	mov	r8, r2
1000e2e6:	4699      	mov	r9, r3
1000e2e8:	46a2      	mov	sl, r4
1000e2ea:	46ab      	mov	fp, r5
1000e2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e2ee:	4303      	orrs	r3, r0
1000e2f0:	d052      	beq.n	1000e398 <__aeabi_dmul+0x1a4>
1000e2f2:	465b      	mov	r3, fp
1000e2f4:	2b00      	cmp	r3, #0
1000e2f6:	d100      	bne.n	1000e2fa <__aeabi_dmul+0x106>
1000e2f8:	e18a      	b.n	1000e610 <__aeabi_dmul+0x41c>
1000e2fa:	4658      	mov	r0, fp
1000e2fc:	f000 fdf4 	bl	1000eee8 <__clzsi2>
1000e300:	0003      	movs	r3, r0
1000e302:	3b0b      	subs	r3, #11
1000e304:	2b1c      	cmp	r3, #28
1000e306:	dd00      	ble.n	1000e30a <__aeabi_dmul+0x116>
1000e308:	e17b      	b.n	1000e602 <__aeabi_dmul+0x40e>
1000e30a:	221d      	movs	r2, #29
1000e30c:	1ad3      	subs	r3, r2, r3
1000e30e:	003a      	movs	r2, r7
1000e310:	0001      	movs	r1, r0
1000e312:	465d      	mov	r5, fp
1000e314:	40da      	lsrs	r2, r3
1000e316:	3908      	subs	r1, #8
1000e318:	408d      	lsls	r5, r1
1000e31a:	0013      	movs	r3, r2
1000e31c:	408f      	lsls	r7, r1
1000e31e:	432b      	orrs	r3, r5
1000e320:	469b      	mov	fp, r3
1000e322:	46b8      	mov	r8, r7
1000e324:	4b2e      	ldr	r3, [pc, #184]	; (1000e3e0 <__aeabi_dmul+0x1ec>)
1000e326:	2700      	movs	r7, #0
1000e328:	469c      	mov	ip, r3
1000e32a:	2300      	movs	r3, #0
1000e32c:	4460      	add	r0, ip
1000e32e:	4246      	negs	r6, r0
1000e330:	9301      	str	r3, [sp, #4]
1000e332:	e785      	b.n	1000e240 <__aeabi_dmul+0x4c>
1000e334:	4652      	mov	r2, sl
1000e336:	432a      	orrs	r2, r5
1000e338:	d12c      	bne.n	1000e394 <__aeabi_dmul+0x1a0>
1000e33a:	2500      	movs	r5, #0
1000e33c:	2300      	movs	r3, #0
1000e33e:	2202      	movs	r2, #2
1000e340:	e797      	b.n	1000e272 <__aeabi_dmul+0x7e>
1000e342:	4652      	mov	r2, sl
1000e344:	432a      	orrs	r2, r5
1000e346:	d021      	beq.n	1000e38c <__aeabi_dmul+0x198>
1000e348:	2d00      	cmp	r5, #0
1000e34a:	d100      	bne.n	1000e34e <__aeabi_dmul+0x15a>
1000e34c:	e154      	b.n	1000e5f8 <__aeabi_dmul+0x404>
1000e34e:	0028      	movs	r0, r5
1000e350:	f000 fdca 	bl	1000eee8 <__clzsi2>
1000e354:	0003      	movs	r3, r0
1000e356:	3b0b      	subs	r3, #11
1000e358:	2b1c      	cmp	r3, #28
1000e35a:	dd00      	ble.n	1000e35e <__aeabi_dmul+0x16a>
1000e35c:	e146      	b.n	1000e5ec <__aeabi_dmul+0x3f8>
1000e35e:	211d      	movs	r1, #29
1000e360:	1acb      	subs	r3, r1, r3
1000e362:	4651      	mov	r1, sl
1000e364:	0002      	movs	r2, r0
1000e366:	40d9      	lsrs	r1, r3
1000e368:	4653      	mov	r3, sl
1000e36a:	3a08      	subs	r2, #8
1000e36c:	4095      	lsls	r5, r2
1000e36e:	4093      	lsls	r3, r2
1000e370:	430d      	orrs	r5, r1
1000e372:	4a1b      	ldr	r2, [pc, #108]	; (1000e3e0 <__aeabi_dmul+0x1ec>)
1000e374:	4694      	mov	ip, r2
1000e376:	4460      	add	r0, ip
1000e378:	4240      	negs	r0, r0
1000e37a:	2200      	movs	r2, #0
1000e37c:	e779      	b.n	1000e272 <__aeabi_dmul+0x7e>
1000e37e:	2401      	movs	r4, #1
1000e380:	2200      	movs	r2, #0
1000e382:	400c      	ands	r4, r1
1000e384:	4b12      	ldr	r3, [pc, #72]	; (1000e3d0 <__aeabi_dmul+0x1dc>)
1000e386:	2500      	movs	r5, #0
1000e388:	4690      	mov	r8, r2
1000e38a:	e799      	b.n	1000e2c0 <__aeabi_dmul+0xcc>
1000e38c:	2500      	movs	r5, #0
1000e38e:	2300      	movs	r3, #0
1000e390:	2201      	movs	r2, #1
1000e392:	e76e      	b.n	1000e272 <__aeabi_dmul+0x7e>
1000e394:	2203      	movs	r2, #3
1000e396:	e76c      	b.n	1000e272 <__aeabi_dmul+0x7e>
1000e398:	2300      	movs	r3, #0
1000e39a:	469b      	mov	fp, r3
1000e39c:	4698      	mov	r8, r3
1000e39e:	3301      	adds	r3, #1
1000e3a0:	2704      	movs	r7, #4
1000e3a2:	9301      	str	r3, [sp, #4]
1000e3a4:	e74c      	b.n	1000e240 <__aeabi_dmul+0x4c>
1000e3a6:	2303      	movs	r3, #3
1000e3a8:	270c      	movs	r7, #12
1000e3aa:	9301      	str	r3, [sp, #4]
1000e3ac:	e748      	b.n	1000e240 <__aeabi_dmul+0x4c>
1000e3ae:	2300      	movs	r3, #0
1000e3b0:	2580      	movs	r5, #128	; 0x80
1000e3b2:	4698      	mov	r8, r3
1000e3b4:	2400      	movs	r4, #0
1000e3b6:	032d      	lsls	r5, r5, #12
1000e3b8:	4b05      	ldr	r3, [pc, #20]	; (1000e3d0 <__aeabi_dmul+0x1dc>)
1000e3ba:	e781      	b.n	1000e2c0 <__aeabi_dmul+0xcc>
1000e3bc:	465d      	mov	r5, fp
1000e3be:	4643      	mov	r3, r8
1000e3c0:	9a01      	ldr	r2, [sp, #4]
1000e3c2:	e76f      	b.n	1000e2a4 <__aeabi_dmul+0xb0>
1000e3c4:	465d      	mov	r5, fp
1000e3c6:	4643      	mov	r3, r8
1000e3c8:	0021      	movs	r1, r4
1000e3ca:	9a01      	ldr	r2, [sp, #4]
1000e3cc:	e76a      	b.n	1000e2a4 <__aeabi_dmul+0xb0>
1000e3ce:	46c0      	nop			; (mov r8, r8)
1000e3d0:	000007ff 	.word	0x000007ff
1000e3d4:	fffffc01 	.word	0xfffffc01
1000e3d8:	10010e78 	.word	0x10010e78
1000e3dc:	800fffff 	.word	0x800fffff
1000e3e0:	000003f3 	.word	0x000003f3
1000e3e4:	4642      	mov	r2, r8
1000e3e6:	0c12      	lsrs	r2, r2, #16
1000e3e8:	4691      	mov	r9, r2
1000e3ea:	0c1a      	lsrs	r2, r3, #16
1000e3ec:	4694      	mov	ip, r2
1000e3ee:	4642      	mov	r2, r8
1000e3f0:	0417      	lsls	r7, r2, #16
1000e3f2:	464a      	mov	r2, r9
1000e3f4:	041b      	lsls	r3, r3, #16
1000e3f6:	0c1b      	lsrs	r3, r3, #16
1000e3f8:	435a      	muls	r2, r3
1000e3fa:	4660      	mov	r0, ip
1000e3fc:	4690      	mov	r8, r2
1000e3fe:	464a      	mov	r2, r9
1000e400:	4342      	muls	r2, r0
1000e402:	0010      	movs	r0, r2
1000e404:	9203      	str	r2, [sp, #12]
1000e406:	4662      	mov	r2, ip
1000e408:	001c      	movs	r4, r3
1000e40a:	0c3f      	lsrs	r7, r7, #16
1000e40c:	437a      	muls	r2, r7
1000e40e:	437c      	muls	r4, r7
1000e410:	4442      	add	r2, r8
1000e412:	9201      	str	r2, [sp, #4]
1000e414:	0c22      	lsrs	r2, r4, #16
1000e416:	4692      	mov	sl, r2
1000e418:	9a01      	ldr	r2, [sp, #4]
1000e41a:	4452      	add	r2, sl
1000e41c:	4590      	cmp	r8, r2
1000e41e:	d906      	bls.n	1000e42e <__aeabi_dmul+0x23a>
1000e420:	4682      	mov	sl, r0
1000e422:	2080      	movs	r0, #128	; 0x80
1000e424:	0240      	lsls	r0, r0, #9
1000e426:	4680      	mov	r8, r0
1000e428:	44c2      	add	sl, r8
1000e42a:	4650      	mov	r0, sl
1000e42c:	9003      	str	r0, [sp, #12]
1000e42e:	0c10      	lsrs	r0, r2, #16
1000e430:	9004      	str	r0, [sp, #16]
1000e432:	4648      	mov	r0, r9
1000e434:	0424      	lsls	r4, r4, #16
1000e436:	0c24      	lsrs	r4, r4, #16
1000e438:	0412      	lsls	r2, r2, #16
1000e43a:	1912      	adds	r2, r2, r4
1000e43c:	9205      	str	r2, [sp, #20]
1000e43e:	0c2a      	lsrs	r2, r5, #16
1000e440:	042d      	lsls	r5, r5, #16
1000e442:	0c2d      	lsrs	r5, r5, #16
1000e444:	4368      	muls	r0, r5
1000e446:	002c      	movs	r4, r5
1000e448:	4682      	mov	sl, r0
1000e44a:	4648      	mov	r0, r9
1000e44c:	437c      	muls	r4, r7
1000e44e:	4350      	muls	r0, r2
1000e450:	4681      	mov	r9, r0
1000e452:	0c20      	lsrs	r0, r4, #16
1000e454:	4680      	mov	r8, r0
1000e456:	4357      	muls	r7, r2
1000e458:	4457      	add	r7, sl
1000e45a:	4447      	add	r7, r8
1000e45c:	45ba      	cmp	sl, r7
1000e45e:	d903      	bls.n	1000e468 <__aeabi_dmul+0x274>
1000e460:	2080      	movs	r0, #128	; 0x80
1000e462:	0240      	lsls	r0, r0, #9
1000e464:	4680      	mov	r8, r0
1000e466:	44c1      	add	r9, r8
1000e468:	0c38      	lsrs	r0, r7, #16
1000e46a:	043f      	lsls	r7, r7, #16
1000e46c:	46b8      	mov	r8, r7
1000e46e:	4448      	add	r0, r9
1000e470:	0424      	lsls	r4, r4, #16
1000e472:	0c24      	lsrs	r4, r4, #16
1000e474:	9001      	str	r0, [sp, #4]
1000e476:	9804      	ldr	r0, [sp, #16]
1000e478:	44a0      	add	r8, r4
1000e47a:	4440      	add	r0, r8
1000e47c:	9004      	str	r0, [sp, #16]
1000e47e:	4658      	mov	r0, fp
1000e480:	0c00      	lsrs	r0, r0, #16
1000e482:	4681      	mov	r9, r0
1000e484:	4658      	mov	r0, fp
1000e486:	0404      	lsls	r4, r0, #16
1000e488:	0c20      	lsrs	r0, r4, #16
1000e48a:	4682      	mov	sl, r0
1000e48c:	0007      	movs	r7, r0
1000e48e:	4648      	mov	r0, r9
1000e490:	435f      	muls	r7, r3
1000e492:	464c      	mov	r4, r9
1000e494:	4343      	muls	r3, r0
1000e496:	4660      	mov	r0, ip
1000e498:	4360      	muls	r0, r4
1000e49a:	4664      	mov	r4, ip
1000e49c:	4683      	mov	fp, r0
1000e49e:	4650      	mov	r0, sl
1000e4a0:	4344      	muls	r4, r0
1000e4a2:	0c38      	lsrs	r0, r7, #16
1000e4a4:	4684      	mov	ip, r0
1000e4a6:	18e4      	adds	r4, r4, r3
1000e4a8:	4464      	add	r4, ip
1000e4aa:	42a3      	cmp	r3, r4
1000e4ac:	d903      	bls.n	1000e4b6 <__aeabi_dmul+0x2c2>
1000e4ae:	2380      	movs	r3, #128	; 0x80
1000e4b0:	025b      	lsls	r3, r3, #9
1000e4b2:	469c      	mov	ip, r3
1000e4b4:	44e3      	add	fp, ip
1000e4b6:	4648      	mov	r0, r9
1000e4b8:	043f      	lsls	r7, r7, #16
1000e4ba:	0c23      	lsrs	r3, r4, #16
1000e4bc:	0c3f      	lsrs	r7, r7, #16
1000e4be:	0424      	lsls	r4, r4, #16
1000e4c0:	19e4      	adds	r4, r4, r7
1000e4c2:	4657      	mov	r7, sl
1000e4c4:	4368      	muls	r0, r5
1000e4c6:	436f      	muls	r7, r5
1000e4c8:	4684      	mov	ip, r0
1000e4ca:	464d      	mov	r5, r9
1000e4cc:	4650      	mov	r0, sl
1000e4ce:	4355      	muls	r5, r2
1000e4d0:	4342      	muls	r2, r0
1000e4d2:	0c38      	lsrs	r0, r7, #16
1000e4d4:	4681      	mov	r9, r0
1000e4d6:	4462      	add	r2, ip
1000e4d8:	444a      	add	r2, r9
1000e4da:	445b      	add	r3, fp
1000e4dc:	4594      	cmp	ip, r2
1000e4de:	d903      	bls.n	1000e4e8 <__aeabi_dmul+0x2f4>
1000e4e0:	2080      	movs	r0, #128	; 0x80
1000e4e2:	0240      	lsls	r0, r0, #9
1000e4e4:	4684      	mov	ip, r0
1000e4e6:	4465      	add	r5, ip
1000e4e8:	9803      	ldr	r0, [sp, #12]
1000e4ea:	043f      	lsls	r7, r7, #16
1000e4ec:	4683      	mov	fp, r0
1000e4ee:	9804      	ldr	r0, [sp, #16]
1000e4f0:	0c3f      	lsrs	r7, r7, #16
1000e4f2:	4684      	mov	ip, r0
1000e4f4:	44e3      	add	fp, ip
1000e4f6:	45c3      	cmp	fp, r8
1000e4f8:	4180      	sbcs	r0, r0
1000e4fa:	4240      	negs	r0, r0
1000e4fc:	4682      	mov	sl, r0
1000e4fe:	0410      	lsls	r0, r2, #16
1000e500:	4684      	mov	ip, r0
1000e502:	9801      	ldr	r0, [sp, #4]
1000e504:	4467      	add	r7, ip
1000e506:	4684      	mov	ip, r0
1000e508:	4467      	add	r7, ip
1000e50a:	44a3      	add	fp, r4
1000e50c:	46bc      	mov	ip, r7
1000e50e:	45a3      	cmp	fp, r4
1000e510:	41a4      	sbcs	r4, r4
1000e512:	4699      	mov	r9, r3
1000e514:	44d4      	add	ip, sl
1000e516:	4264      	negs	r4, r4
1000e518:	4287      	cmp	r7, r0
1000e51a:	41bf      	sbcs	r7, r7
1000e51c:	45d4      	cmp	ip, sl
1000e51e:	4180      	sbcs	r0, r0
1000e520:	44e1      	add	r9, ip
1000e522:	46a0      	mov	r8, r4
1000e524:	4599      	cmp	r9, r3
1000e526:	419b      	sbcs	r3, r3
1000e528:	427f      	negs	r7, r7
1000e52a:	4240      	negs	r0, r0
1000e52c:	44c8      	add	r8, r9
1000e52e:	4307      	orrs	r7, r0
1000e530:	0c12      	lsrs	r2, r2, #16
1000e532:	18ba      	adds	r2, r7, r2
1000e534:	45a0      	cmp	r8, r4
1000e536:	41a4      	sbcs	r4, r4
1000e538:	425f      	negs	r7, r3
1000e53a:	003b      	movs	r3, r7
1000e53c:	4264      	negs	r4, r4
1000e53e:	4323      	orrs	r3, r4
1000e540:	18d7      	adds	r7, r2, r3
1000e542:	4643      	mov	r3, r8
1000e544:	197d      	adds	r5, r7, r5
1000e546:	0ddb      	lsrs	r3, r3, #23
1000e548:	026d      	lsls	r5, r5, #9
1000e54a:	431d      	orrs	r5, r3
1000e54c:	465b      	mov	r3, fp
1000e54e:	025a      	lsls	r2, r3, #9
1000e550:	9b05      	ldr	r3, [sp, #20]
1000e552:	431a      	orrs	r2, r3
1000e554:	1e53      	subs	r3, r2, #1
1000e556:	419a      	sbcs	r2, r3
1000e558:	465b      	mov	r3, fp
1000e55a:	0ddb      	lsrs	r3, r3, #23
1000e55c:	431a      	orrs	r2, r3
1000e55e:	4643      	mov	r3, r8
1000e560:	025b      	lsls	r3, r3, #9
1000e562:	4313      	orrs	r3, r2
1000e564:	01ea      	lsls	r2, r5, #7
1000e566:	d507      	bpl.n	1000e578 <__aeabi_dmul+0x384>
1000e568:	2201      	movs	r2, #1
1000e56a:	085c      	lsrs	r4, r3, #1
1000e56c:	4013      	ands	r3, r2
1000e56e:	4323      	orrs	r3, r4
1000e570:	07ea      	lsls	r2, r5, #31
1000e572:	9e02      	ldr	r6, [sp, #8]
1000e574:	4313      	orrs	r3, r2
1000e576:	086d      	lsrs	r5, r5, #1
1000e578:	4a57      	ldr	r2, [pc, #348]	; (1000e6d8 <__aeabi_dmul+0x4e4>)
1000e57a:	18b2      	adds	r2, r6, r2
1000e57c:	2a00      	cmp	r2, #0
1000e57e:	dd4b      	ble.n	1000e618 <__aeabi_dmul+0x424>
1000e580:	0758      	lsls	r0, r3, #29
1000e582:	d009      	beq.n	1000e598 <__aeabi_dmul+0x3a4>
1000e584:	200f      	movs	r0, #15
1000e586:	4018      	ands	r0, r3
1000e588:	2804      	cmp	r0, #4
1000e58a:	d005      	beq.n	1000e598 <__aeabi_dmul+0x3a4>
1000e58c:	1d18      	adds	r0, r3, #4
1000e58e:	4298      	cmp	r0, r3
1000e590:	419b      	sbcs	r3, r3
1000e592:	425b      	negs	r3, r3
1000e594:	18ed      	adds	r5, r5, r3
1000e596:	0003      	movs	r3, r0
1000e598:	01e8      	lsls	r0, r5, #7
1000e59a:	d504      	bpl.n	1000e5a6 <__aeabi_dmul+0x3b2>
1000e59c:	4a4f      	ldr	r2, [pc, #316]	; (1000e6dc <__aeabi_dmul+0x4e8>)
1000e59e:	4015      	ands	r5, r2
1000e5a0:	2280      	movs	r2, #128	; 0x80
1000e5a2:	00d2      	lsls	r2, r2, #3
1000e5a4:	18b2      	adds	r2, r6, r2
1000e5a6:	484e      	ldr	r0, [pc, #312]	; (1000e6e0 <__aeabi_dmul+0x4ec>)
1000e5a8:	4282      	cmp	r2, r0
1000e5aa:	dd00      	ble.n	1000e5ae <__aeabi_dmul+0x3ba>
1000e5ac:	e6e7      	b.n	1000e37e <__aeabi_dmul+0x18a>
1000e5ae:	2401      	movs	r4, #1
1000e5b0:	08db      	lsrs	r3, r3, #3
1000e5b2:	0768      	lsls	r0, r5, #29
1000e5b4:	4318      	orrs	r0, r3
1000e5b6:	026d      	lsls	r5, r5, #9
1000e5b8:	0553      	lsls	r3, r2, #21
1000e5ba:	4680      	mov	r8, r0
1000e5bc:	0b2d      	lsrs	r5, r5, #12
1000e5be:	0d5b      	lsrs	r3, r3, #21
1000e5c0:	400c      	ands	r4, r1
1000e5c2:	e67d      	b.n	1000e2c0 <__aeabi_dmul+0xcc>
1000e5c4:	2280      	movs	r2, #128	; 0x80
1000e5c6:	4659      	mov	r1, fp
1000e5c8:	0312      	lsls	r2, r2, #12
1000e5ca:	4211      	tst	r1, r2
1000e5cc:	d008      	beq.n	1000e5e0 <__aeabi_dmul+0x3ec>
1000e5ce:	4215      	tst	r5, r2
1000e5d0:	d106      	bne.n	1000e5e0 <__aeabi_dmul+0x3ec>
1000e5d2:	4315      	orrs	r5, r2
1000e5d4:	032d      	lsls	r5, r5, #12
1000e5d6:	4698      	mov	r8, r3
1000e5d8:	0b2d      	lsrs	r5, r5, #12
1000e5da:	464c      	mov	r4, r9
1000e5dc:	4b41      	ldr	r3, [pc, #260]	; (1000e6e4 <__aeabi_dmul+0x4f0>)
1000e5de:	e66f      	b.n	1000e2c0 <__aeabi_dmul+0xcc>
1000e5e0:	465d      	mov	r5, fp
1000e5e2:	4315      	orrs	r5, r2
1000e5e4:	032d      	lsls	r5, r5, #12
1000e5e6:	0b2d      	lsrs	r5, r5, #12
1000e5e8:	4b3e      	ldr	r3, [pc, #248]	; (1000e6e4 <__aeabi_dmul+0x4f0>)
1000e5ea:	e669      	b.n	1000e2c0 <__aeabi_dmul+0xcc>
1000e5ec:	0003      	movs	r3, r0
1000e5ee:	4655      	mov	r5, sl
1000e5f0:	3b28      	subs	r3, #40	; 0x28
1000e5f2:	409d      	lsls	r5, r3
1000e5f4:	2300      	movs	r3, #0
1000e5f6:	e6bc      	b.n	1000e372 <__aeabi_dmul+0x17e>
1000e5f8:	4650      	mov	r0, sl
1000e5fa:	f000 fc75 	bl	1000eee8 <__clzsi2>
1000e5fe:	3020      	adds	r0, #32
1000e600:	e6a8      	b.n	1000e354 <__aeabi_dmul+0x160>
1000e602:	0003      	movs	r3, r0
1000e604:	3b28      	subs	r3, #40	; 0x28
1000e606:	409f      	lsls	r7, r3
1000e608:	2300      	movs	r3, #0
1000e60a:	46bb      	mov	fp, r7
1000e60c:	4698      	mov	r8, r3
1000e60e:	e689      	b.n	1000e324 <__aeabi_dmul+0x130>
1000e610:	f000 fc6a 	bl	1000eee8 <__clzsi2>
1000e614:	3020      	adds	r0, #32
1000e616:	e673      	b.n	1000e300 <__aeabi_dmul+0x10c>
1000e618:	2401      	movs	r4, #1
1000e61a:	1aa6      	subs	r6, r4, r2
1000e61c:	2e38      	cmp	r6, #56	; 0x38
1000e61e:	dd07      	ble.n	1000e630 <__aeabi_dmul+0x43c>
1000e620:	2200      	movs	r2, #0
1000e622:	400c      	ands	r4, r1
1000e624:	2300      	movs	r3, #0
1000e626:	2500      	movs	r5, #0
1000e628:	4690      	mov	r8, r2
1000e62a:	e649      	b.n	1000e2c0 <__aeabi_dmul+0xcc>
1000e62c:	9e02      	ldr	r6, [sp, #8]
1000e62e:	e7a3      	b.n	1000e578 <__aeabi_dmul+0x384>
1000e630:	2e1f      	cmp	r6, #31
1000e632:	dc20      	bgt.n	1000e676 <__aeabi_dmul+0x482>
1000e634:	2220      	movs	r2, #32
1000e636:	002c      	movs	r4, r5
1000e638:	0018      	movs	r0, r3
1000e63a:	1b92      	subs	r2, r2, r6
1000e63c:	40f0      	lsrs	r0, r6
1000e63e:	4094      	lsls	r4, r2
1000e640:	4093      	lsls	r3, r2
1000e642:	4304      	orrs	r4, r0
1000e644:	1e58      	subs	r0, r3, #1
1000e646:	4183      	sbcs	r3, r0
1000e648:	431c      	orrs	r4, r3
1000e64a:	40f5      	lsrs	r5, r6
1000e64c:	0763      	lsls	r3, r4, #29
1000e64e:	d009      	beq.n	1000e664 <__aeabi_dmul+0x470>
1000e650:	230f      	movs	r3, #15
1000e652:	4023      	ands	r3, r4
1000e654:	2b04      	cmp	r3, #4
1000e656:	d005      	beq.n	1000e664 <__aeabi_dmul+0x470>
1000e658:	0023      	movs	r3, r4
1000e65a:	1d1c      	adds	r4, r3, #4
1000e65c:	429c      	cmp	r4, r3
1000e65e:	4192      	sbcs	r2, r2
1000e660:	4252      	negs	r2, r2
1000e662:	18ad      	adds	r5, r5, r2
1000e664:	022b      	lsls	r3, r5, #8
1000e666:	d51f      	bpl.n	1000e6a8 <__aeabi_dmul+0x4b4>
1000e668:	2401      	movs	r4, #1
1000e66a:	2200      	movs	r2, #0
1000e66c:	400c      	ands	r4, r1
1000e66e:	2301      	movs	r3, #1
1000e670:	2500      	movs	r5, #0
1000e672:	4690      	mov	r8, r2
1000e674:	e624      	b.n	1000e2c0 <__aeabi_dmul+0xcc>
1000e676:	201f      	movs	r0, #31
1000e678:	002c      	movs	r4, r5
1000e67a:	4240      	negs	r0, r0
1000e67c:	1a82      	subs	r2, r0, r2
1000e67e:	40d4      	lsrs	r4, r2
1000e680:	2e20      	cmp	r6, #32
1000e682:	d01c      	beq.n	1000e6be <__aeabi_dmul+0x4ca>
1000e684:	2240      	movs	r2, #64	; 0x40
1000e686:	1b96      	subs	r6, r2, r6
1000e688:	40b5      	lsls	r5, r6
1000e68a:	432b      	orrs	r3, r5
1000e68c:	1e58      	subs	r0, r3, #1
1000e68e:	4183      	sbcs	r3, r0
1000e690:	2007      	movs	r0, #7
1000e692:	4323      	orrs	r3, r4
1000e694:	4018      	ands	r0, r3
1000e696:	2500      	movs	r5, #0
1000e698:	2800      	cmp	r0, #0
1000e69a:	d009      	beq.n	1000e6b0 <__aeabi_dmul+0x4bc>
1000e69c:	220f      	movs	r2, #15
1000e69e:	2500      	movs	r5, #0
1000e6a0:	401a      	ands	r2, r3
1000e6a2:	001c      	movs	r4, r3
1000e6a4:	2a04      	cmp	r2, #4
1000e6a6:	d1d8      	bne.n	1000e65a <__aeabi_dmul+0x466>
1000e6a8:	0023      	movs	r3, r4
1000e6aa:	0768      	lsls	r0, r5, #29
1000e6ac:	026d      	lsls	r5, r5, #9
1000e6ae:	0b2d      	lsrs	r5, r5, #12
1000e6b0:	2401      	movs	r4, #1
1000e6b2:	08db      	lsrs	r3, r3, #3
1000e6b4:	4303      	orrs	r3, r0
1000e6b6:	4698      	mov	r8, r3
1000e6b8:	400c      	ands	r4, r1
1000e6ba:	2300      	movs	r3, #0
1000e6bc:	e600      	b.n	1000e2c0 <__aeabi_dmul+0xcc>
1000e6be:	2500      	movs	r5, #0
1000e6c0:	e7e3      	b.n	1000e68a <__aeabi_dmul+0x496>
1000e6c2:	2280      	movs	r2, #128	; 0x80
1000e6c4:	2401      	movs	r4, #1
1000e6c6:	0312      	lsls	r2, r2, #12
1000e6c8:	4315      	orrs	r5, r2
1000e6ca:	032d      	lsls	r5, r5, #12
1000e6cc:	4698      	mov	r8, r3
1000e6ce:	0b2d      	lsrs	r5, r5, #12
1000e6d0:	400c      	ands	r4, r1
1000e6d2:	4b04      	ldr	r3, [pc, #16]	; (1000e6e4 <__aeabi_dmul+0x4f0>)
1000e6d4:	e5f4      	b.n	1000e2c0 <__aeabi_dmul+0xcc>
1000e6d6:	46c0      	nop			; (mov r8, r8)
1000e6d8:	000003ff 	.word	0x000003ff
1000e6dc:	feffffff 	.word	0xfeffffff
1000e6e0:	000007fe 	.word	0x000007fe
1000e6e4:	000007ff 	.word	0x000007ff

1000e6e8 <__aeabi_dsub>:
1000e6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e6ea:	4657      	mov	r7, sl
1000e6ec:	464e      	mov	r6, r9
1000e6ee:	4645      	mov	r5, r8
1000e6f0:	b4e0      	push	{r5, r6, r7}
1000e6f2:	000e      	movs	r6, r1
1000e6f4:	0011      	movs	r1, r2
1000e6f6:	0ff2      	lsrs	r2, r6, #31
1000e6f8:	4692      	mov	sl, r2
1000e6fa:	00c5      	lsls	r5, r0, #3
1000e6fc:	0f42      	lsrs	r2, r0, #29
1000e6fe:	0318      	lsls	r0, r3, #12
1000e700:	0337      	lsls	r7, r6, #12
1000e702:	0074      	lsls	r4, r6, #1
1000e704:	0a40      	lsrs	r0, r0, #9
1000e706:	0f4e      	lsrs	r6, r1, #29
1000e708:	0a7f      	lsrs	r7, r7, #9
1000e70a:	4330      	orrs	r0, r6
1000e70c:	4ecf      	ldr	r6, [pc, #828]	; (1000ea4c <__aeabi_dsub+0x364>)
1000e70e:	4317      	orrs	r7, r2
1000e710:	005a      	lsls	r2, r3, #1
1000e712:	0d64      	lsrs	r4, r4, #21
1000e714:	0d52      	lsrs	r2, r2, #21
1000e716:	0fdb      	lsrs	r3, r3, #31
1000e718:	00c9      	lsls	r1, r1, #3
1000e71a:	42b2      	cmp	r2, r6
1000e71c:	d100      	bne.n	1000e720 <__aeabi_dsub+0x38>
1000e71e:	e0e5      	b.n	1000e8ec <__aeabi_dsub+0x204>
1000e720:	2601      	movs	r6, #1
1000e722:	4073      	eors	r3, r6
1000e724:	1aa6      	subs	r6, r4, r2
1000e726:	46b4      	mov	ip, r6
1000e728:	4553      	cmp	r3, sl
1000e72a:	d100      	bne.n	1000e72e <__aeabi_dsub+0x46>
1000e72c:	e0af      	b.n	1000e88e <__aeabi_dsub+0x1a6>
1000e72e:	2e00      	cmp	r6, #0
1000e730:	dc00      	bgt.n	1000e734 <__aeabi_dsub+0x4c>
1000e732:	e10d      	b.n	1000e950 <__aeabi_dsub+0x268>
1000e734:	2a00      	cmp	r2, #0
1000e736:	d13a      	bne.n	1000e7ae <__aeabi_dsub+0xc6>
1000e738:	0003      	movs	r3, r0
1000e73a:	430b      	orrs	r3, r1
1000e73c:	d000      	beq.n	1000e740 <__aeabi_dsub+0x58>
1000e73e:	e0e4      	b.n	1000e90a <__aeabi_dsub+0x222>
1000e740:	076b      	lsls	r3, r5, #29
1000e742:	d009      	beq.n	1000e758 <__aeabi_dsub+0x70>
1000e744:	230f      	movs	r3, #15
1000e746:	402b      	ands	r3, r5
1000e748:	2b04      	cmp	r3, #4
1000e74a:	d005      	beq.n	1000e758 <__aeabi_dsub+0x70>
1000e74c:	1d2b      	adds	r3, r5, #4
1000e74e:	42ab      	cmp	r3, r5
1000e750:	41ad      	sbcs	r5, r5
1000e752:	426d      	negs	r5, r5
1000e754:	197f      	adds	r7, r7, r5
1000e756:	001d      	movs	r5, r3
1000e758:	023b      	lsls	r3, r7, #8
1000e75a:	d400      	bmi.n	1000e75e <__aeabi_dsub+0x76>
1000e75c:	e088      	b.n	1000e870 <__aeabi_dsub+0x188>
1000e75e:	4bbb      	ldr	r3, [pc, #748]	; (1000ea4c <__aeabi_dsub+0x364>)
1000e760:	3401      	adds	r4, #1
1000e762:	429c      	cmp	r4, r3
1000e764:	d100      	bne.n	1000e768 <__aeabi_dsub+0x80>
1000e766:	e110      	b.n	1000e98a <__aeabi_dsub+0x2a2>
1000e768:	003a      	movs	r2, r7
1000e76a:	4bb9      	ldr	r3, [pc, #740]	; (1000ea50 <__aeabi_dsub+0x368>)
1000e76c:	4651      	mov	r1, sl
1000e76e:	401a      	ands	r2, r3
1000e770:	2301      	movs	r3, #1
1000e772:	0750      	lsls	r0, r2, #29
1000e774:	08ed      	lsrs	r5, r5, #3
1000e776:	0252      	lsls	r2, r2, #9
1000e778:	0564      	lsls	r4, r4, #21
1000e77a:	4305      	orrs	r5, r0
1000e77c:	0b12      	lsrs	r2, r2, #12
1000e77e:	0d64      	lsrs	r4, r4, #21
1000e780:	400b      	ands	r3, r1
1000e782:	2100      	movs	r1, #0
1000e784:	0028      	movs	r0, r5
1000e786:	0312      	lsls	r2, r2, #12
1000e788:	0d0d      	lsrs	r5, r1, #20
1000e78a:	0b12      	lsrs	r2, r2, #12
1000e78c:	0564      	lsls	r4, r4, #21
1000e78e:	052d      	lsls	r5, r5, #20
1000e790:	4315      	orrs	r5, r2
1000e792:	0862      	lsrs	r2, r4, #1
1000e794:	4caf      	ldr	r4, [pc, #700]	; (1000ea54 <__aeabi_dsub+0x36c>)
1000e796:	07db      	lsls	r3, r3, #31
1000e798:	402c      	ands	r4, r5
1000e79a:	4314      	orrs	r4, r2
1000e79c:	0064      	lsls	r4, r4, #1
1000e79e:	0864      	lsrs	r4, r4, #1
1000e7a0:	431c      	orrs	r4, r3
1000e7a2:	0021      	movs	r1, r4
1000e7a4:	bc1c      	pop	{r2, r3, r4}
1000e7a6:	4690      	mov	r8, r2
1000e7a8:	4699      	mov	r9, r3
1000e7aa:	46a2      	mov	sl, r4
1000e7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e7ae:	4ba7      	ldr	r3, [pc, #668]	; (1000ea4c <__aeabi_dsub+0x364>)
1000e7b0:	429c      	cmp	r4, r3
1000e7b2:	d0c5      	beq.n	1000e740 <__aeabi_dsub+0x58>
1000e7b4:	2380      	movs	r3, #128	; 0x80
1000e7b6:	041b      	lsls	r3, r3, #16
1000e7b8:	4318      	orrs	r0, r3
1000e7ba:	4663      	mov	r3, ip
1000e7bc:	2b38      	cmp	r3, #56	; 0x38
1000e7be:	dd00      	ble.n	1000e7c2 <__aeabi_dsub+0xda>
1000e7c0:	e0fd      	b.n	1000e9be <__aeabi_dsub+0x2d6>
1000e7c2:	2b1f      	cmp	r3, #31
1000e7c4:	dd00      	ble.n	1000e7c8 <__aeabi_dsub+0xe0>
1000e7c6:	e130      	b.n	1000ea2a <__aeabi_dsub+0x342>
1000e7c8:	4662      	mov	r2, ip
1000e7ca:	2320      	movs	r3, #32
1000e7cc:	1a9b      	subs	r3, r3, r2
1000e7ce:	0002      	movs	r2, r0
1000e7d0:	409a      	lsls	r2, r3
1000e7d2:	4666      	mov	r6, ip
1000e7d4:	4690      	mov	r8, r2
1000e7d6:	000a      	movs	r2, r1
1000e7d8:	4099      	lsls	r1, r3
1000e7da:	40f2      	lsrs	r2, r6
1000e7dc:	4646      	mov	r6, r8
1000e7de:	1e4b      	subs	r3, r1, #1
1000e7e0:	4199      	sbcs	r1, r3
1000e7e2:	4332      	orrs	r2, r6
1000e7e4:	4311      	orrs	r1, r2
1000e7e6:	4663      	mov	r3, ip
1000e7e8:	0002      	movs	r2, r0
1000e7ea:	40da      	lsrs	r2, r3
1000e7ec:	1a69      	subs	r1, r5, r1
1000e7ee:	428d      	cmp	r5, r1
1000e7f0:	419b      	sbcs	r3, r3
1000e7f2:	000d      	movs	r5, r1
1000e7f4:	1aba      	subs	r2, r7, r2
1000e7f6:	425b      	negs	r3, r3
1000e7f8:	1ad7      	subs	r7, r2, r3
1000e7fa:	023b      	lsls	r3, r7, #8
1000e7fc:	d535      	bpl.n	1000e86a <__aeabi_dsub+0x182>
1000e7fe:	027a      	lsls	r2, r7, #9
1000e800:	0a53      	lsrs	r3, r2, #9
1000e802:	4698      	mov	r8, r3
1000e804:	4643      	mov	r3, r8
1000e806:	2b00      	cmp	r3, #0
1000e808:	d100      	bne.n	1000e80c <__aeabi_dsub+0x124>
1000e80a:	e0c4      	b.n	1000e996 <__aeabi_dsub+0x2ae>
1000e80c:	4640      	mov	r0, r8
1000e80e:	f000 fb6b 	bl	1000eee8 <__clzsi2>
1000e812:	0003      	movs	r3, r0
1000e814:	3b08      	subs	r3, #8
1000e816:	2b1f      	cmp	r3, #31
1000e818:	dd00      	ble.n	1000e81c <__aeabi_dsub+0x134>
1000e81a:	e0c5      	b.n	1000e9a8 <__aeabi_dsub+0x2c0>
1000e81c:	2220      	movs	r2, #32
1000e81e:	0029      	movs	r1, r5
1000e820:	1ad2      	subs	r2, r2, r3
1000e822:	4647      	mov	r7, r8
1000e824:	40d1      	lsrs	r1, r2
1000e826:	409f      	lsls	r7, r3
1000e828:	000a      	movs	r2, r1
1000e82a:	409d      	lsls	r5, r3
1000e82c:	433a      	orrs	r2, r7
1000e82e:	429c      	cmp	r4, r3
1000e830:	dd00      	ble.n	1000e834 <__aeabi_dsub+0x14c>
1000e832:	e0c0      	b.n	1000e9b6 <__aeabi_dsub+0x2ce>
1000e834:	1b1c      	subs	r4, r3, r4
1000e836:	1c63      	adds	r3, r4, #1
1000e838:	2b1f      	cmp	r3, #31
1000e83a:	dd00      	ble.n	1000e83e <__aeabi_dsub+0x156>
1000e83c:	e0e4      	b.n	1000ea08 <__aeabi_dsub+0x320>
1000e83e:	2120      	movs	r1, #32
1000e840:	0014      	movs	r4, r2
1000e842:	0028      	movs	r0, r5
1000e844:	1ac9      	subs	r1, r1, r3
1000e846:	40d8      	lsrs	r0, r3
1000e848:	408c      	lsls	r4, r1
1000e84a:	408d      	lsls	r5, r1
1000e84c:	4304      	orrs	r4, r0
1000e84e:	40da      	lsrs	r2, r3
1000e850:	1e68      	subs	r0, r5, #1
1000e852:	4185      	sbcs	r5, r0
1000e854:	0017      	movs	r7, r2
1000e856:	4325      	orrs	r5, r4
1000e858:	2400      	movs	r4, #0
1000e85a:	e771      	b.n	1000e740 <__aeabi_dsub+0x58>
1000e85c:	4642      	mov	r2, r8
1000e85e:	4663      	mov	r3, ip
1000e860:	431a      	orrs	r2, r3
1000e862:	d100      	bne.n	1000e866 <__aeabi_dsub+0x17e>
1000e864:	e24c      	b.n	1000ed00 <__aeabi_dsub+0x618>
1000e866:	4667      	mov	r7, ip
1000e868:	4645      	mov	r5, r8
1000e86a:	076b      	lsls	r3, r5, #29
1000e86c:	d000      	beq.n	1000e870 <__aeabi_dsub+0x188>
1000e86e:	e769      	b.n	1000e744 <__aeabi_dsub+0x5c>
1000e870:	2301      	movs	r3, #1
1000e872:	4651      	mov	r1, sl
1000e874:	0778      	lsls	r0, r7, #29
1000e876:	08ed      	lsrs	r5, r5, #3
1000e878:	08fa      	lsrs	r2, r7, #3
1000e87a:	400b      	ands	r3, r1
1000e87c:	4305      	orrs	r5, r0
1000e87e:	4973      	ldr	r1, [pc, #460]	; (1000ea4c <__aeabi_dsub+0x364>)
1000e880:	428c      	cmp	r4, r1
1000e882:	d038      	beq.n	1000e8f6 <__aeabi_dsub+0x20e>
1000e884:	0312      	lsls	r2, r2, #12
1000e886:	0564      	lsls	r4, r4, #21
1000e888:	0b12      	lsrs	r2, r2, #12
1000e88a:	0d64      	lsrs	r4, r4, #21
1000e88c:	e779      	b.n	1000e782 <__aeabi_dsub+0x9a>
1000e88e:	2e00      	cmp	r6, #0
1000e890:	dc00      	bgt.n	1000e894 <__aeabi_dsub+0x1ac>
1000e892:	e09a      	b.n	1000e9ca <__aeabi_dsub+0x2e2>
1000e894:	2a00      	cmp	r2, #0
1000e896:	d047      	beq.n	1000e928 <__aeabi_dsub+0x240>
1000e898:	4a6c      	ldr	r2, [pc, #432]	; (1000ea4c <__aeabi_dsub+0x364>)
1000e89a:	4294      	cmp	r4, r2
1000e89c:	d100      	bne.n	1000e8a0 <__aeabi_dsub+0x1b8>
1000e89e:	e74f      	b.n	1000e740 <__aeabi_dsub+0x58>
1000e8a0:	2280      	movs	r2, #128	; 0x80
1000e8a2:	0412      	lsls	r2, r2, #16
1000e8a4:	4310      	orrs	r0, r2
1000e8a6:	4662      	mov	r2, ip
1000e8a8:	2a38      	cmp	r2, #56	; 0x38
1000e8aa:	dc00      	bgt.n	1000e8ae <__aeabi_dsub+0x1c6>
1000e8ac:	e108      	b.n	1000eac0 <__aeabi_dsub+0x3d8>
1000e8ae:	4301      	orrs	r1, r0
1000e8b0:	1e48      	subs	r0, r1, #1
1000e8b2:	4181      	sbcs	r1, r0
1000e8b4:	2200      	movs	r2, #0
1000e8b6:	b2c9      	uxtb	r1, r1
1000e8b8:	1949      	adds	r1, r1, r5
1000e8ba:	19d2      	adds	r2, r2, r7
1000e8bc:	42a9      	cmp	r1, r5
1000e8be:	41bf      	sbcs	r7, r7
1000e8c0:	000d      	movs	r5, r1
1000e8c2:	427f      	negs	r7, r7
1000e8c4:	18bf      	adds	r7, r7, r2
1000e8c6:	023a      	lsls	r2, r7, #8
1000e8c8:	d400      	bmi.n	1000e8cc <__aeabi_dsub+0x1e4>
1000e8ca:	e142      	b.n	1000eb52 <__aeabi_dsub+0x46a>
1000e8cc:	4a5f      	ldr	r2, [pc, #380]	; (1000ea4c <__aeabi_dsub+0x364>)
1000e8ce:	3401      	adds	r4, #1
1000e8d0:	4294      	cmp	r4, r2
1000e8d2:	d100      	bne.n	1000e8d6 <__aeabi_dsub+0x1ee>
1000e8d4:	e14e      	b.n	1000eb74 <__aeabi_dsub+0x48c>
1000e8d6:	2001      	movs	r0, #1
1000e8d8:	4a5d      	ldr	r2, [pc, #372]	; (1000ea50 <__aeabi_dsub+0x368>)
1000e8da:	0869      	lsrs	r1, r5, #1
1000e8dc:	403a      	ands	r2, r7
1000e8de:	4028      	ands	r0, r5
1000e8e0:	4308      	orrs	r0, r1
1000e8e2:	07d5      	lsls	r5, r2, #31
1000e8e4:	4305      	orrs	r5, r0
1000e8e6:	0857      	lsrs	r7, r2, #1
1000e8e8:	469a      	mov	sl, r3
1000e8ea:	e729      	b.n	1000e740 <__aeabi_dsub+0x58>
1000e8ec:	0006      	movs	r6, r0
1000e8ee:	430e      	orrs	r6, r1
1000e8f0:	d000      	beq.n	1000e8f4 <__aeabi_dsub+0x20c>
1000e8f2:	e717      	b.n	1000e724 <__aeabi_dsub+0x3c>
1000e8f4:	e714      	b.n	1000e720 <__aeabi_dsub+0x38>
1000e8f6:	0029      	movs	r1, r5
1000e8f8:	4311      	orrs	r1, r2
1000e8fa:	d100      	bne.n	1000e8fe <__aeabi_dsub+0x216>
1000e8fc:	e1f9      	b.n	1000ecf2 <__aeabi_dsub+0x60a>
1000e8fe:	2180      	movs	r1, #128	; 0x80
1000e900:	0309      	lsls	r1, r1, #12
1000e902:	430a      	orrs	r2, r1
1000e904:	0312      	lsls	r2, r2, #12
1000e906:	0b12      	lsrs	r2, r2, #12
1000e908:	e73b      	b.n	1000e782 <__aeabi_dsub+0x9a>
1000e90a:	2301      	movs	r3, #1
1000e90c:	425b      	negs	r3, r3
1000e90e:	4698      	mov	r8, r3
1000e910:	44c4      	add	ip, r8
1000e912:	4663      	mov	r3, ip
1000e914:	2b00      	cmp	r3, #0
1000e916:	d172      	bne.n	1000e9fe <__aeabi_dsub+0x316>
1000e918:	1a69      	subs	r1, r5, r1
1000e91a:	428d      	cmp	r5, r1
1000e91c:	419b      	sbcs	r3, r3
1000e91e:	1a3f      	subs	r7, r7, r0
1000e920:	425b      	negs	r3, r3
1000e922:	1aff      	subs	r7, r7, r3
1000e924:	000d      	movs	r5, r1
1000e926:	e768      	b.n	1000e7fa <__aeabi_dsub+0x112>
1000e928:	0002      	movs	r2, r0
1000e92a:	430a      	orrs	r2, r1
1000e92c:	d100      	bne.n	1000e930 <__aeabi_dsub+0x248>
1000e92e:	e707      	b.n	1000e740 <__aeabi_dsub+0x58>
1000e930:	2201      	movs	r2, #1
1000e932:	4252      	negs	r2, r2
1000e934:	4690      	mov	r8, r2
1000e936:	44c4      	add	ip, r8
1000e938:	4662      	mov	r2, ip
1000e93a:	2a00      	cmp	r2, #0
1000e93c:	d000      	beq.n	1000e940 <__aeabi_dsub+0x258>
1000e93e:	e0e6      	b.n	1000eb0e <__aeabi_dsub+0x426>
1000e940:	1869      	adds	r1, r5, r1
1000e942:	42a9      	cmp	r1, r5
1000e944:	41b6      	sbcs	r6, r6
1000e946:	183f      	adds	r7, r7, r0
1000e948:	4276      	negs	r6, r6
1000e94a:	19f7      	adds	r7, r6, r7
1000e94c:	000d      	movs	r5, r1
1000e94e:	e7ba      	b.n	1000e8c6 <__aeabi_dsub+0x1de>
1000e950:	2e00      	cmp	r6, #0
1000e952:	d000      	beq.n	1000e956 <__aeabi_dsub+0x26e>
1000e954:	e080      	b.n	1000ea58 <__aeabi_dsub+0x370>
1000e956:	1c62      	adds	r2, r4, #1
1000e958:	0552      	lsls	r2, r2, #21
1000e95a:	0d52      	lsrs	r2, r2, #21
1000e95c:	2a01      	cmp	r2, #1
1000e95e:	dc00      	bgt.n	1000e962 <__aeabi_dsub+0x27a>
1000e960:	e0f9      	b.n	1000eb56 <__aeabi_dsub+0x46e>
1000e962:	1a6a      	subs	r2, r5, r1
1000e964:	4691      	mov	r9, r2
1000e966:	454d      	cmp	r5, r9
1000e968:	41b6      	sbcs	r6, r6
1000e96a:	1a3a      	subs	r2, r7, r0
1000e96c:	4276      	negs	r6, r6
1000e96e:	1b92      	subs	r2, r2, r6
1000e970:	4690      	mov	r8, r2
1000e972:	0212      	lsls	r2, r2, #8
1000e974:	d400      	bmi.n	1000e978 <__aeabi_dsub+0x290>
1000e976:	e099      	b.n	1000eaac <__aeabi_dsub+0x3c4>
1000e978:	1b4d      	subs	r5, r1, r5
1000e97a:	42a9      	cmp	r1, r5
1000e97c:	4189      	sbcs	r1, r1
1000e97e:	1bc7      	subs	r7, r0, r7
1000e980:	4249      	negs	r1, r1
1000e982:	1a7a      	subs	r2, r7, r1
1000e984:	4690      	mov	r8, r2
1000e986:	469a      	mov	sl, r3
1000e988:	e73c      	b.n	1000e804 <__aeabi_dsub+0x11c>
1000e98a:	4652      	mov	r2, sl
1000e98c:	2301      	movs	r3, #1
1000e98e:	2500      	movs	r5, #0
1000e990:	4013      	ands	r3, r2
1000e992:	2200      	movs	r2, #0
1000e994:	e6f5      	b.n	1000e782 <__aeabi_dsub+0x9a>
1000e996:	0028      	movs	r0, r5
1000e998:	f000 faa6 	bl	1000eee8 <__clzsi2>
1000e99c:	3020      	adds	r0, #32
1000e99e:	0003      	movs	r3, r0
1000e9a0:	3b08      	subs	r3, #8
1000e9a2:	2b1f      	cmp	r3, #31
1000e9a4:	dc00      	bgt.n	1000e9a8 <__aeabi_dsub+0x2c0>
1000e9a6:	e739      	b.n	1000e81c <__aeabi_dsub+0x134>
1000e9a8:	002a      	movs	r2, r5
1000e9aa:	3828      	subs	r0, #40	; 0x28
1000e9ac:	4082      	lsls	r2, r0
1000e9ae:	2500      	movs	r5, #0
1000e9b0:	429c      	cmp	r4, r3
1000e9b2:	dc00      	bgt.n	1000e9b6 <__aeabi_dsub+0x2ce>
1000e9b4:	e73e      	b.n	1000e834 <__aeabi_dsub+0x14c>
1000e9b6:	4f26      	ldr	r7, [pc, #152]	; (1000ea50 <__aeabi_dsub+0x368>)
1000e9b8:	1ae4      	subs	r4, r4, r3
1000e9ba:	4017      	ands	r7, r2
1000e9bc:	e6c0      	b.n	1000e740 <__aeabi_dsub+0x58>
1000e9be:	4301      	orrs	r1, r0
1000e9c0:	1e48      	subs	r0, r1, #1
1000e9c2:	4181      	sbcs	r1, r0
1000e9c4:	2200      	movs	r2, #0
1000e9c6:	b2c9      	uxtb	r1, r1
1000e9c8:	e710      	b.n	1000e7ec <__aeabi_dsub+0x104>
1000e9ca:	2e00      	cmp	r6, #0
1000e9cc:	d000      	beq.n	1000e9d0 <__aeabi_dsub+0x2e8>
1000e9ce:	e0f1      	b.n	1000ebb4 <__aeabi_dsub+0x4cc>
1000e9d0:	1c62      	adds	r2, r4, #1
1000e9d2:	4694      	mov	ip, r2
1000e9d4:	0552      	lsls	r2, r2, #21
1000e9d6:	0d52      	lsrs	r2, r2, #21
1000e9d8:	2a01      	cmp	r2, #1
1000e9da:	dc00      	bgt.n	1000e9de <__aeabi_dsub+0x2f6>
1000e9dc:	e0a0      	b.n	1000eb20 <__aeabi_dsub+0x438>
1000e9de:	4a1b      	ldr	r2, [pc, #108]	; (1000ea4c <__aeabi_dsub+0x364>)
1000e9e0:	4594      	cmp	ip, r2
1000e9e2:	d100      	bne.n	1000e9e6 <__aeabi_dsub+0x2fe>
1000e9e4:	e0c5      	b.n	1000eb72 <__aeabi_dsub+0x48a>
1000e9e6:	1869      	adds	r1, r5, r1
1000e9e8:	42a9      	cmp	r1, r5
1000e9ea:	4192      	sbcs	r2, r2
1000e9ec:	183f      	adds	r7, r7, r0
1000e9ee:	4252      	negs	r2, r2
1000e9f0:	19d2      	adds	r2, r2, r7
1000e9f2:	0849      	lsrs	r1, r1, #1
1000e9f4:	07d5      	lsls	r5, r2, #31
1000e9f6:	430d      	orrs	r5, r1
1000e9f8:	0857      	lsrs	r7, r2, #1
1000e9fa:	4664      	mov	r4, ip
1000e9fc:	e6a0      	b.n	1000e740 <__aeabi_dsub+0x58>
1000e9fe:	4b13      	ldr	r3, [pc, #76]	; (1000ea4c <__aeabi_dsub+0x364>)
1000ea00:	429c      	cmp	r4, r3
1000ea02:	d000      	beq.n	1000ea06 <__aeabi_dsub+0x31e>
1000ea04:	e6d9      	b.n	1000e7ba <__aeabi_dsub+0xd2>
1000ea06:	e69b      	b.n	1000e740 <__aeabi_dsub+0x58>
1000ea08:	0011      	movs	r1, r2
1000ea0a:	3c1f      	subs	r4, #31
1000ea0c:	40e1      	lsrs	r1, r4
1000ea0e:	000c      	movs	r4, r1
1000ea10:	2b20      	cmp	r3, #32
1000ea12:	d100      	bne.n	1000ea16 <__aeabi_dsub+0x32e>
1000ea14:	e080      	b.n	1000eb18 <__aeabi_dsub+0x430>
1000ea16:	2140      	movs	r1, #64	; 0x40
1000ea18:	1acb      	subs	r3, r1, r3
1000ea1a:	409a      	lsls	r2, r3
1000ea1c:	4315      	orrs	r5, r2
1000ea1e:	1e6a      	subs	r2, r5, #1
1000ea20:	4195      	sbcs	r5, r2
1000ea22:	2700      	movs	r7, #0
1000ea24:	4325      	orrs	r5, r4
1000ea26:	2400      	movs	r4, #0
1000ea28:	e71f      	b.n	1000e86a <__aeabi_dsub+0x182>
1000ea2a:	4663      	mov	r3, ip
1000ea2c:	0002      	movs	r2, r0
1000ea2e:	3b20      	subs	r3, #32
1000ea30:	40da      	lsrs	r2, r3
1000ea32:	4663      	mov	r3, ip
1000ea34:	2b20      	cmp	r3, #32
1000ea36:	d071      	beq.n	1000eb1c <__aeabi_dsub+0x434>
1000ea38:	2340      	movs	r3, #64	; 0x40
1000ea3a:	4666      	mov	r6, ip
1000ea3c:	1b9b      	subs	r3, r3, r6
1000ea3e:	4098      	lsls	r0, r3
1000ea40:	4301      	orrs	r1, r0
1000ea42:	1e48      	subs	r0, r1, #1
1000ea44:	4181      	sbcs	r1, r0
1000ea46:	4311      	orrs	r1, r2
1000ea48:	2200      	movs	r2, #0
1000ea4a:	e6cf      	b.n	1000e7ec <__aeabi_dsub+0x104>
1000ea4c:	000007ff 	.word	0x000007ff
1000ea50:	ff7fffff 	.word	0xff7fffff
1000ea54:	800fffff 	.word	0x800fffff
1000ea58:	2c00      	cmp	r4, #0
1000ea5a:	d048      	beq.n	1000eaee <__aeabi_dsub+0x406>
1000ea5c:	4cca      	ldr	r4, [pc, #808]	; (1000ed88 <__aeabi_dsub+0x6a0>)
1000ea5e:	42a2      	cmp	r2, r4
1000ea60:	d100      	bne.n	1000ea64 <__aeabi_dsub+0x37c>
1000ea62:	e0a2      	b.n	1000ebaa <__aeabi_dsub+0x4c2>
1000ea64:	4274      	negs	r4, r6
1000ea66:	46a1      	mov	r9, r4
1000ea68:	2480      	movs	r4, #128	; 0x80
1000ea6a:	0424      	lsls	r4, r4, #16
1000ea6c:	4327      	orrs	r7, r4
1000ea6e:	464c      	mov	r4, r9
1000ea70:	2c38      	cmp	r4, #56	; 0x38
1000ea72:	dd00      	ble.n	1000ea76 <__aeabi_dsub+0x38e>
1000ea74:	e0db      	b.n	1000ec2e <__aeabi_dsub+0x546>
1000ea76:	2c1f      	cmp	r4, #31
1000ea78:	dd00      	ble.n	1000ea7c <__aeabi_dsub+0x394>
1000ea7a:	e144      	b.n	1000ed06 <__aeabi_dsub+0x61e>
1000ea7c:	464e      	mov	r6, r9
1000ea7e:	2420      	movs	r4, #32
1000ea80:	1ba4      	subs	r4, r4, r6
1000ea82:	003e      	movs	r6, r7
1000ea84:	40a6      	lsls	r6, r4
1000ea86:	46a2      	mov	sl, r4
1000ea88:	46b0      	mov	r8, r6
1000ea8a:	464c      	mov	r4, r9
1000ea8c:	002e      	movs	r6, r5
1000ea8e:	40e6      	lsrs	r6, r4
1000ea90:	46b4      	mov	ip, r6
1000ea92:	4646      	mov	r6, r8
1000ea94:	4664      	mov	r4, ip
1000ea96:	4326      	orrs	r6, r4
1000ea98:	4654      	mov	r4, sl
1000ea9a:	40a5      	lsls	r5, r4
1000ea9c:	1e6c      	subs	r4, r5, #1
1000ea9e:	41a5      	sbcs	r5, r4
1000eaa0:	0034      	movs	r4, r6
1000eaa2:	432c      	orrs	r4, r5
1000eaa4:	464d      	mov	r5, r9
1000eaa6:	40ef      	lsrs	r7, r5
1000eaa8:	1b0d      	subs	r5, r1, r4
1000eaaa:	e028      	b.n	1000eafe <__aeabi_dsub+0x416>
1000eaac:	464a      	mov	r2, r9
1000eaae:	4643      	mov	r3, r8
1000eab0:	464d      	mov	r5, r9
1000eab2:	431a      	orrs	r2, r3
1000eab4:	d000      	beq.n	1000eab8 <__aeabi_dsub+0x3d0>
1000eab6:	e6a5      	b.n	1000e804 <__aeabi_dsub+0x11c>
1000eab8:	2300      	movs	r3, #0
1000eaba:	2400      	movs	r4, #0
1000eabc:	2500      	movs	r5, #0
1000eabe:	e6de      	b.n	1000e87e <__aeabi_dsub+0x196>
1000eac0:	2a1f      	cmp	r2, #31
1000eac2:	dc5a      	bgt.n	1000eb7a <__aeabi_dsub+0x492>
1000eac4:	4666      	mov	r6, ip
1000eac6:	2220      	movs	r2, #32
1000eac8:	1b92      	subs	r2, r2, r6
1000eaca:	0006      	movs	r6, r0
1000eacc:	4096      	lsls	r6, r2
1000eace:	4691      	mov	r9, r2
1000ead0:	46b0      	mov	r8, r6
1000ead2:	4662      	mov	r2, ip
1000ead4:	000e      	movs	r6, r1
1000ead6:	40d6      	lsrs	r6, r2
1000ead8:	4642      	mov	r2, r8
1000eada:	4316      	orrs	r6, r2
1000eadc:	464a      	mov	r2, r9
1000eade:	4091      	lsls	r1, r2
1000eae0:	1e4a      	subs	r2, r1, #1
1000eae2:	4191      	sbcs	r1, r2
1000eae4:	0002      	movs	r2, r0
1000eae6:	4660      	mov	r0, ip
1000eae8:	4331      	orrs	r1, r6
1000eaea:	40c2      	lsrs	r2, r0
1000eaec:	e6e4      	b.n	1000e8b8 <__aeabi_dsub+0x1d0>
1000eaee:	003c      	movs	r4, r7
1000eaf0:	432c      	orrs	r4, r5
1000eaf2:	d05a      	beq.n	1000ebaa <__aeabi_dsub+0x4c2>
1000eaf4:	43f4      	mvns	r4, r6
1000eaf6:	46a1      	mov	r9, r4
1000eaf8:	2c00      	cmp	r4, #0
1000eafa:	d152      	bne.n	1000eba2 <__aeabi_dsub+0x4ba>
1000eafc:	1b4d      	subs	r5, r1, r5
1000eafe:	42a9      	cmp	r1, r5
1000eb00:	4189      	sbcs	r1, r1
1000eb02:	1bc7      	subs	r7, r0, r7
1000eb04:	4249      	negs	r1, r1
1000eb06:	1a7f      	subs	r7, r7, r1
1000eb08:	0014      	movs	r4, r2
1000eb0a:	469a      	mov	sl, r3
1000eb0c:	e675      	b.n	1000e7fa <__aeabi_dsub+0x112>
1000eb0e:	4a9e      	ldr	r2, [pc, #632]	; (1000ed88 <__aeabi_dsub+0x6a0>)
1000eb10:	4294      	cmp	r4, r2
1000eb12:	d000      	beq.n	1000eb16 <__aeabi_dsub+0x42e>
1000eb14:	e6c7      	b.n	1000e8a6 <__aeabi_dsub+0x1be>
1000eb16:	e613      	b.n	1000e740 <__aeabi_dsub+0x58>
1000eb18:	2200      	movs	r2, #0
1000eb1a:	e77f      	b.n	1000ea1c <__aeabi_dsub+0x334>
1000eb1c:	2000      	movs	r0, #0
1000eb1e:	e78f      	b.n	1000ea40 <__aeabi_dsub+0x358>
1000eb20:	2c00      	cmp	r4, #0
1000eb22:	d000      	beq.n	1000eb26 <__aeabi_dsub+0x43e>
1000eb24:	e0c8      	b.n	1000ecb8 <__aeabi_dsub+0x5d0>
1000eb26:	003b      	movs	r3, r7
1000eb28:	432b      	orrs	r3, r5
1000eb2a:	d100      	bne.n	1000eb2e <__aeabi_dsub+0x446>
1000eb2c:	e10f      	b.n	1000ed4e <__aeabi_dsub+0x666>
1000eb2e:	0003      	movs	r3, r0
1000eb30:	430b      	orrs	r3, r1
1000eb32:	d100      	bne.n	1000eb36 <__aeabi_dsub+0x44e>
1000eb34:	e604      	b.n	1000e740 <__aeabi_dsub+0x58>
1000eb36:	1869      	adds	r1, r5, r1
1000eb38:	42a9      	cmp	r1, r5
1000eb3a:	419b      	sbcs	r3, r3
1000eb3c:	183f      	adds	r7, r7, r0
1000eb3e:	425b      	negs	r3, r3
1000eb40:	19df      	adds	r7, r3, r7
1000eb42:	023b      	lsls	r3, r7, #8
1000eb44:	d400      	bmi.n	1000eb48 <__aeabi_dsub+0x460>
1000eb46:	e11a      	b.n	1000ed7e <__aeabi_dsub+0x696>
1000eb48:	4b90      	ldr	r3, [pc, #576]	; (1000ed8c <__aeabi_dsub+0x6a4>)
1000eb4a:	000d      	movs	r5, r1
1000eb4c:	401f      	ands	r7, r3
1000eb4e:	4664      	mov	r4, ip
1000eb50:	e5f6      	b.n	1000e740 <__aeabi_dsub+0x58>
1000eb52:	469a      	mov	sl, r3
1000eb54:	e689      	b.n	1000e86a <__aeabi_dsub+0x182>
1000eb56:	003a      	movs	r2, r7
1000eb58:	432a      	orrs	r2, r5
1000eb5a:	2c00      	cmp	r4, #0
1000eb5c:	d15c      	bne.n	1000ec18 <__aeabi_dsub+0x530>
1000eb5e:	2a00      	cmp	r2, #0
1000eb60:	d175      	bne.n	1000ec4e <__aeabi_dsub+0x566>
1000eb62:	0002      	movs	r2, r0
1000eb64:	430a      	orrs	r2, r1
1000eb66:	d100      	bne.n	1000eb6a <__aeabi_dsub+0x482>
1000eb68:	e0ca      	b.n	1000ed00 <__aeabi_dsub+0x618>
1000eb6a:	0007      	movs	r7, r0
1000eb6c:	000d      	movs	r5, r1
1000eb6e:	469a      	mov	sl, r3
1000eb70:	e5e6      	b.n	1000e740 <__aeabi_dsub+0x58>
1000eb72:	4664      	mov	r4, ip
1000eb74:	2200      	movs	r2, #0
1000eb76:	2500      	movs	r5, #0
1000eb78:	e681      	b.n	1000e87e <__aeabi_dsub+0x196>
1000eb7a:	4662      	mov	r2, ip
1000eb7c:	0006      	movs	r6, r0
1000eb7e:	3a20      	subs	r2, #32
1000eb80:	40d6      	lsrs	r6, r2
1000eb82:	4662      	mov	r2, ip
1000eb84:	46b0      	mov	r8, r6
1000eb86:	2a20      	cmp	r2, #32
1000eb88:	d100      	bne.n	1000eb8c <__aeabi_dsub+0x4a4>
1000eb8a:	e0b7      	b.n	1000ecfc <__aeabi_dsub+0x614>
1000eb8c:	2240      	movs	r2, #64	; 0x40
1000eb8e:	4666      	mov	r6, ip
1000eb90:	1b92      	subs	r2, r2, r6
1000eb92:	4090      	lsls	r0, r2
1000eb94:	4301      	orrs	r1, r0
1000eb96:	4642      	mov	r2, r8
1000eb98:	1e48      	subs	r0, r1, #1
1000eb9a:	4181      	sbcs	r1, r0
1000eb9c:	4311      	orrs	r1, r2
1000eb9e:	2200      	movs	r2, #0
1000eba0:	e68a      	b.n	1000e8b8 <__aeabi_dsub+0x1d0>
1000eba2:	4c79      	ldr	r4, [pc, #484]	; (1000ed88 <__aeabi_dsub+0x6a0>)
1000eba4:	42a2      	cmp	r2, r4
1000eba6:	d000      	beq.n	1000ebaa <__aeabi_dsub+0x4c2>
1000eba8:	e761      	b.n	1000ea6e <__aeabi_dsub+0x386>
1000ebaa:	0007      	movs	r7, r0
1000ebac:	000d      	movs	r5, r1
1000ebae:	0014      	movs	r4, r2
1000ebb0:	469a      	mov	sl, r3
1000ebb2:	e5c5      	b.n	1000e740 <__aeabi_dsub+0x58>
1000ebb4:	2c00      	cmp	r4, #0
1000ebb6:	d141      	bne.n	1000ec3c <__aeabi_dsub+0x554>
1000ebb8:	003c      	movs	r4, r7
1000ebba:	432c      	orrs	r4, r5
1000ebbc:	d078      	beq.n	1000ecb0 <__aeabi_dsub+0x5c8>
1000ebbe:	43f4      	mvns	r4, r6
1000ebc0:	46a1      	mov	r9, r4
1000ebc2:	2c00      	cmp	r4, #0
1000ebc4:	d020      	beq.n	1000ec08 <__aeabi_dsub+0x520>
1000ebc6:	4c70      	ldr	r4, [pc, #448]	; (1000ed88 <__aeabi_dsub+0x6a0>)
1000ebc8:	42a2      	cmp	r2, r4
1000ebca:	d071      	beq.n	1000ecb0 <__aeabi_dsub+0x5c8>
1000ebcc:	464c      	mov	r4, r9
1000ebce:	2c38      	cmp	r4, #56	; 0x38
1000ebd0:	dd00      	ble.n	1000ebd4 <__aeabi_dsub+0x4ec>
1000ebd2:	e0b2      	b.n	1000ed3a <__aeabi_dsub+0x652>
1000ebd4:	2c1f      	cmp	r4, #31
1000ebd6:	dd00      	ble.n	1000ebda <__aeabi_dsub+0x4f2>
1000ebd8:	e0bc      	b.n	1000ed54 <__aeabi_dsub+0x66c>
1000ebda:	2620      	movs	r6, #32
1000ebdc:	1b34      	subs	r4, r6, r4
1000ebde:	46a2      	mov	sl, r4
1000ebe0:	003c      	movs	r4, r7
1000ebe2:	4656      	mov	r6, sl
1000ebe4:	40b4      	lsls	r4, r6
1000ebe6:	464e      	mov	r6, r9
1000ebe8:	46a0      	mov	r8, r4
1000ebea:	002c      	movs	r4, r5
1000ebec:	40f4      	lsrs	r4, r6
1000ebee:	46a4      	mov	ip, r4
1000ebf0:	4644      	mov	r4, r8
1000ebf2:	4666      	mov	r6, ip
1000ebf4:	4334      	orrs	r4, r6
1000ebf6:	46a4      	mov	ip, r4
1000ebf8:	4654      	mov	r4, sl
1000ebfa:	40a5      	lsls	r5, r4
1000ebfc:	4664      	mov	r4, ip
1000ebfe:	1e6e      	subs	r6, r5, #1
1000ec00:	41b5      	sbcs	r5, r6
1000ec02:	4325      	orrs	r5, r4
1000ec04:	464c      	mov	r4, r9
1000ec06:	40e7      	lsrs	r7, r4
1000ec08:	186d      	adds	r5, r5, r1
1000ec0a:	428d      	cmp	r5, r1
1000ec0c:	4189      	sbcs	r1, r1
1000ec0e:	183f      	adds	r7, r7, r0
1000ec10:	4249      	negs	r1, r1
1000ec12:	19cf      	adds	r7, r1, r7
1000ec14:	0014      	movs	r4, r2
1000ec16:	e656      	b.n	1000e8c6 <__aeabi_dsub+0x1de>
1000ec18:	2a00      	cmp	r2, #0
1000ec1a:	d12f      	bne.n	1000ec7c <__aeabi_dsub+0x594>
1000ec1c:	0002      	movs	r2, r0
1000ec1e:	430a      	orrs	r2, r1
1000ec20:	d100      	bne.n	1000ec24 <__aeabi_dsub+0x53c>
1000ec22:	e084      	b.n	1000ed2e <__aeabi_dsub+0x646>
1000ec24:	0007      	movs	r7, r0
1000ec26:	000d      	movs	r5, r1
1000ec28:	469a      	mov	sl, r3
1000ec2a:	4c57      	ldr	r4, [pc, #348]	; (1000ed88 <__aeabi_dsub+0x6a0>)
1000ec2c:	e588      	b.n	1000e740 <__aeabi_dsub+0x58>
1000ec2e:	433d      	orrs	r5, r7
1000ec30:	1e6f      	subs	r7, r5, #1
1000ec32:	41bd      	sbcs	r5, r7
1000ec34:	b2ec      	uxtb	r4, r5
1000ec36:	2700      	movs	r7, #0
1000ec38:	1b0d      	subs	r5, r1, r4
1000ec3a:	e760      	b.n	1000eafe <__aeabi_dsub+0x416>
1000ec3c:	4c52      	ldr	r4, [pc, #328]	; (1000ed88 <__aeabi_dsub+0x6a0>)
1000ec3e:	42a2      	cmp	r2, r4
1000ec40:	d036      	beq.n	1000ecb0 <__aeabi_dsub+0x5c8>
1000ec42:	4274      	negs	r4, r6
1000ec44:	2680      	movs	r6, #128	; 0x80
1000ec46:	0436      	lsls	r6, r6, #16
1000ec48:	46a1      	mov	r9, r4
1000ec4a:	4337      	orrs	r7, r6
1000ec4c:	e7be      	b.n	1000ebcc <__aeabi_dsub+0x4e4>
1000ec4e:	0002      	movs	r2, r0
1000ec50:	430a      	orrs	r2, r1
1000ec52:	d100      	bne.n	1000ec56 <__aeabi_dsub+0x56e>
1000ec54:	e574      	b.n	1000e740 <__aeabi_dsub+0x58>
1000ec56:	1a6a      	subs	r2, r5, r1
1000ec58:	4690      	mov	r8, r2
1000ec5a:	4545      	cmp	r5, r8
1000ec5c:	41b6      	sbcs	r6, r6
1000ec5e:	1a3a      	subs	r2, r7, r0
1000ec60:	4276      	negs	r6, r6
1000ec62:	1b92      	subs	r2, r2, r6
1000ec64:	4694      	mov	ip, r2
1000ec66:	0212      	lsls	r2, r2, #8
1000ec68:	d400      	bmi.n	1000ec6c <__aeabi_dsub+0x584>
1000ec6a:	e5f7      	b.n	1000e85c <__aeabi_dsub+0x174>
1000ec6c:	1b4d      	subs	r5, r1, r5
1000ec6e:	42a9      	cmp	r1, r5
1000ec70:	4189      	sbcs	r1, r1
1000ec72:	1bc7      	subs	r7, r0, r7
1000ec74:	4249      	negs	r1, r1
1000ec76:	1a7f      	subs	r7, r7, r1
1000ec78:	469a      	mov	sl, r3
1000ec7a:	e561      	b.n	1000e740 <__aeabi_dsub+0x58>
1000ec7c:	0002      	movs	r2, r0
1000ec7e:	430a      	orrs	r2, r1
1000ec80:	d03a      	beq.n	1000ecf8 <__aeabi_dsub+0x610>
1000ec82:	08ed      	lsrs	r5, r5, #3
1000ec84:	077c      	lsls	r4, r7, #29
1000ec86:	432c      	orrs	r4, r5
1000ec88:	2580      	movs	r5, #128	; 0x80
1000ec8a:	08fa      	lsrs	r2, r7, #3
1000ec8c:	032d      	lsls	r5, r5, #12
1000ec8e:	422a      	tst	r2, r5
1000ec90:	d008      	beq.n	1000eca4 <__aeabi_dsub+0x5bc>
1000ec92:	08c7      	lsrs	r7, r0, #3
1000ec94:	422f      	tst	r7, r5
1000ec96:	d105      	bne.n	1000eca4 <__aeabi_dsub+0x5bc>
1000ec98:	0745      	lsls	r5, r0, #29
1000ec9a:	002c      	movs	r4, r5
1000ec9c:	003a      	movs	r2, r7
1000ec9e:	469a      	mov	sl, r3
1000eca0:	08c9      	lsrs	r1, r1, #3
1000eca2:	430c      	orrs	r4, r1
1000eca4:	0f67      	lsrs	r7, r4, #29
1000eca6:	00d2      	lsls	r2, r2, #3
1000eca8:	00e5      	lsls	r5, r4, #3
1000ecaa:	4317      	orrs	r7, r2
1000ecac:	4c36      	ldr	r4, [pc, #216]	; (1000ed88 <__aeabi_dsub+0x6a0>)
1000ecae:	e547      	b.n	1000e740 <__aeabi_dsub+0x58>
1000ecb0:	0007      	movs	r7, r0
1000ecb2:	000d      	movs	r5, r1
1000ecb4:	0014      	movs	r4, r2
1000ecb6:	e543      	b.n	1000e740 <__aeabi_dsub+0x58>
1000ecb8:	003a      	movs	r2, r7
1000ecba:	432a      	orrs	r2, r5
1000ecbc:	d043      	beq.n	1000ed46 <__aeabi_dsub+0x65e>
1000ecbe:	0002      	movs	r2, r0
1000ecc0:	430a      	orrs	r2, r1
1000ecc2:	d019      	beq.n	1000ecf8 <__aeabi_dsub+0x610>
1000ecc4:	08ed      	lsrs	r5, r5, #3
1000ecc6:	077c      	lsls	r4, r7, #29
1000ecc8:	432c      	orrs	r4, r5
1000ecca:	2580      	movs	r5, #128	; 0x80
1000eccc:	08fa      	lsrs	r2, r7, #3
1000ecce:	032d      	lsls	r5, r5, #12
1000ecd0:	422a      	tst	r2, r5
1000ecd2:	d007      	beq.n	1000ece4 <__aeabi_dsub+0x5fc>
1000ecd4:	08c6      	lsrs	r6, r0, #3
1000ecd6:	422e      	tst	r6, r5
1000ecd8:	d104      	bne.n	1000ece4 <__aeabi_dsub+0x5fc>
1000ecda:	0747      	lsls	r7, r0, #29
1000ecdc:	003c      	movs	r4, r7
1000ecde:	0032      	movs	r2, r6
1000ece0:	08c9      	lsrs	r1, r1, #3
1000ece2:	430c      	orrs	r4, r1
1000ece4:	00d7      	lsls	r7, r2, #3
1000ece6:	0f62      	lsrs	r2, r4, #29
1000ece8:	00e5      	lsls	r5, r4, #3
1000ecea:	4317      	orrs	r7, r2
1000ecec:	469a      	mov	sl, r3
1000ecee:	4c26      	ldr	r4, [pc, #152]	; (1000ed88 <__aeabi_dsub+0x6a0>)
1000ecf0:	e526      	b.n	1000e740 <__aeabi_dsub+0x58>
1000ecf2:	2200      	movs	r2, #0
1000ecf4:	2500      	movs	r5, #0
1000ecf6:	e544      	b.n	1000e782 <__aeabi_dsub+0x9a>
1000ecf8:	4c23      	ldr	r4, [pc, #140]	; (1000ed88 <__aeabi_dsub+0x6a0>)
1000ecfa:	e521      	b.n	1000e740 <__aeabi_dsub+0x58>
1000ecfc:	2000      	movs	r0, #0
1000ecfe:	e749      	b.n	1000eb94 <__aeabi_dsub+0x4ac>
1000ed00:	2300      	movs	r3, #0
1000ed02:	2500      	movs	r5, #0
1000ed04:	e5bb      	b.n	1000e87e <__aeabi_dsub+0x196>
1000ed06:	464c      	mov	r4, r9
1000ed08:	003e      	movs	r6, r7
1000ed0a:	3c20      	subs	r4, #32
1000ed0c:	40e6      	lsrs	r6, r4
1000ed0e:	464c      	mov	r4, r9
1000ed10:	46b4      	mov	ip, r6
1000ed12:	2c20      	cmp	r4, #32
1000ed14:	d031      	beq.n	1000ed7a <__aeabi_dsub+0x692>
1000ed16:	2440      	movs	r4, #64	; 0x40
1000ed18:	464e      	mov	r6, r9
1000ed1a:	1ba6      	subs	r6, r4, r6
1000ed1c:	40b7      	lsls	r7, r6
1000ed1e:	433d      	orrs	r5, r7
1000ed20:	1e6c      	subs	r4, r5, #1
1000ed22:	41a5      	sbcs	r5, r4
1000ed24:	4664      	mov	r4, ip
1000ed26:	432c      	orrs	r4, r5
1000ed28:	2700      	movs	r7, #0
1000ed2a:	1b0d      	subs	r5, r1, r4
1000ed2c:	e6e7      	b.n	1000eafe <__aeabi_dsub+0x416>
1000ed2e:	2280      	movs	r2, #128	; 0x80
1000ed30:	2300      	movs	r3, #0
1000ed32:	0312      	lsls	r2, r2, #12
1000ed34:	4c14      	ldr	r4, [pc, #80]	; (1000ed88 <__aeabi_dsub+0x6a0>)
1000ed36:	2500      	movs	r5, #0
1000ed38:	e5a1      	b.n	1000e87e <__aeabi_dsub+0x196>
1000ed3a:	433d      	orrs	r5, r7
1000ed3c:	1e6f      	subs	r7, r5, #1
1000ed3e:	41bd      	sbcs	r5, r7
1000ed40:	2700      	movs	r7, #0
1000ed42:	b2ed      	uxtb	r5, r5
1000ed44:	e760      	b.n	1000ec08 <__aeabi_dsub+0x520>
1000ed46:	0007      	movs	r7, r0
1000ed48:	000d      	movs	r5, r1
1000ed4a:	4c0f      	ldr	r4, [pc, #60]	; (1000ed88 <__aeabi_dsub+0x6a0>)
1000ed4c:	e4f8      	b.n	1000e740 <__aeabi_dsub+0x58>
1000ed4e:	0007      	movs	r7, r0
1000ed50:	000d      	movs	r5, r1
1000ed52:	e4f5      	b.n	1000e740 <__aeabi_dsub+0x58>
1000ed54:	464e      	mov	r6, r9
1000ed56:	003c      	movs	r4, r7
1000ed58:	3e20      	subs	r6, #32
1000ed5a:	40f4      	lsrs	r4, r6
1000ed5c:	46a0      	mov	r8, r4
1000ed5e:	464c      	mov	r4, r9
1000ed60:	2c20      	cmp	r4, #32
1000ed62:	d00e      	beq.n	1000ed82 <__aeabi_dsub+0x69a>
1000ed64:	2440      	movs	r4, #64	; 0x40
1000ed66:	464e      	mov	r6, r9
1000ed68:	1ba4      	subs	r4, r4, r6
1000ed6a:	40a7      	lsls	r7, r4
1000ed6c:	433d      	orrs	r5, r7
1000ed6e:	1e6f      	subs	r7, r5, #1
1000ed70:	41bd      	sbcs	r5, r7
1000ed72:	4644      	mov	r4, r8
1000ed74:	2700      	movs	r7, #0
1000ed76:	4325      	orrs	r5, r4
1000ed78:	e746      	b.n	1000ec08 <__aeabi_dsub+0x520>
1000ed7a:	2700      	movs	r7, #0
1000ed7c:	e7cf      	b.n	1000ed1e <__aeabi_dsub+0x636>
1000ed7e:	000d      	movs	r5, r1
1000ed80:	e573      	b.n	1000e86a <__aeabi_dsub+0x182>
1000ed82:	2700      	movs	r7, #0
1000ed84:	e7f2      	b.n	1000ed6c <__aeabi_dsub+0x684>
1000ed86:	46c0      	nop			; (mov r8, r8)
1000ed88:	000007ff 	.word	0x000007ff
1000ed8c:	ff7fffff 	.word	0xff7fffff

1000ed90 <__aeabi_d2iz>:
1000ed90:	030b      	lsls	r3, r1, #12
1000ed92:	b530      	push	{r4, r5, lr}
1000ed94:	4d13      	ldr	r5, [pc, #76]	; (1000ede4 <__aeabi_d2iz+0x54>)
1000ed96:	0b1a      	lsrs	r2, r3, #12
1000ed98:	004b      	lsls	r3, r1, #1
1000ed9a:	0d5b      	lsrs	r3, r3, #21
1000ed9c:	0fc9      	lsrs	r1, r1, #31
1000ed9e:	2400      	movs	r4, #0
1000eda0:	42ab      	cmp	r3, r5
1000eda2:	dd11      	ble.n	1000edc8 <__aeabi_d2iz+0x38>
1000eda4:	4c10      	ldr	r4, [pc, #64]	; (1000ede8 <__aeabi_d2iz+0x58>)
1000eda6:	42a3      	cmp	r3, r4
1000eda8:	dc10      	bgt.n	1000edcc <__aeabi_d2iz+0x3c>
1000edaa:	2480      	movs	r4, #128	; 0x80
1000edac:	0364      	lsls	r4, r4, #13
1000edae:	4322      	orrs	r2, r4
1000edb0:	4c0e      	ldr	r4, [pc, #56]	; (1000edec <__aeabi_d2iz+0x5c>)
1000edb2:	1ae4      	subs	r4, r4, r3
1000edb4:	2c1f      	cmp	r4, #31
1000edb6:	dd0c      	ble.n	1000edd2 <__aeabi_d2iz+0x42>
1000edb8:	480d      	ldr	r0, [pc, #52]	; (1000edf0 <__aeabi_d2iz+0x60>)
1000edba:	1ac3      	subs	r3, r0, r3
1000edbc:	40da      	lsrs	r2, r3
1000edbe:	0013      	movs	r3, r2
1000edc0:	425c      	negs	r4, r3
1000edc2:	2900      	cmp	r1, #0
1000edc4:	d100      	bne.n	1000edc8 <__aeabi_d2iz+0x38>
1000edc6:	001c      	movs	r4, r3
1000edc8:	0020      	movs	r0, r4
1000edca:	bd30      	pop	{r4, r5, pc}
1000edcc:	4b09      	ldr	r3, [pc, #36]	; (1000edf4 <__aeabi_d2iz+0x64>)
1000edce:	18cc      	adds	r4, r1, r3
1000edd0:	e7fa      	b.n	1000edc8 <__aeabi_d2iz+0x38>
1000edd2:	40e0      	lsrs	r0, r4
1000edd4:	4c08      	ldr	r4, [pc, #32]	; (1000edf8 <__aeabi_d2iz+0x68>)
1000edd6:	46a4      	mov	ip, r4
1000edd8:	4463      	add	r3, ip
1000edda:	409a      	lsls	r2, r3
1000eddc:	0013      	movs	r3, r2
1000edde:	4303      	orrs	r3, r0
1000ede0:	e7ee      	b.n	1000edc0 <__aeabi_d2iz+0x30>
1000ede2:	46c0      	nop			; (mov r8, r8)
1000ede4:	000003fe 	.word	0x000003fe
1000ede8:	0000041d 	.word	0x0000041d
1000edec:	00000433 	.word	0x00000433
1000edf0:	00000413 	.word	0x00000413
1000edf4:	7fffffff 	.word	0x7fffffff
1000edf8:	fffffbed 	.word	0xfffffbed

1000edfc <__aeabi_ui2d>:
1000edfc:	b570      	push	{r4, r5, r6, lr}
1000edfe:	1e05      	subs	r5, r0, #0
1000ee00:	d028      	beq.n	1000ee54 <__aeabi_ui2d+0x58>
1000ee02:	f000 f871 	bl	1000eee8 <__clzsi2>
1000ee06:	4b15      	ldr	r3, [pc, #84]	; (1000ee5c <__aeabi_ui2d+0x60>)
1000ee08:	4a15      	ldr	r2, [pc, #84]	; (1000ee60 <__aeabi_ui2d+0x64>)
1000ee0a:	1a1b      	subs	r3, r3, r0
1000ee0c:	1ad2      	subs	r2, r2, r3
1000ee0e:	2a1f      	cmp	r2, #31
1000ee10:	dd16      	ble.n	1000ee40 <__aeabi_ui2d+0x44>
1000ee12:	002c      	movs	r4, r5
1000ee14:	4a13      	ldr	r2, [pc, #76]	; (1000ee64 <__aeabi_ui2d+0x68>)
1000ee16:	2500      	movs	r5, #0
1000ee18:	1ad2      	subs	r2, r2, r3
1000ee1a:	4094      	lsls	r4, r2
1000ee1c:	055a      	lsls	r2, r3, #21
1000ee1e:	0324      	lsls	r4, r4, #12
1000ee20:	0b24      	lsrs	r4, r4, #12
1000ee22:	0d52      	lsrs	r2, r2, #21
1000ee24:	2100      	movs	r1, #0
1000ee26:	0324      	lsls	r4, r4, #12
1000ee28:	0d0b      	lsrs	r3, r1, #20
1000ee2a:	0b24      	lsrs	r4, r4, #12
1000ee2c:	051b      	lsls	r3, r3, #20
1000ee2e:	4323      	orrs	r3, r4
1000ee30:	4c0d      	ldr	r4, [pc, #52]	; (1000ee68 <__aeabi_ui2d+0x6c>)
1000ee32:	0512      	lsls	r2, r2, #20
1000ee34:	4023      	ands	r3, r4
1000ee36:	4313      	orrs	r3, r2
1000ee38:	005b      	lsls	r3, r3, #1
1000ee3a:	0028      	movs	r0, r5
1000ee3c:	0859      	lsrs	r1, r3, #1
1000ee3e:	bd70      	pop	{r4, r5, r6, pc}
1000ee40:	210b      	movs	r1, #11
1000ee42:	002c      	movs	r4, r5
1000ee44:	1a08      	subs	r0, r1, r0
1000ee46:	40c4      	lsrs	r4, r0
1000ee48:	4095      	lsls	r5, r2
1000ee4a:	0324      	lsls	r4, r4, #12
1000ee4c:	055a      	lsls	r2, r3, #21
1000ee4e:	0b24      	lsrs	r4, r4, #12
1000ee50:	0d52      	lsrs	r2, r2, #21
1000ee52:	e7e7      	b.n	1000ee24 <__aeabi_ui2d+0x28>
1000ee54:	2200      	movs	r2, #0
1000ee56:	2400      	movs	r4, #0
1000ee58:	e7e4      	b.n	1000ee24 <__aeabi_ui2d+0x28>
1000ee5a:	46c0      	nop			; (mov r8, r8)
1000ee5c:	0000041e 	.word	0x0000041e
1000ee60:	00000433 	.word	0x00000433
1000ee64:	00000413 	.word	0x00000413
1000ee68:	800fffff 	.word	0x800fffff

1000ee6c <__aeabi_cdrcmple>:
1000ee6c:	4684      	mov	ip, r0
1000ee6e:	1c10      	adds	r0, r2, #0
1000ee70:	4662      	mov	r2, ip
1000ee72:	468c      	mov	ip, r1
1000ee74:	1c19      	adds	r1, r3, #0
1000ee76:	4663      	mov	r3, ip
1000ee78:	e000      	b.n	1000ee7c <__aeabi_cdcmpeq>
1000ee7a:	46c0      	nop			; (mov r8, r8)

1000ee7c <__aeabi_cdcmpeq>:
1000ee7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000ee7e:	f000 f8f5 	bl	1000f06c <__ledf2>
1000ee82:	2800      	cmp	r0, #0
1000ee84:	d401      	bmi.n	1000ee8a <__aeabi_cdcmpeq+0xe>
1000ee86:	2100      	movs	r1, #0
1000ee88:	42c8      	cmn	r0, r1
1000ee8a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000ee8c <__aeabi_dcmpeq>:
1000ee8c:	b510      	push	{r4, lr}
1000ee8e:	f000 f849 	bl	1000ef24 <__eqdf2>
1000ee92:	4240      	negs	r0, r0
1000ee94:	3001      	adds	r0, #1
1000ee96:	bd10      	pop	{r4, pc}

1000ee98 <__aeabi_dcmplt>:
1000ee98:	b510      	push	{r4, lr}
1000ee9a:	f000 f8e7 	bl	1000f06c <__ledf2>
1000ee9e:	2800      	cmp	r0, #0
1000eea0:	db01      	blt.n	1000eea6 <__aeabi_dcmplt+0xe>
1000eea2:	2000      	movs	r0, #0
1000eea4:	bd10      	pop	{r4, pc}
1000eea6:	2001      	movs	r0, #1
1000eea8:	bd10      	pop	{r4, pc}
1000eeaa:	46c0      	nop			; (mov r8, r8)

1000eeac <__aeabi_dcmple>:
1000eeac:	b510      	push	{r4, lr}
1000eeae:	f000 f8dd 	bl	1000f06c <__ledf2>
1000eeb2:	2800      	cmp	r0, #0
1000eeb4:	dd01      	ble.n	1000eeba <__aeabi_dcmple+0xe>
1000eeb6:	2000      	movs	r0, #0
1000eeb8:	bd10      	pop	{r4, pc}
1000eeba:	2001      	movs	r0, #1
1000eebc:	bd10      	pop	{r4, pc}
1000eebe:	46c0      	nop			; (mov r8, r8)

1000eec0 <__aeabi_dcmpgt>:
1000eec0:	b510      	push	{r4, lr}
1000eec2:	f000 f86f 	bl	1000efa4 <__gedf2>
1000eec6:	2800      	cmp	r0, #0
1000eec8:	dc01      	bgt.n	1000eece <__aeabi_dcmpgt+0xe>
1000eeca:	2000      	movs	r0, #0
1000eecc:	bd10      	pop	{r4, pc}
1000eece:	2001      	movs	r0, #1
1000eed0:	bd10      	pop	{r4, pc}
1000eed2:	46c0      	nop			; (mov r8, r8)

1000eed4 <__aeabi_dcmpge>:
1000eed4:	b510      	push	{r4, lr}
1000eed6:	f000 f865 	bl	1000efa4 <__gedf2>
1000eeda:	2800      	cmp	r0, #0
1000eedc:	da01      	bge.n	1000eee2 <__aeabi_dcmpge+0xe>
1000eede:	2000      	movs	r0, #0
1000eee0:	bd10      	pop	{r4, pc}
1000eee2:	2001      	movs	r0, #1
1000eee4:	bd10      	pop	{r4, pc}
1000eee6:	46c0      	nop			; (mov r8, r8)

1000eee8 <__clzsi2>:
1000eee8:	211c      	movs	r1, #28
1000eeea:	2301      	movs	r3, #1
1000eeec:	041b      	lsls	r3, r3, #16
1000eeee:	4298      	cmp	r0, r3
1000eef0:	d301      	bcc.n	1000eef6 <__clzsi2+0xe>
1000eef2:	0c00      	lsrs	r0, r0, #16
1000eef4:	3910      	subs	r1, #16
1000eef6:	0a1b      	lsrs	r3, r3, #8
1000eef8:	4298      	cmp	r0, r3
1000eefa:	d301      	bcc.n	1000ef00 <__clzsi2+0x18>
1000eefc:	0a00      	lsrs	r0, r0, #8
1000eefe:	3908      	subs	r1, #8
1000ef00:	091b      	lsrs	r3, r3, #4
1000ef02:	4298      	cmp	r0, r3
1000ef04:	d301      	bcc.n	1000ef0a <__clzsi2+0x22>
1000ef06:	0900      	lsrs	r0, r0, #4
1000ef08:	3904      	subs	r1, #4
1000ef0a:	a202      	add	r2, pc, #8	; (adr r2, 1000ef14 <__clzsi2+0x2c>)
1000ef0c:	5c10      	ldrb	r0, [r2, r0]
1000ef0e:	1840      	adds	r0, r0, r1
1000ef10:	4770      	bx	lr
1000ef12:	46c0      	nop			; (mov r8, r8)
1000ef14:	02020304 	.word	0x02020304
1000ef18:	01010101 	.word	0x01010101
	...

1000ef24 <__eqdf2>:
1000ef24:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ef26:	465f      	mov	r7, fp
1000ef28:	4656      	mov	r6, sl
1000ef2a:	464d      	mov	r5, r9
1000ef2c:	4644      	mov	r4, r8
1000ef2e:	b4f0      	push	{r4, r5, r6, r7}
1000ef30:	031f      	lsls	r7, r3, #12
1000ef32:	005c      	lsls	r4, r3, #1
1000ef34:	0fdb      	lsrs	r3, r3, #31
1000ef36:	469a      	mov	sl, r3
1000ef38:	4b19      	ldr	r3, [pc, #100]	; (1000efa0 <__eqdf2+0x7c>)
1000ef3a:	030e      	lsls	r6, r1, #12
1000ef3c:	004d      	lsls	r5, r1, #1
1000ef3e:	0fc9      	lsrs	r1, r1, #31
1000ef40:	4680      	mov	r8, r0
1000ef42:	0b36      	lsrs	r6, r6, #12
1000ef44:	0d6d      	lsrs	r5, r5, #21
1000ef46:	468b      	mov	fp, r1
1000ef48:	4691      	mov	r9, r2
1000ef4a:	0b3f      	lsrs	r7, r7, #12
1000ef4c:	0d64      	lsrs	r4, r4, #21
1000ef4e:	429d      	cmp	r5, r3
1000ef50:	d019      	beq.n	1000ef86 <__eqdf2+0x62>
1000ef52:	4b13      	ldr	r3, [pc, #76]	; (1000efa0 <__eqdf2+0x7c>)
1000ef54:	429c      	cmp	r4, r3
1000ef56:	d01b      	beq.n	1000ef90 <__eqdf2+0x6c>
1000ef58:	2301      	movs	r3, #1
1000ef5a:	42a5      	cmp	r5, r4
1000ef5c:	d006      	beq.n	1000ef6c <__eqdf2+0x48>
1000ef5e:	0018      	movs	r0, r3
1000ef60:	bc3c      	pop	{r2, r3, r4, r5}
1000ef62:	4690      	mov	r8, r2
1000ef64:	4699      	mov	r9, r3
1000ef66:	46a2      	mov	sl, r4
1000ef68:	46ab      	mov	fp, r5
1000ef6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ef6c:	42be      	cmp	r6, r7
1000ef6e:	d1f6      	bne.n	1000ef5e <__eqdf2+0x3a>
1000ef70:	45c8      	cmp	r8, r9
1000ef72:	d1f4      	bne.n	1000ef5e <__eqdf2+0x3a>
1000ef74:	45d3      	cmp	fp, sl
1000ef76:	d010      	beq.n	1000ef9a <__eqdf2+0x76>
1000ef78:	2d00      	cmp	r5, #0
1000ef7a:	d1f0      	bne.n	1000ef5e <__eqdf2+0x3a>
1000ef7c:	4330      	orrs	r0, r6
1000ef7e:	0003      	movs	r3, r0
1000ef80:	1e5a      	subs	r2, r3, #1
1000ef82:	4193      	sbcs	r3, r2
1000ef84:	e7eb      	b.n	1000ef5e <__eqdf2+0x3a>
1000ef86:	0031      	movs	r1, r6
1000ef88:	2301      	movs	r3, #1
1000ef8a:	4301      	orrs	r1, r0
1000ef8c:	d1e7      	bne.n	1000ef5e <__eqdf2+0x3a>
1000ef8e:	e7e0      	b.n	1000ef52 <__eqdf2+0x2e>
1000ef90:	433a      	orrs	r2, r7
1000ef92:	2301      	movs	r3, #1
1000ef94:	2a00      	cmp	r2, #0
1000ef96:	d1e2      	bne.n	1000ef5e <__eqdf2+0x3a>
1000ef98:	e7de      	b.n	1000ef58 <__eqdf2+0x34>
1000ef9a:	2300      	movs	r3, #0
1000ef9c:	e7df      	b.n	1000ef5e <__eqdf2+0x3a>
1000ef9e:	46c0      	nop			; (mov r8, r8)
1000efa0:	000007ff 	.word	0x000007ff

1000efa4 <__gedf2>:
1000efa4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000efa6:	465f      	mov	r7, fp
1000efa8:	4644      	mov	r4, r8
1000efaa:	4656      	mov	r6, sl
1000efac:	464d      	mov	r5, r9
1000efae:	b4f0      	push	{r4, r5, r6, r7}
1000efb0:	031f      	lsls	r7, r3, #12
1000efb2:	0b3c      	lsrs	r4, r7, #12
1000efb4:	4f2c      	ldr	r7, [pc, #176]	; (1000f068 <__gedf2+0xc4>)
1000efb6:	030e      	lsls	r6, r1, #12
1000efb8:	004d      	lsls	r5, r1, #1
1000efba:	46a3      	mov	fp, r4
1000efbc:	005c      	lsls	r4, r3, #1
1000efbe:	4684      	mov	ip, r0
1000efc0:	0b36      	lsrs	r6, r6, #12
1000efc2:	0d6d      	lsrs	r5, r5, #21
1000efc4:	0fc9      	lsrs	r1, r1, #31
1000efc6:	4690      	mov	r8, r2
1000efc8:	0d64      	lsrs	r4, r4, #21
1000efca:	0fdb      	lsrs	r3, r3, #31
1000efcc:	42bd      	cmp	r5, r7
1000efce:	d02b      	beq.n	1000f028 <__gedf2+0x84>
1000efd0:	4f25      	ldr	r7, [pc, #148]	; (1000f068 <__gedf2+0xc4>)
1000efd2:	42bc      	cmp	r4, r7
1000efd4:	d02e      	beq.n	1000f034 <__gedf2+0x90>
1000efd6:	2d00      	cmp	r5, #0
1000efd8:	d10e      	bne.n	1000eff8 <__gedf2+0x54>
1000efda:	4330      	orrs	r0, r6
1000efdc:	0007      	movs	r7, r0
1000efde:	4681      	mov	r9, r0
1000efe0:	4278      	negs	r0, r7
1000efe2:	4178      	adcs	r0, r7
1000efe4:	2c00      	cmp	r4, #0
1000efe6:	d117      	bne.n	1000f018 <__gedf2+0x74>
1000efe8:	465f      	mov	r7, fp
1000efea:	433a      	orrs	r2, r7
1000efec:	d114      	bne.n	1000f018 <__gedf2+0x74>
1000efee:	464b      	mov	r3, r9
1000eff0:	2000      	movs	r0, #0
1000eff2:	2b00      	cmp	r3, #0
1000eff4:	d00a      	beq.n	1000f00c <__gedf2+0x68>
1000eff6:	e006      	b.n	1000f006 <__gedf2+0x62>
1000eff8:	2c00      	cmp	r4, #0
1000effa:	d102      	bne.n	1000f002 <__gedf2+0x5e>
1000effc:	4658      	mov	r0, fp
1000effe:	4302      	orrs	r2, r0
1000f000:	d001      	beq.n	1000f006 <__gedf2+0x62>
1000f002:	4299      	cmp	r1, r3
1000f004:	d01a      	beq.n	1000f03c <__gedf2+0x98>
1000f006:	2301      	movs	r3, #1
1000f008:	4248      	negs	r0, r1
1000f00a:	4318      	orrs	r0, r3
1000f00c:	bc3c      	pop	{r2, r3, r4, r5}
1000f00e:	4690      	mov	r8, r2
1000f010:	4699      	mov	r9, r3
1000f012:	46a2      	mov	sl, r4
1000f014:	46ab      	mov	fp, r5
1000f016:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f018:	2800      	cmp	r0, #0
1000f01a:	d0f2      	beq.n	1000f002 <__gedf2+0x5e>
1000f01c:	4258      	negs	r0, r3
1000f01e:	4158      	adcs	r0, r3
1000f020:	2201      	movs	r2, #1
1000f022:	4240      	negs	r0, r0
1000f024:	4310      	orrs	r0, r2
1000f026:	e7f1      	b.n	1000f00c <__gedf2+0x68>
1000f028:	0037      	movs	r7, r6
1000f02a:	4307      	orrs	r7, r0
1000f02c:	d0d0      	beq.n	1000efd0 <__gedf2+0x2c>
1000f02e:	2002      	movs	r0, #2
1000f030:	4240      	negs	r0, r0
1000f032:	e7eb      	b.n	1000f00c <__gedf2+0x68>
1000f034:	465f      	mov	r7, fp
1000f036:	4317      	orrs	r7, r2
1000f038:	d0cd      	beq.n	1000efd6 <__gedf2+0x32>
1000f03a:	e7f8      	b.n	1000f02e <__gedf2+0x8a>
1000f03c:	42a5      	cmp	r5, r4
1000f03e:	dce2      	bgt.n	1000f006 <__gedf2+0x62>
1000f040:	db05      	blt.n	1000f04e <__gedf2+0xaa>
1000f042:	455e      	cmp	r6, fp
1000f044:	d8df      	bhi.n	1000f006 <__gedf2+0x62>
1000f046:	d008      	beq.n	1000f05a <__gedf2+0xb6>
1000f048:	2000      	movs	r0, #0
1000f04a:	455e      	cmp	r6, fp
1000f04c:	d2de      	bcs.n	1000f00c <__gedf2+0x68>
1000f04e:	4248      	negs	r0, r1
1000f050:	4148      	adcs	r0, r1
1000f052:	2301      	movs	r3, #1
1000f054:	4240      	negs	r0, r0
1000f056:	4318      	orrs	r0, r3
1000f058:	e7d8      	b.n	1000f00c <__gedf2+0x68>
1000f05a:	45c4      	cmp	ip, r8
1000f05c:	d8d3      	bhi.n	1000f006 <__gedf2+0x62>
1000f05e:	2000      	movs	r0, #0
1000f060:	45c4      	cmp	ip, r8
1000f062:	d3f4      	bcc.n	1000f04e <__gedf2+0xaa>
1000f064:	e7d2      	b.n	1000f00c <__gedf2+0x68>
1000f066:	46c0      	nop			; (mov r8, r8)
1000f068:	000007ff 	.word	0x000007ff

1000f06c <__ledf2>:
1000f06c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f06e:	465f      	mov	r7, fp
1000f070:	464d      	mov	r5, r9
1000f072:	4644      	mov	r4, r8
1000f074:	4656      	mov	r6, sl
1000f076:	b4f0      	push	{r4, r5, r6, r7}
1000f078:	031c      	lsls	r4, r3, #12
1000f07a:	0b24      	lsrs	r4, r4, #12
1000f07c:	46a4      	mov	ip, r4
1000f07e:	4c2f      	ldr	r4, [pc, #188]	; (1000f13c <__ledf2+0xd0>)
1000f080:	030f      	lsls	r7, r1, #12
1000f082:	004d      	lsls	r5, r1, #1
1000f084:	005e      	lsls	r6, r3, #1
1000f086:	0fc9      	lsrs	r1, r1, #31
1000f088:	4680      	mov	r8, r0
1000f08a:	0b3f      	lsrs	r7, r7, #12
1000f08c:	0d6d      	lsrs	r5, r5, #21
1000f08e:	468b      	mov	fp, r1
1000f090:	4691      	mov	r9, r2
1000f092:	0d76      	lsrs	r6, r6, #21
1000f094:	0fdb      	lsrs	r3, r3, #31
1000f096:	42a5      	cmp	r5, r4
1000f098:	d020      	beq.n	1000f0dc <__ledf2+0x70>
1000f09a:	4c28      	ldr	r4, [pc, #160]	; (1000f13c <__ledf2+0xd0>)
1000f09c:	42a6      	cmp	r6, r4
1000f09e:	d022      	beq.n	1000f0e6 <__ledf2+0x7a>
1000f0a0:	2d00      	cmp	r5, #0
1000f0a2:	d112      	bne.n	1000f0ca <__ledf2+0x5e>
1000f0a4:	4338      	orrs	r0, r7
1000f0a6:	4244      	negs	r4, r0
1000f0a8:	4144      	adcs	r4, r0
1000f0aa:	2e00      	cmp	r6, #0
1000f0ac:	d020      	beq.n	1000f0f0 <__ledf2+0x84>
1000f0ae:	2c00      	cmp	r4, #0
1000f0b0:	d00d      	beq.n	1000f0ce <__ledf2+0x62>
1000f0b2:	425c      	negs	r4, r3
1000f0b4:	4163      	adcs	r3, r4
1000f0b6:	2401      	movs	r4, #1
1000f0b8:	425b      	negs	r3, r3
1000f0ba:	431c      	orrs	r4, r3
1000f0bc:	0020      	movs	r0, r4
1000f0be:	bc3c      	pop	{r2, r3, r4, r5}
1000f0c0:	4690      	mov	r8, r2
1000f0c2:	4699      	mov	r9, r3
1000f0c4:	46a2      	mov	sl, r4
1000f0c6:	46ab      	mov	fp, r5
1000f0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f0ca:	2e00      	cmp	r6, #0
1000f0cc:	d017      	beq.n	1000f0fe <__ledf2+0x92>
1000f0ce:	455b      	cmp	r3, fp
1000f0d0:	d019      	beq.n	1000f106 <__ledf2+0x9a>
1000f0d2:	465b      	mov	r3, fp
1000f0d4:	425c      	negs	r4, r3
1000f0d6:	2301      	movs	r3, #1
1000f0d8:	431c      	orrs	r4, r3
1000f0da:	e7ef      	b.n	1000f0bc <__ledf2+0x50>
1000f0dc:	0039      	movs	r1, r7
1000f0de:	2402      	movs	r4, #2
1000f0e0:	4301      	orrs	r1, r0
1000f0e2:	d1eb      	bne.n	1000f0bc <__ledf2+0x50>
1000f0e4:	e7d9      	b.n	1000f09a <__ledf2+0x2e>
1000f0e6:	4661      	mov	r1, ip
1000f0e8:	2402      	movs	r4, #2
1000f0ea:	4311      	orrs	r1, r2
1000f0ec:	d1e6      	bne.n	1000f0bc <__ledf2+0x50>
1000f0ee:	e7d7      	b.n	1000f0a0 <__ledf2+0x34>
1000f0f0:	4661      	mov	r1, ip
1000f0f2:	430a      	orrs	r2, r1
1000f0f4:	d1db      	bne.n	1000f0ae <__ledf2+0x42>
1000f0f6:	2400      	movs	r4, #0
1000f0f8:	2800      	cmp	r0, #0
1000f0fa:	d0df      	beq.n	1000f0bc <__ledf2+0x50>
1000f0fc:	e7e9      	b.n	1000f0d2 <__ledf2+0x66>
1000f0fe:	4661      	mov	r1, ip
1000f100:	430a      	orrs	r2, r1
1000f102:	d1e4      	bne.n	1000f0ce <__ledf2+0x62>
1000f104:	e7e5      	b.n	1000f0d2 <__ledf2+0x66>
1000f106:	42b5      	cmp	r5, r6
1000f108:	dd03      	ble.n	1000f112 <__ledf2+0xa6>
1000f10a:	2201      	movs	r2, #1
1000f10c:	425c      	negs	r4, r3
1000f10e:	4314      	orrs	r4, r2
1000f110:	e7d4      	b.n	1000f0bc <__ledf2+0x50>
1000f112:	42b5      	cmp	r5, r6
1000f114:	dbcd      	blt.n	1000f0b2 <__ledf2+0x46>
1000f116:	4567      	cmp	r7, ip
1000f118:	d8db      	bhi.n	1000f0d2 <__ledf2+0x66>
1000f11a:	d009      	beq.n	1000f130 <__ledf2+0xc4>
1000f11c:	2400      	movs	r4, #0
1000f11e:	4567      	cmp	r7, ip
1000f120:	d2cc      	bcs.n	1000f0bc <__ledf2+0x50>
1000f122:	4659      	mov	r1, fp
1000f124:	424c      	negs	r4, r1
1000f126:	4161      	adcs	r1, r4
1000f128:	2401      	movs	r4, #1
1000f12a:	4249      	negs	r1, r1
1000f12c:	430c      	orrs	r4, r1
1000f12e:	e7c5      	b.n	1000f0bc <__ledf2+0x50>
1000f130:	45c8      	cmp	r8, r9
1000f132:	d8ce      	bhi.n	1000f0d2 <__ledf2+0x66>
1000f134:	2400      	movs	r4, #0
1000f136:	45c8      	cmp	r8, r9
1000f138:	d3f3      	bcc.n	1000f122 <__ledf2+0xb6>
1000f13a:	e7bf      	b.n	1000f0bc <__ledf2+0x50>
1000f13c:	000007ff 	.word	0x000007ff

1000f140 <__libc_init_array>:
1000f140:	4b0e      	ldr	r3, [pc, #56]	; (1000f17c <__libc_init_array+0x3c>)
1000f142:	b570      	push	{r4, r5, r6, lr}
1000f144:	2500      	movs	r5, #0
1000f146:	001e      	movs	r6, r3
1000f148:	4c0d      	ldr	r4, [pc, #52]	; (1000f180 <__libc_init_array+0x40>)
1000f14a:	1ae4      	subs	r4, r4, r3
1000f14c:	10a4      	asrs	r4, r4, #2
1000f14e:	42a5      	cmp	r5, r4
1000f150:	d004      	beq.n	1000f15c <__libc_init_array+0x1c>
1000f152:	00ab      	lsls	r3, r5, #2
1000f154:	58f3      	ldr	r3, [r6, r3]
1000f156:	4798      	blx	r3
1000f158:	3501      	adds	r5, #1
1000f15a:	e7f8      	b.n	1000f14e <__libc_init_array+0xe>
1000f15c:	f001 fefa 	bl	10010f54 <_init>
1000f160:	4b08      	ldr	r3, [pc, #32]	; (1000f184 <__libc_init_array+0x44>)
1000f162:	2500      	movs	r5, #0
1000f164:	001e      	movs	r6, r3
1000f166:	4c08      	ldr	r4, [pc, #32]	; (1000f188 <__libc_init_array+0x48>)
1000f168:	1ae4      	subs	r4, r4, r3
1000f16a:	10a4      	asrs	r4, r4, #2
1000f16c:	42a5      	cmp	r5, r4
1000f16e:	d004      	beq.n	1000f17a <__libc_init_array+0x3a>
1000f170:	00ab      	lsls	r3, r5, #2
1000f172:	58f3      	ldr	r3, [r6, r3]
1000f174:	4798      	blx	r3
1000f176:	3501      	adds	r5, #1
1000f178:	e7f8      	b.n	1000f16c <__libc_init_array+0x2c>
1000f17a:	bd70      	pop	{r4, r5, r6, pc}
1000f17c:	10010f60 	.word	0x10010f60
1000f180:	10010f60 	.word	0x10010f60
1000f184:	10010f60 	.word	0x10010f60
1000f188:	10010f64 	.word	0x10010f64

1000f18c <memcmp>:
1000f18c:	b530      	push	{r4, r5, lr}
1000f18e:	2400      	movs	r4, #0
1000f190:	42a2      	cmp	r2, r4
1000f192:	d008      	beq.n	1000f1a6 <memcmp+0x1a>
1000f194:	5d03      	ldrb	r3, [r0, r4]
1000f196:	1c65      	adds	r5, r4, #1
1000f198:	5d0c      	ldrb	r4, [r1, r4]
1000f19a:	42a3      	cmp	r3, r4
1000f19c:	d001      	beq.n	1000f1a2 <memcmp+0x16>
1000f19e:	1b18      	subs	r0, r3, r4
1000f1a0:	e002      	b.n	1000f1a8 <memcmp+0x1c>
1000f1a2:	002c      	movs	r4, r5
1000f1a4:	e7f4      	b.n	1000f190 <memcmp+0x4>
1000f1a6:	2000      	movs	r0, #0
1000f1a8:	bd30      	pop	{r4, r5, pc}

1000f1aa <memcpy>:
1000f1aa:	2300      	movs	r3, #0
1000f1ac:	b510      	push	{r4, lr}
1000f1ae:	429a      	cmp	r2, r3
1000f1b0:	d003      	beq.n	1000f1ba <memcpy+0x10>
1000f1b2:	5ccc      	ldrb	r4, [r1, r3]
1000f1b4:	54c4      	strb	r4, [r0, r3]
1000f1b6:	3301      	adds	r3, #1
1000f1b8:	e7f9      	b.n	1000f1ae <memcpy+0x4>
1000f1ba:	bd10      	pop	{r4, pc}

1000f1bc <memset>:
1000f1bc:	0003      	movs	r3, r0
1000f1be:	1882      	adds	r2, r0, r2
1000f1c0:	4293      	cmp	r3, r2
1000f1c2:	d002      	beq.n	1000f1ca <memset+0xe>
1000f1c4:	7019      	strb	r1, [r3, #0]
1000f1c6:	3301      	adds	r3, #1
1000f1c8:	e7fa      	b.n	1000f1c0 <memset+0x4>
1000f1ca:	4770      	bx	lr

1000f1cc <iprintf>:
1000f1cc:	b40f      	push	{r0, r1, r2, r3}
1000f1ce:	4b0b      	ldr	r3, [pc, #44]	; (1000f1fc <iprintf+0x30>)
1000f1d0:	b513      	push	{r0, r1, r4, lr}
1000f1d2:	681c      	ldr	r4, [r3, #0]
1000f1d4:	2c00      	cmp	r4, #0
1000f1d6:	d005      	beq.n	1000f1e4 <iprintf+0x18>
1000f1d8:	69a3      	ldr	r3, [r4, #24]
1000f1da:	2b00      	cmp	r3, #0
1000f1dc:	d102      	bne.n	1000f1e4 <iprintf+0x18>
1000f1de:	0020      	movs	r0, r4
1000f1e0:	f000 fb46 	bl	1000f870 <__sinit>
1000f1e4:	ab05      	add	r3, sp, #20
1000f1e6:	9a04      	ldr	r2, [sp, #16]
1000f1e8:	68a1      	ldr	r1, [r4, #8]
1000f1ea:	0020      	movs	r0, r4
1000f1ec:	9301      	str	r3, [sp, #4]
1000f1ee:	f000 fd05 	bl	1000fbfc <_vfiprintf_r>
1000f1f2:	bc16      	pop	{r1, r2, r4}
1000f1f4:	bc08      	pop	{r3}
1000f1f6:	b004      	add	sp, #16
1000f1f8:	4718      	bx	r3
1000f1fa:	46c0      	nop			; (mov r8, r8)
1000f1fc:	10010fdc 	.word	0x10010fdc

1000f200 <putchar>:
1000f200:	4b08      	ldr	r3, [pc, #32]	; (1000f224 <putchar+0x24>)
1000f202:	b570      	push	{r4, r5, r6, lr}
1000f204:	681c      	ldr	r4, [r3, #0]
1000f206:	0005      	movs	r5, r0
1000f208:	2c00      	cmp	r4, #0
1000f20a:	d005      	beq.n	1000f218 <putchar+0x18>
1000f20c:	69a3      	ldr	r3, [r4, #24]
1000f20e:	2b00      	cmp	r3, #0
1000f210:	d102      	bne.n	1000f218 <putchar+0x18>
1000f212:	0020      	movs	r0, r4
1000f214:	f000 fb2c 	bl	1000f870 <__sinit>
1000f218:	0029      	movs	r1, r5
1000f21a:	68a2      	ldr	r2, [r4, #8]
1000f21c:	0020      	movs	r0, r4
1000f21e:	f000 ff99 	bl	10010154 <_putc_r>
1000f222:	bd70      	pop	{r4, r5, r6, pc}
1000f224:	10010fdc 	.word	0x10010fdc

1000f228 <_puts_r>:
1000f228:	b570      	push	{r4, r5, r6, lr}
1000f22a:	0005      	movs	r5, r0
1000f22c:	000e      	movs	r6, r1
1000f22e:	2800      	cmp	r0, #0
1000f230:	d004      	beq.n	1000f23c <_puts_r+0x14>
1000f232:	6983      	ldr	r3, [r0, #24]
1000f234:	2b00      	cmp	r3, #0
1000f236:	d101      	bne.n	1000f23c <_puts_r+0x14>
1000f238:	f000 fb1a 	bl	1000f870 <__sinit>
1000f23c:	69ab      	ldr	r3, [r5, #24]
1000f23e:	68ac      	ldr	r4, [r5, #8]
1000f240:	2b00      	cmp	r3, #0
1000f242:	d102      	bne.n	1000f24a <_puts_r+0x22>
1000f244:	0028      	movs	r0, r5
1000f246:	f000 fb13 	bl	1000f870 <__sinit>
1000f24a:	4b25      	ldr	r3, [pc, #148]	; (1000f2e0 <_puts_r+0xb8>)
1000f24c:	429c      	cmp	r4, r3
1000f24e:	d101      	bne.n	1000f254 <_puts_r+0x2c>
1000f250:	686c      	ldr	r4, [r5, #4]
1000f252:	e008      	b.n	1000f266 <_puts_r+0x3e>
1000f254:	4b23      	ldr	r3, [pc, #140]	; (1000f2e4 <_puts_r+0xbc>)
1000f256:	429c      	cmp	r4, r3
1000f258:	d101      	bne.n	1000f25e <_puts_r+0x36>
1000f25a:	68ac      	ldr	r4, [r5, #8]
1000f25c:	e003      	b.n	1000f266 <_puts_r+0x3e>
1000f25e:	4b22      	ldr	r3, [pc, #136]	; (1000f2e8 <_puts_r+0xc0>)
1000f260:	429c      	cmp	r4, r3
1000f262:	d100      	bne.n	1000f266 <_puts_r+0x3e>
1000f264:	68ec      	ldr	r4, [r5, #12]
1000f266:	89a3      	ldrh	r3, [r4, #12]
1000f268:	071b      	lsls	r3, r3, #28
1000f26a:	d502      	bpl.n	1000f272 <_puts_r+0x4a>
1000f26c:	6923      	ldr	r3, [r4, #16]
1000f26e:	2b00      	cmp	r3, #0
1000f270:	d111      	bne.n	1000f296 <_puts_r+0x6e>
1000f272:	0021      	movs	r1, r4
1000f274:	0028      	movs	r0, r5
1000f276:	f000 f991 	bl	1000f59c <__swsetup_r>
1000f27a:	2800      	cmp	r0, #0
1000f27c:	d00b      	beq.n	1000f296 <_puts_r+0x6e>
1000f27e:	2001      	movs	r0, #1
1000f280:	4240      	negs	r0, r0
1000f282:	e02b      	b.n	1000f2dc <_puts_r+0xb4>
1000f284:	3b01      	subs	r3, #1
1000f286:	3601      	adds	r6, #1
1000f288:	60a3      	str	r3, [r4, #8]
1000f28a:	2b00      	cmp	r3, #0
1000f28c:	db08      	blt.n	1000f2a0 <_puts_r+0x78>
1000f28e:	6823      	ldr	r3, [r4, #0]
1000f290:	1c5a      	adds	r2, r3, #1
1000f292:	6022      	str	r2, [r4, #0]
1000f294:	7019      	strb	r1, [r3, #0]
1000f296:	7831      	ldrb	r1, [r6, #0]
1000f298:	68a3      	ldr	r3, [r4, #8]
1000f29a:	2900      	cmp	r1, #0
1000f29c:	d1f2      	bne.n	1000f284 <_puts_r+0x5c>
1000f29e:	e00b      	b.n	1000f2b8 <_puts_r+0x90>
1000f2a0:	69a2      	ldr	r2, [r4, #24]
1000f2a2:	4293      	cmp	r3, r2
1000f2a4:	db01      	blt.n	1000f2aa <_puts_r+0x82>
1000f2a6:	290a      	cmp	r1, #10
1000f2a8:	d1f1      	bne.n	1000f28e <_puts_r+0x66>
1000f2aa:	0022      	movs	r2, r4
1000f2ac:	0028      	movs	r0, r5
1000f2ae:	f000 f91d 	bl	1000f4ec <__swbuf_r>
1000f2b2:	1c43      	adds	r3, r0, #1
1000f2b4:	d1ef      	bne.n	1000f296 <_puts_r+0x6e>
1000f2b6:	e7e2      	b.n	1000f27e <_puts_r+0x56>
1000f2b8:	3b01      	subs	r3, #1
1000f2ba:	60a3      	str	r3, [r4, #8]
1000f2bc:	2b00      	cmp	r3, #0
1000f2be:	da08      	bge.n	1000f2d2 <_puts_r+0xaa>
1000f2c0:	0022      	movs	r2, r4
1000f2c2:	310a      	adds	r1, #10
1000f2c4:	0028      	movs	r0, r5
1000f2c6:	f000 f911 	bl	1000f4ec <__swbuf_r>
1000f2ca:	1c43      	adds	r3, r0, #1
1000f2cc:	d0d7      	beq.n	1000f27e <_puts_r+0x56>
1000f2ce:	200a      	movs	r0, #10
1000f2d0:	e004      	b.n	1000f2dc <_puts_r+0xb4>
1000f2d2:	200a      	movs	r0, #10
1000f2d4:	6823      	ldr	r3, [r4, #0]
1000f2d6:	1c5a      	adds	r2, r3, #1
1000f2d8:	6022      	str	r2, [r4, #0]
1000f2da:	7018      	strb	r0, [r3, #0]
1000f2dc:	bd70      	pop	{r4, r5, r6, pc}
1000f2de:	46c0      	nop			; (mov r8, r8)
1000f2e0:	10010ec0 	.word	0x10010ec0
1000f2e4:	10010ee0 	.word	0x10010ee0
1000f2e8:	10010f00 	.word	0x10010f00

1000f2ec <puts>:
1000f2ec:	b510      	push	{r4, lr}
1000f2ee:	4b03      	ldr	r3, [pc, #12]	; (1000f2fc <puts+0x10>)
1000f2f0:	0001      	movs	r1, r0
1000f2f2:	6818      	ldr	r0, [r3, #0]
1000f2f4:	f7ff ff98 	bl	1000f228 <_puts_r>
1000f2f8:	bd10      	pop	{r4, pc}
1000f2fa:	46c0      	nop			; (mov r8, r8)
1000f2fc:	10010fdc 	.word	0x10010fdc

1000f300 <rand>:
1000f300:	4b15      	ldr	r3, [pc, #84]	; (1000f358 <rand+0x58>)
1000f302:	b510      	push	{r4, lr}
1000f304:	681c      	ldr	r4, [r3, #0]
1000f306:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1000f308:	2b00      	cmp	r3, #0
1000f30a:	d115      	bne.n	1000f338 <rand+0x38>
1000f30c:	2018      	movs	r0, #24
1000f30e:	f000 fba7 	bl	1000fa60 <malloc>
1000f312:	4b12      	ldr	r3, [pc, #72]	; (1000f35c <rand+0x5c>)
1000f314:	63a0      	str	r0, [r4, #56]	; 0x38
1000f316:	8003      	strh	r3, [r0, #0]
1000f318:	4b11      	ldr	r3, [pc, #68]	; (1000f360 <rand+0x60>)
1000f31a:	2201      	movs	r2, #1
1000f31c:	8043      	strh	r3, [r0, #2]
1000f31e:	4b11      	ldr	r3, [pc, #68]	; (1000f364 <rand+0x64>)
1000f320:	8083      	strh	r3, [r0, #4]
1000f322:	4b11      	ldr	r3, [pc, #68]	; (1000f368 <rand+0x68>)
1000f324:	80c3      	strh	r3, [r0, #6]
1000f326:	4b11      	ldr	r3, [pc, #68]	; (1000f36c <rand+0x6c>)
1000f328:	8103      	strh	r3, [r0, #8]
1000f32a:	2305      	movs	r3, #5
1000f32c:	8143      	strh	r3, [r0, #10]
1000f32e:	3306      	adds	r3, #6
1000f330:	8183      	strh	r3, [r0, #12]
1000f332:	2300      	movs	r3, #0
1000f334:	6102      	str	r2, [r0, #16]
1000f336:	6143      	str	r3, [r0, #20]
1000f338:	6ba4      	ldr	r4, [r4, #56]	; 0x38
1000f33a:	4a0d      	ldr	r2, [pc, #52]	; (1000f370 <rand+0x70>)
1000f33c:	6920      	ldr	r0, [r4, #16]
1000f33e:	6961      	ldr	r1, [r4, #20]
1000f340:	4b0c      	ldr	r3, [pc, #48]	; (1000f374 <rand+0x74>)
1000f342:	f001 f819 	bl	10010378 <__aeabi_lmul>
1000f346:	2201      	movs	r2, #1
1000f348:	2300      	movs	r3, #0
1000f34a:	1880      	adds	r0, r0, r2
1000f34c:	4159      	adcs	r1, r3
1000f34e:	6120      	str	r0, [r4, #16]
1000f350:	6161      	str	r1, [r4, #20]
1000f352:	0048      	lsls	r0, r1, #1
1000f354:	0840      	lsrs	r0, r0, #1
1000f356:	bd10      	pop	{r4, pc}
1000f358:	10010fdc 	.word	0x10010fdc
1000f35c:	0000330e 	.word	0x0000330e
1000f360:	ffffabcd 	.word	0xffffabcd
1000f364:	00001234 	.word	0x00001234
1000f368:	ffffe66d 	.word	0xffffe66d
1000f36c:	ffffdeec 	.word	0xffffdeec
1000f370:	4c957f2d 	.word	0x4c957f2d
1000f374:	5851f42d 	.word	0x5851f42d

1000f378 <setbuf>:
1000f378:	424a      	negs	r2, r1
1000f37a:	414a      	adcs	r2, r1
1000f37c:	2380      	movs	r3, #128	; 0x80
1000f37e:	b510      	push	{r4, lr}
1000f380:	0052      	lsls	r2, r2, #1
1000f382:	00db      	lsls	r3, r3, #3
1000f384:	f000 f802 	bl	1000f38c <setvbuf>
1000f388:	bd10      	pop	{r4, pc}
	...

1000f38c <setvbuf>:
1000f38c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f38e:	001d      	movs	r5, r3
1000f390:	4b51      	ldr	r3, [pc, #324]	; (1000f4d8 <setvbuf+0x14c>)
1000f392:	b085      	sub	sp, #20
1000f394:	681e      	ldr	r6, [r3, #0]
1000f396:	0004      	movs	r4, r0
1000f398:	000f      	movs	r7, r1
1000f39a:	9200      	str	r2, [sp, #0]
1000f39c:	2e00      	cmp	r6, #0
1000f39e:	d005      	beq.n	1000f3ac <setvbuf+0x20>
1000f3a0:	69b3      	ldr	r3, [r6, #24]
1000f3a2:	2b00      	cmp	r3, #0
1000f3a4:	d102      	bne.n	1000f3ac <setvbuf+0x20>
1000f3a6:	0030      	movs	r0, r6
1000f3a8:	f000 fa62 	bl	1000f870 <__sinit>
1000f3ac:	4b4b      	ldr	r3, [pc, #300]	; (1000f4dc <setvbuf+0x150>)
1000f3ae:	429c      	cmp	r4, r3
1000f3b0:	d101      	bne.n	1000f3b6 <setvbuf+0x2a>
1000f3b2:	6874      	ldr	r4, [r6, #4]
1000f3b4:	e008      	b.n	1000f3c8 <setvbuf+0x3c>
1000f3b6:	4b4a      	ldr	r3, [pc, #296]	; (1000f4e0 <setvbuf+0x154>)
1000f3b8:	429c      	cmp	r4, r3
1000f3ba:	d101      	bne.n	1000f3c0 <setvbuf+0x34>
1000f3bc:	68b4      	ldr	r4, [r6, #8]
1000f3be:	e003      	b.n	1000f3c8 <setvbuf+0x3c>
1000f3c0:	4b48      	ldr	r3, [pc, #288]	; (1000f4e4 <setvbuf+0x158>)
1000f3c2:	429c      	cmp	r4, r3
1000f3c4:	d100      	bne.n	1000f3c8 <setvbuf+0x3c>
1000f3c6:	68f4      	ldr	r4, [r6, #12]
1000f3c8:	9b00      	ldr	r3, [sp, #0]
1000f3ca:	2b02      	cmp	r3, #2
1000f3cc:	d005      	beq.n	1000f3da <setvbuf+0x4e>
1000f3ce:	2b01      	cmp	r3, #1
1000f3d0:	d900      	bls.n	1000f3d4 <setvbuf+0x48>
1000f3d2:	e07c      	b.n	1000f4ce <setvbuf+0x142>
1000f3d4:	2d00      	cmp	r5, #0
1000f3d6:	da00      	bge.n	1000f3da <setvbuf+0x4e>
1000f3d8:	e079      	b.n	1000f4ce <setvbuf+0x142>
1000f3da:	0021      	movs	r1, r4
1000f3dc:	0030      	movs	r0, r6
1000f3de:	f000 f9d9 	bl	1000f794 <_fflush_r>
1000f3e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000f3e4:	2900      	cmp	r1, #0
1000f3e6:	d008      	beq.n	1000f3fa <setvbuf+0x6e>
1000f3e8:	0023      	movs	r3, r4
1000f3ea:	3344      	adds	r3, #68	; 0x44
1000f3ec:	4299      	cmp	r1, r3
1000f3ee:	d002      	beq.n	1000f3f6 <setvbuf+0x6a>
1000f3f0:	0030      	movs	r0, r6
1000f3f2:	f000 fb3f 	bl	1000fa74 <_free_r>
1000f3f6:	2300      	movs	r3, #0
1000f3f8:	6363      	str	r3, [r4, #52]	; 0x34
1000f3fa:	2300      	movs	r3, #0
1000f3fc:	61a3      	str	r3, [r4, #24]
1000f3fe:	6063      	str	r3, [r4, #4]
1000f400:	89a3      	ldrh	r3, [r4, #12]
1000f402:	061b      	lsls	r3, r3, #24
1000f404:	d503      	bpl.n	1000f40e <setvbuf+0x82>
1000f406:	6921      	ldr	r1, [r4, #16]
1000f408:	0030      	movs	r0, r6
1000f40a:	f000 fb33 	bl	1000fa74 <_free_r>
1000f40e:	89a2      	ldrh	r2, [r4, #12]
1000f410:	4b35      	ldr	r3, [pc, #212]	; (1000f4e8 <setvbuf+0x15c>)
1000f412:	4013      	ands	r3, r2
1000f414:	81a3      	strh	r3, [r4, #12]
1000f416:	9b00      	ldr	r3, [sp, #0]
1000f418:	2b02      	cmp	r3, #2
1000f41a:	d021      	beq.n	1000f460 <setvbuf+0xd4>
1000f41c:	ab03      	add	r3, sp, #12
1000f41e:	aa02      	add	r2, sp, #8
1000f420:	0021      	movs	r1, r4
1000f422:	0030      	movs	r0, r6
1000f424:	f000 fab8 	bl	1000f998 <__swhatbuf_r>
1000f428:	89a3      	ldrh	r3, [r4, #12]
1000f42a:	4318      	orrs	r0, r3
1000f42c:	81a0      	strh	r0, [r4, #12]
1000f42e:	2d00      	cmp	r5, #0
1000f430:	d101      	bne.n	1000f436 <setvbuf+0xaa>
1000f432:	9d02      	ldr	r5, [sp, #8]
1000f434:	e001      	b.n	1000f43a <setvbuf+0xae>
1000f436:	2f00      	cmp	r7, #0
1000f438:	d125      	bne.n	1000f486 <setvbuf+0xfa>
1000f43a:	0028      	movs	r0, r5
1000f43c:	f000 fb10 	bl	1000fa60 <malloc>
1000f440:	9501      	str	r5, [sp, #4]
1000f442:	1e07      	subs	r7, r0, #0
1000f444:	d11a      	bne.n	1000f47c <setvbuf+0xf0>
1000f446:	9b02      	ldr	r3, [sp, #8]
1000f448:	9301      	str	r3, [sp, #4]
1000f44a:	42ab      	cmp	r3, r5
1000f44c:	d102      	bne.n	1000f454 <setvbuf+0xc8>
1000f44e:	2001      	movs	r0, #1
1000f450:	4240      	negs	r0, r0
1000f452:	e006      	b.n	1000f462 <setvbuf+0xd6>
1000f454:	9801      	ldr	r0, [sp, #4]
1000f456:	f000 fb03 	bl	1000fa60 <malloc>
1000f45a:	1e07      	subs	r7, r0, #0
1000f45c:	d10e      	bne.n	1000f47c <setvbuf+0xf0>
1000f45e:	e7f6      	b.n	1000f44e <setvbuf+0xc2>
1000f460:	2000      	movs	r0, #0
1000f462:	2202      	movs	r2, #2
1000f464:	89a3      	ldrh	r3, [r4, #12]
1000f466:	4313      	orrs	r3, r2
1000f468:	81a3      	strh	r3, [r4, #12]
1000f46a:	2300      	movs	r3, #0
1000f46c:	60a3      	str	r3, [r4, #8]
1000f46e:	0023      	movs	r3, r4
1000f470:	3347      	adds	r3, #71	; 0x47
1000f472:	6023      	str	r3, [r4, #0]
1000f474:	6123      	str	r3, [r4, #16]
1000f476:	2301      	movs	r3, #1
1000f478:	6163      	str	r3, [r4, #20]
1000f47a:	e02a      	b.n	1000f4d2 <setvbuf+0x146>
1000f47c:	2280      	movs	r2, #128	; 0x80
1000f47e:	89a3      	ldrh	r3, [r4, #12]
1000f480:	9d01      	ldr	r5, [sp, #4]
1000f482:	4313      	orrs	r3, r2
1000f484:	81a3      	strh	r3, [r4, #12]
1000f486:	69b3      	ldr	r3, [r6, #24]
1000f488:	2b00      	cmp	r3, #0
1000f48a:	d102      	bne.n	1000f492 <setvbuf+0x106>
1000f48c:	0030      	movs	r0, r6
1000f48e:	f000 f9ef 	bl	1000f870 <__sinit>
1000f492:	9b00      	ldr	r3, [sp, #0]
1000f494:	2b01      	cmp	r3, #1
1000f496:	d103      	bne.n	1000f4a0 <setvbuf+0x114>
1000f498:	89a3      	ldrh	r3, [r4, #12]
1000f49a:	9a00      	ldr	r2, [sp, #0]
1000f49c:	431a      	orrs	r2, r3
1000f49e:	81a2      	strh	r2, [r4, #12]
1000f4a0:	2308      	movs	r3, #8
1000f4a2:	89a2      	ldrh	r2, [r4, #12]
1000f4a4:	6027      	str	r7, [r4, #0]
1000f4a6:	4013      	ands	r3, r2
1000f4a8:	6127      	str	r7, [r4, #16]
1000f4aa:	6165      	str	r5, [r4, #20]
1000f4ac:	1e18      	subs	r0, r3, #0
1000f4ae:	d00c      	beq.n	1000f4ca <setvbuf+0x13e>
1000f4b0:	2301      	movs	r3, #1
1000f4b2:	401a      	ands	r2, r3
1000f4b4:	2300      	movs	r3, #0
1000f4b6:	1e10      	subs	r0, r2, #0
1000f4b8:	4298      	cmp	r0, r3
1000f4ba:	d004      	beq.n	1000f4c6 <setvbuf+0x13a>
1000f4bc:	426d      	negs	r5, r5
1000f4be:	60a3      	str	r3, [r4, #8]
1000f4c0:	61a5      	str	r5, [r4, #24]
1000f4c2:	0018      	movs	r0, r3
1000f4c4:	e005      	b.n	1000f4d2 <setvbuf+0x146>
1000f4c6:	60a5      	str	r5, [r4, #8]
1000f4c8:	e003      	b.n	1000f4d2 <setvbuf+0x146>
1000f4ca:	60a3      	str	r3, [r4, #8]
1000f4cc:	e001      	b.n	1000f4d2 <setvbuf+0x146>
1000f4ce:	2001      	movs	r0, #1
1000f4d0:	4240      	negs	r0, r0
1000f4d2:	b005      	add	sp, #20
1000f4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f4d6:	46c0      	nop			; (mov r8, r8)
1000f4d8:	10010fdc 	.word	0x10010fdc
1000f4dc:	10010ec0 	.word	0x10010ec0
1000f4e0:	10010ee0 	.word	0x10010ee0
1000f4e4:	10010f00 	.word	0x10010f00
1000f4e8:	fffff35c 	.word	0xfffff35c

1000f4ec <__swbuf_r>:
1000f4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f4ee:	0005      	movs	r5, r0
1000f4f0:	000f      	movs	r7, r1
1000f4f2:	0014      	movs	r4, r2
1000f4f4:	2800      	cmp	r0, #0
1000f4f6:	d004      	beq.n	1000f502 <__swbuf_r+0x16>
1000f4f8:	6983      	ldr	r3, [r0, #24]
1000f4fa:	2b00      	cmp	r3, #0
1000f4fc:	d101      	bne.n	1000f502 <__swbuf_r+0x16>
1000f4fe:	f000 f9b7 	bl	1000f870 <__sinit>
1000f502:	4b23      	ldr	r3, [pc, #140]	; (1000f590 <__swbuf_r+0xa4>)
1000f504:	429c      	cmp	r4, r3
1000f506:	d101      	bne.n	1000f50c <__swbuf_r+0x20>
1000f508:	686c      	ldr	r4, [r5, #4]
1000f50a:	e008      	b.n	1000f51e <__swbuf_r+0x32>
1000f50c:	4b21      	ldr	r3, [pc, #132]	; (1000f594 <__swbuf_r+0xa8>)
1000f50e:	429c      	cmp	r4, r3
1000f510:	d101      	bne.n	1000f516 <__swbuf_r+0x2a>
1000f512:	68ac      	ldr	r4, [r5, #8]
1000f514:	e003      	b.n	1000f51e <__swbuf_r+0x32>
1000f516:	4b20      	ldr	r3, [pc, #128]	; (1000f598 <__swbuf_r+0xac>)
1000f518:	429c      	cmp	r4, r3
1000f51a:	d100      	bne.n	1000f51e <__swbuf_r+0x32>
1000f51c:	68ec      	ldr	r4, [r5, #12]
1000f51e:	69a3      	ldr	r3, [r4, #24]
1000f520:	60a3      	str	r3, [r4, #8]
1000f522:	89a3      	ldrh	r3, [r4, #12]
1000f524:	071b      	lsls	r3, r3, #28
1000f526:	d50a      	bpl.n	1000f53e <__swbuf_r+0x52>
1000f528:	6923      	ldr	r3, [r4, #16]
1000f52a:	2b00      	cmp	r3, #0
1000f52c:	d007      	beq.n	1000f53e <__swbuf_r+0x52>
1000f52e:	6823      	ldr	r3, [r4, #0]
1000f530:	6922      	ldr	r2, [r4, #16]
1000f532:	b2fe      	uxtb	r6, r7
1000f534:	1a98      	subs	r0, r3, r2
1000f536:	6963      	ldr	r3, [r4, #20]
1000f538:	4298      	cmp	r0, r3
1000f53a:	db0f      	blt.n	1000f55c <__swbuf_r+0x70>
1000f53c:	e008      	b.n	1000f550 <__swbuf_r+0x64>
1000f53e:	0021      	movs	r1, r4
1000f540:	0028      	movs	r0, r5
1000f542:	f000 f82b 	bl	1000f59c <__swsetup_r>
1000f546:	2800      	cmp	r0, #0
1000f548:	d0f1      	beq.n	1000f52e <__swbuf_r+0x42>
1000f54a:	2001      	movs	r0, #1
1000f54c:	4240      	negs	r0, r0
1000f54e:	e01d      	b.n	1000f58c <__swbuf_r+0xa0>
1000f550:	0021      	movs	r1, r4
1000f552:	0028      	movs	r0, r5
1000f554:	f000 f91e 	bl	1000f794 <_fflush_r>
1000f558:	2800      	cmp	r0, #0
1000f55a:	d1f6      	bne.n	1000f54a <__swbuf_r+0x5e>
1000f55c:	68a3      	ldr	r3, [r4, #8]
1000f55e:	3001      	adds	r0, #1
1000f560:	3b01      	subs	r3, #1
1000f562:	60a3      	str	r3, [r4, #8]
1000f564:	6823      	ldr	r3, [r4, #0]
1000f566:	1c5a      	adds	r2, r3, #1
1000f568:	6022      	str	r2, [r4, #0]
1000f56a:	701f      	strb	r7, [r3, #0]
1000f56c:	6963      	ldr	r3, [r4, #20]
1000f56e:	4298      	cmp	r0, r3
1000f570:	d005      	beq.n	1000f57e <__swbuf_r+0x92>
1000f572:	89a3      	ldrh	r3, [r4, #12]
1000f574:	0030      	movs	r0, r6
1000f576:	07db      	lsls	r3, r3, #31
1000f578:	d508      	bpl.n	1000f58c <__swbuf_r+0xa0>
1000f57a:	2e0a      	cmp	r6, #10
1000f57c:	d106      	bne.n	1000f58c <__swbuf_r+0xa0>
1000f57e:	0021      	movs	r1, r4
1000f580:	0028      	movs	r0, r5
1000f582:	f000 f907 	bl	1000f794 <_fflush_r>
1000f586:	2800      	cmp	r0, #0
1000f588:	d1df      	bne.n	1000f54a <__swbuf_r+0x5e>
1000f58a:	0030      	movs	r0, r6
1000f58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f58e:	46c0      	nop			; (mov r8, r8)
1000f590:	10010ec0 	.word	0x10010ec0
1000f594:	10010ee0 	.word	0x10010ee0
1000f598:	10010f00 	.word	0x10010f00

1000f59c <__swsetup_r>:
1000f59c:	4b36      	ldr	r3, [pc, #216]	; (1000f678 <__swsetup_r+0xdc>)
1000f59e:	b570      	push	{r4, r5, r6, lr}
1000f5a0:	681d      	ldr	r5, [r3, #0]
1000f5a2:	0006      	movs	r6, r0
1000f5a4:	000c      	movs	r4, r1
1000f5a6:	2d00      	cmp	r5, #0
1000f5a8:	d005      	beq.n	1000f5b6 <__swsetup_r+0x1a>
1000f5aa:	69ab      	ldr	r3, [r5, #24]
1000f5ac:	2b00      	cmp	r3, #0
1000f5ae:	d102      	bne.n	1000f5b6 <__swsetup_r+0x1a>
1000f5b0:	0028      	movs	r0, r5
1000f5b2:	f000 f95d 	bl	1000f870 <__sinit>
1000f5b6:	4b31      	ldr	r3, [pc, #196]	; (1000f67c <__swsetup_r+0xe0>)
1000f5b8:	429c      	cmp	r4, r3
1000f5ba:	d101      	bne.n	1000f5c0 <__swsetup_r+0x24>
1000f5bc:	686c      	ldr	r4, [r5, #4]
1000f5be:	e008      	b.n	1000f5d2 <__swsetup_r+0x36>
1000f5c0:	4b2f      	ldr	r3, [pc, #188]	; (1000f680 <__swsetup_r+0xe4>)
1000f5c2:	429c      	cmp	r4, r3
1000f5c4:	d101      	bne.n	1000f5ca <__swsetup_r+0x2e>
1000f5c6:	68ac      	ldr	r4, [r5, #8]
1000f5c8:	e003      	b.n	1000f5d2 <__swsetup_r+0x36>
1000f5ca:	4b2e      	ldr	r3, [pc, #184]	; (1000f684 <__swsetup_r+0xe8>)
1000f5cc:	429c      	cmp	r4, r3
1000f5ce:	d100      	bne.n	1000f5d2 <__swsetup_r+0x36>
1000f5d0:	68ec      	ldr	r4, [r5, #12]
1000f5d2:	220c      	movs	r2, #12
1000f5d4:	5ea3      	ldrsh	r3, [r4, r2]
1000f5d6:	b29a      	uxth	r2, r3
1000f5d8:	0711      	lsls	r1, r2, #28
1000f5da:	d423      	bmi.n	1000f624 <__swsetup_r+0x88>
1000f5dc:	06d1      	lsls	r1, r2, #27
1000f5de:	d407      	bmi.n	1000f5f0 <__swsetup_r+0x54>
1000f5e0:	2209      	movs	r2, #9
1000f5e2:	2001      	movs	r0, #1
1000f5e4:	6032      	str	r2, [r6, #0]
1000f5e6:	3237      	adds	r2, #55	; 0x37
1000f5e8:	4313      	orrs	r3, r2
1000f5ea:	81a3      	strh	r3, [r4, #12]
1000f5ec:	4240      	negs	r0, r0
1000f5ee:	e042      	b.n	1000f676 <__swsetup_r+0xda>
1000f5f0:	0753      	lsls	r3, r2, #29
1000f5f2:	d513      	bpl.n	1000f61c <__swsetup_r+0x80>
1000f5f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000f5f6:	2900      	cmp	r1, #0
1000f5f8:	d008      	beq.n	1000f60c <__swsetup_r+0x70>
1000f5fa:	0023      	movs	r3, r4
1000f5fc:	3344      	adds	r3, #68	; 0x44
1000f5fe:	4299      	cmp	r1, r3
1000f600:	d002      	beq.n	1000f608 <__swsetup_r+0x6c>
1000f602:	0030      	movs	r0, r6
1000f604:	f000 fa36 	bl	1000fa74 <_free_r>
1000f608:	2300      	movs	r3, #0
1000f60a:	6363      	str	r3, [r4, #52]	; 0x34
1000f60c:	2224      	movs	r2, #36	; 0x24
1000f60e:	89a3      	ldrh	r3, [r4, #12]
1000f610:	4393      	bics	r3, r2
1000f612:	81a3      	strh	r3, [r4, #12]
1000f614:	2300      	movs	r3, #0
1000f616:	6063      	str	r3, [r4, #4]
1000f618:	6923      	ldr	r3, [r4, #16]
1000f61a:	6023      	str	r3, [r4, #0]
1000f61c:	2208      	movs	r2, #8
1000f61e:	89a3      	ldrh	r3, [r4, #12]
1000f620:	4313      	orrs	r3, r2
1000f622:	81a3      	strh	r3, [r4, #12]
1000f624:	6923      	ldr	r3, [r4, #16]
1000f626:	2b00      	cmp	r3, #0
1000f628:	d10b      	bne.n	1000f642 <__swsetup_r+0xa6>
1000f62a:	23a0      	movs	r3, #160	; 0xa0
1000f62c:	89a2      	ldrh	r2, [r4, #12]
1000f62e:	009b      	lsls	r3, r3, #2
1000f630:	4013      	ands	r3, r2
1000f632:	2280      	movs	r2, #128	; 0x80
1000f634:	0092      	lsls	r2, r2, #2
1000f636:	4293      	cmp	r3, r2
1000f638:	d003      	beq.n	1000f642 <__swsetup_r+0xa6>
1000f63a:	0021      	movs	r1, r4
1000f63c:	0030      	movs	r0, r6
1000f63e:	f000 f9d1 	bl	1000f9e4 <__smakebuf_r>
1000f642:	2301      	movs	r3, #1
1000f644:	89a2      	ldrh	r2, [r4, #12]
1000f646:	4013      	ands	r3, r2
1000f648:	d005      	beq.n	1000f656 <__swsetup_r+0xba>
1000f64a:	2300      	movs	r3, #0
1000f64c:	60a3      	str	r3, [r4, #8]
1000f64e:	6963      	ldr	r3, [r4, #20]
1000f650:	425b      	negs	r3, r3
1000f652:	61a3      	str	r3, [r4, #24]
1000f654:	e003      	b.n	1000f65e <__swsetup_r+0xc2>
1000f656:	0792      	lsls	r2, r2, #30
1000f658:	d400      	bmi.n	1000f65c <__swsetup_r+0xc0>
1000f65a:	6963      	ldr	r3, [r4, #20]
1000f65c:	60a3      	str	r3, [r4, #8]
1000f65e:	2000      	movs	r0, #0
1000f660:	6923      	ldr	r3, [r4, #16]
1000f662:	4283      	cmp	r3, r0
1000f664:	d107      	bne.n	1000f676 <__swsetup_r+0xda>
1000f666:	220c      	movs	r2, #12
1000f668:	5ea3      	ldrsh	r3, [r4, r2]
1000f66a:	061a      	lsls	r2, r3, #24
1000f66c:	d503      	bpl.n	1000f676 <__swsetup_r+0xda>
1000f66e:	2240      	movs	r2, #64	; 0x40
1000f670:	4313      	orrs	r3, r2
1000f672:	81a3      	strh	r3, [r4, #12]
1000f674:	3801      	subs	r0, #1
1000f676:	bd70      	pop	{r4, r5, r6, pc}
1000f678:	10010fdc 	.word	0x10010fdc
1000f67c:	10010ec0 	.word	0x10010ec0
1000f680:	10010ee0 	.word	0x10010ee0
1000f684:	10010f00 	.word	0x10010f00

1000f688 <__sflush_r>:
1000f688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f68a:	898a      	ldrh	r2, [r1, #12]
1000f68c:	0005      	movs	r5, r0
1000f68e:	000c      	movs	r4, r1
1000f690:	0713      	lsls	r3, r2, #28
1000f692:	d45a      	bmi.n	1000f74a <__sflush_r+0xc2>
1000f694:	684b      	ldr	r3, [r1, #4]
1000f696:	2b00      	cmp	r3, #0
1000f698:	dc02      	bgt.n	1000f6a0 <__sflush_r+0x18>
1000f69a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1000f69c:	2b00      	cmp	r3, #0
1000f69e:	dd19      	ble.n	1000f6d4 <__sflush_r+0x4c>
1000f6a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1000f6a2:	2f00      	cmp	r7, #0
1000f6a4:	d016      	beq.n	1000f6d4 <__sflush_r+0x4c>
1000f6a6:	2300      	movs	r3, #0
1000f6a8:	682e      	ldr	r6, [r5, #0]
1000f6aa:	602b      	str	r3, [r5, #0]
1000f6ac:	2380      	movs	r3, #128	; 0x80
1000f6ae:	015b      	lsls	r3, r3, #5
1000f6b0:	401a      	ands	r2, r3
1000f6b2:	d001      	beq.n	1000f6b8 <__sflush_r+0x30>
1000f6b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
1000f6b6:	e014      	b.n	1000f6e2 <__sflush_r+0x5a>
1000f6b8:	2301      	movs	r3, #1
1000f6ba:	6a21      	ldr	r1, [r4, #32]
1000f6bc:	0028      	movs	r0, r5
1000f6be:	47b8      	blx	r7
1000f6c0:	1c43      	adds	r3, r0, #1
1000f6c2:	d10e      	bne.n	1000f6e2 <__sflush_r+0x5a>
1000f6c4:	682b      	ldr	r3, [r5, #0]
1000f6c6:	2b00      	cmp	r3, #0
1000f6c8:	d00b      	beq.n	1000f6e2 <__sflush_r+0x5a>
1000f6ca:	2b1d      	cmp	r3, #29
1000f6cc:	d001      	beq.n	1000f6d2 <__sflush_r+0x4a>
1000f6ce:	2b16      	cmp	r3, #22
1000f6d0:	d102      	bne.n	1000f6d8 <__sflush_r+0x50>
1000f6d2:	602e      	str	r6, [r5, #0]
1000f6d4:	2000      	movs	r0, #0
1000f6d6:	e05a      	b.n	1000f78e <__sflush_r+0x106>
1000f6d8:	2240      	movs	r2, #64	; 0x40
1000f6da:	89a3      	ldrh	r3, [r4, #12]
1000f6dc:	4313      	orrs	r3, r2
1000f6de:	81a3      	strh	r3, [r4, #12]
1000f6e0:	e055      	b.n	1000f78e <__sflush_r+0x106>
1000f6e2:	89a3      	ldrh	r3, [r4, #12]
1000f6e4:	075b      	lsls	r3, r3, #29
1000f6e6:	d506      	bpl.n	1000f6f6 <__sflush_r+0x6e>
1000f6e8:	6863      	ldr	r3, [r4, #4]
1000f6ea:	1ac0      	subs	r0, r0, r3
1000f6ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
1000f6ee:	2b00      	cmp	r3, #0
1000f6f0:	d001      	beq.n	1000f6f6 <__sflush_r+0x6e>
1000f6f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
1000f6f4:	1ac0      	subs	r0, r0, r3
1000f6f6:	2300      	movs	r3, #0
1000f6f8:	0002      	movs	r2, r0
1000f6fa:	6a21      	ldr	r1, [r4, #32]
1000f6fc:	0028      	movs	r0, r5
1000f6fe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1000f700:	47b8      	blx	r7
1000f702:	89a3      	ldrh	r3, [r4, #12]
1000f704:	1c42      	adds	r2, r0, #1
1000f706:	d106      	bne.n	1000f716 <__sflush_r+0x8e>
1000f708:	6829      	ldr	r1, [r5, #0]
1000f70a:	291d      	cmp	r1, #29
1000f70c:	d83a      	bhi.n	1000f784 <__sflush_r+0xfc>
1000f70e:	4a20      	ldr	r2, [pc, #128]	; (1000f790 <__sflush_r+0x108>)
1000f710:	40ca      	lsrs	r2, r1
1000f712:	07d2      	lsls	r2, r2, #31
1000f714:	d536      	bpl.n	1000f784 <__sflush_r+0xfc>
1000f716:	2200      	movs	r2, #0
1000f718:	6062      	str	r2, [r4, #4]
1000f71a:	6922      	ldr	r2, [r4, #16]
1000f71c:	6022      	str	r2, [r4, #0]
1000f71e:	04db      	lsls	r3, r3, #19
1000f720:	d505      	bpl.n	1000f72e <__sflush_r+0xa6>
1000f722:	1c43      	adds	r3, r0, #1
1000f724:	d102      	bne.n	1000f72c <__sflush_r+0xa4>
1000f726:	682b      	ldr	r3, [r5, #0]
1000f728:	2b00      	cmp	r3, #0
1000f72a:	d100      	bne.n	1000f72e <__sflush_r+0xa6>
1000f72c:	6560      	str	r0, [r4, #84]	; 0x54
1000f72e:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000f730:	602e      	str	r6, [r5, #0]
1000f732:	2900      	cmp	r1, #0
1000f734:	d0ce      	beq.n	1000f6d4 <__sflush_r+0x4c>
1000f736:	0023      	movs	r3, r4
1000f738:	3344      	adds	r3, #68	; 0x44
1000f73a:	4299      	cmp	r1, r3
1000f73c:	d002      	beq.n	1000f744 <__sflush_r+0xbc>
1000f73e:	0028      	movs	r0, r5
1000f740:	f000 f998 	bl	1000fa74 <_free_r>
1000f744:	2000      	movs	r0, #0
1000f746:	6360      	str	r0, [r4, #52]	; 0x34
1000f748:	e021      	b.n	1000f78e <__sflush_r+0x106>
1000f74a:	690f      	ldr	r7, [r1, #16]
1000f74c:	2f00      	cmp	r7, #0
1000f74e:	d0c1      	beq.n	1000f6d4 <__sflush_r+0x4c>
1000f750:	680b      	ldr	r3, [r1, #0]
1000f752:	600f      	str	r7, [r1, #0]
1000f754:	1bdb      	subs	r3, r3, r7
1000f756:	9301      	str	r3, [sp, #4]
1000f758:	2300      	movs	r3, #0
1000f75a:	0792      	lsls	r2, r2, #30
1000f75c:	d100      	bne.n	1000f760 <__sflush_r+0xd8>
1000f75e:	694b      	ldr	r3, [r1, #20]
1000f760:	60a3      	str	r3, [r4, #8]
1000f762:	e003      	b.n	1000f76c <__sflush_r+0xe4>
1000f764:	9b01      	ldr	r3, [sp, #4]
1000f766:	183f      	adds	r7, r7, r0
1000f768:	1a1b      	subs	r3, r3, r0
1000f76a:	9301      	str	r3, [sp, #4]
1000f76c:	9b01      	ldr	r3, [sp, #4]
1000f76e:	2b00      	cmp	r3, #0
1000f770:	ddb0      	ble.n	1000f6d4 <__sflush_r+0x4c>
1000f772:	9b01      	ldr	r3, [sp, #4]
1000f774:	003a      	movs	r2, r7
1000f776:	6a21      	ldr	r1, [r4, #32]
1000f778:	0028      	movs	r0, r5
1000f77a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1000f77c:	47b0      	blx	r6
1000f77e:	2800      	cmp	r0, #0
1000f780:	dcf0      	bgt.n	1000f764 <__sflush_r+0xdc>
1000f782:	89a3      	ldrh	r3, [r4, #12]
1000f784:	2240      	movs	r2, #64	; 0x40
1000f786:	2001      	movs	r0, #1
1000f788:	4313      	orrs	r3, r2
1000f78a:	81a3      	strh	r3, [r4, #12]
1000f78c:	4240      	negs	r0, r0
1000f78e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f790:	20400001 	.word	0x20400001

1000f794 <_fflush_r>:
1000f794:	690b      	ldr	r3, [r1, #16]
1000f796:	b570      	push	{r4, r5, r6, lr}
1000f798:	0005      	movs	r5, r0
1000f79a:	000c      	movs	r4, r1
1000f79c:	2b00      	cmp	r3, #0
1000f79e:	d101      	bne.n	1000f7a4 <_fflush_r+0x10>
1000f7a0:	2000      	movs	r0, #0
1000f7a2:	e01c      	b.n	1000f7de <_fflush_r+0x4a>
1000f7a4:	2800      	cmp	r0, #0
1000f7a6:	d004      	beq.n	1000f7b2 <_fflush_r+0x1e>
1000f7a8:	6983      	ldr	r3, [r0, #24]
1000f7aa:	2b00      	cmp	r3, #0
1000f7ac:	d101      	bne.n	1000f7b2 <_fflush_r+0x1e>
1000f7ae:	f000 f85f 	bl	1000f870 <__sinit>
1000f7b2:	4b0b      	ldr	r3, [pc, #44]	; (1000f7e0 <_fflush_r+0x4c>)
1000f7b4:	429c      	cmp	r4, r3
1000f7b6:	d101      	bne.n	1000f7bc <_fflush_r+0x28>
1000f7b8:	686c      	ldr	r4, [r5, #4]
1000f7ba:	e008      	b.n	1000f7ce <_fflush_r+0x3a>
1000f7bc:	4b09      	ldr	r3, [pc, #36]	; (1000f7e4 <_fflush_r+0x50>)
1000f7be:	429c      	cmp	r4, r3
1000f7c0:	d101      	bne.n	1000f7c6 <_fflush_r+0x32>
1000f7c2:	68ac      	ldr	r4, [r5, #8]
1000f7c4:	e003      	b.n	1000f7ce <_fflush_r+0x3a>
1000f7c6:	4b08      	ldr	r3, [pc, #32]	; (1000f7e8 <_fflush_r+0x54>)
1000f7c8:	429c      	cmp	r4, r3
1000f7ca:	d100      	bne.n	1000f7ce <_fflush_r+0x3a>
1000f7cc:	68ec      	ldr	r4, [r5, #12]
1000f7ce:	220c      	movs	r2, #12
1000f7d0:	5ea3      	ldrsh	r3, [r4, r2]
1000f7d2:	2b00      	cmp	r3, #0
1000f7d4:	d0e4      	beq.n	1000f7a0 <_fflush_r+0xc>
1000f7d6:	0021      	movs	r1, r4
1000f7d8:	0028      	movs	r0, r5
1000f7da:	f7ff ff55 	bl	1000f688 <__sflush_r>
1000f7de:	bd70      	pop	{r4, r5, r6, pc}
1000f7e0:	10010ec0 	.word	0x10010ec0
1000f7e4:	10010ee0 	.word	0x10010ee0
1000f7e8:	10010f00 	.word	0x10010f00

1000f7ec <_cleanup_r>:
1000f7ec:	b510      	push	{r4, lr}
1000f7ee:	4902      	ldr	r1, [pc, #8]	; (1000f7f8 <_cleanup_r+0xc>)
1000f7f0:	f000 f8b0 	bl	1000f954 <_fwalk_reent>
1000f7f4:	bd10      	pop	{r4, pc}
1000f7f6:	46c0      	nop			; (mov r8, r8)
1000f7f8:	1000f795 	.word	0x1000f795

1000f7fc <std.isra.0>:
1000f7fc:	2300      	movs	r3, #0
1000f7fe:	b510      	push	{r4, lr}
1000f800:	0004      	movs	r4, r0
1000f802:	6003      	str	r3, [r0, #0]
1000f804:	6043      	str	r3, [r0, #4]
1000f806:	6083      	str	r3, [r0, #8]
1000f808:	8181      	strh	r1, [r0, #12]
1000f80a:	6643      	str	r3, [r0, #100]	; 0x64
1000f80c:	81c2      	strh	r2, [r0, #14]
1000f80e:	6103      	str	r3, [r0, #16]
1000f810:	6143      	str	r3, [r0, #20]
1000f812:	6183      	str	r3, [r0, #24]
1000f814:	0019      	movs	r1, r3
1000f816:	2208      	movs	r2, #8
1000f818:	305c      	adds	r0, #92	; 0x5c
1000f81a:	f7ff fccf 	bl	1000f1bc <memset>
1000f81e:	4b05      	ldr	r3, [pc, #20]	; (1000f834 <std.isra.0+0x38>)
1000f820:	6224      	str	r4, [r4, #32]
1000f822:	6263      	str	r3, [r4, #36]	; 0x24
1000f824:	4b04      	ldr	r3, [pc, #16]	; (1000f838 <std.isra.0+0x3c>)
1000f826:	62a3      	str	r3, [r4, #40]	; 0x28
1000f828:	4b04      	ldr	r3, [pc, #16]	; (1000f83c <std.isra.0+0x40>)
1000f82a:	62e3      	str	r3, [r4, #44]	; 0x2c
1000f82c:	4b04      	ldr	r3, [pc, #16]	; (1000f840 <std.isra.0+0x44>)
1000f82e:	6323      	str	r3, [r4, #48]	; 0x30
1000f830:	bd10      	pop	{r4, pc}
1000f832:	46c0      	nop			; (mov r8, r8)
1000f834:	100101e5 	.word	0x100101e5
1000f838:	1001020d 	.word	0x1001020d
1000f83c:	10010245 	.word	0x10010245
1000f840:	10010271 	.word	0x10010271

1000f844 <__sfmoreglue>:
1000f844:	b570      	push	{r4, r5, r6, lr}
1000f846:	2568      	movs	r5, #104	; 0x68
1000f848:	1e4b      	subs	r3, r1, #1
1000f84a:	435d      	muls	r5, r3
1000f84c:	000e      	movs	r6, r1
1000f84e:	0029      	movs	r1, r5
1000f850:	3174      	adds	r1, #116	; 0x74
1000f852:	f000 f955 	bl	1000fb00 <_malloc_r>
1000f856:	1e04      	subs	r4, r0, #0
1000f858:	d008      	beq.n	1000f86c <__sfmoreglue+0x28>
1000f85a:	2100      	movs	r1, #0
1000f85c:	002a      	movs	r2, r5
1000f85e:	6001      	str	r1, [r0, #0]
1000f860:	6046      	str	r6, [r0, #4]
1000f862:	300c      	adds	r0, #12
1000f864:	60a0      	str	r0, [r4, #8]
1000f866:	3268      	adds	r2, #104	; 0x68
1000f868:	f7ff fca8 	bl	1000f1bc <memset>
1000f86c:	0020      	movs	r0, r4
1000f86e:	bd70      	pop	{r4, r5, r6, pc}

1000f870 <__sinit>:
1000f870:	6983      	ldr	r3, [r0, #24]
1000f872:	b513      	push	{r0, r1, r4, lr}
1000f874:	0004      	movs	r4, r0
1000f876:	2b00      	cmp	r3, #0
1000f878:	d128      	bne.n	1000f8cc <__sinit+0x5c>
1000f87a:	6483      	str	r3, [r0, #72]	; 0x48
1000f87c:	64c3      	str	r3, [r0, #76]	; 0x4c
1000f87e:	6503      	str	r3, [r0, #80]	; 0x50
1000f880:	4b13      	ldr	r3, [pc, #76]	; (1000f8d0 <__sinit+0x60>)
1000f882:	4a14      	ldr	r2, [pc, #80]	; (1000f8d4 <__sinit+0x64>)
1000f884:	681b      	ldr	r3, [r3, #0]
1000f886:	6282      	str	r2, [r0, #40]	; 0x28
1000f888:	9301      	str	r3, [sp, #4]
1000f88a:	4298      	cmp	r0, r3
1000f88c:	d101      	bne.n	1000f892 <__sinit+0x22>
1000f88e:	2301      	movs	r3, #1
1000f890:	6183      	str	r3, [r0, #24]
1000f892:	0020      	movs	r0, r4
1000f894:	f000 f820 	bl	1000f8d8 <__sfp>
1000f898:	6060      	str	r0, [r4, #4]
1000f89a:	0020      	movs	r0, r4
1000f89c:	f000 f81c 	bl	1000f8d8 <__sfp>
1000f8a0:	60a0      	str	r0, [r4, #8]
1000f8a2:	0020      	movs	r0, r4
1000f8a4:	f000 f818 	bl	1000f8d8 <__sfp>
1000f8a8:	2200      	movs	r2, #0
1000f8aa:	60e0      	str	r0, [r4, #12]
1000f8ac:	2104      	movs	r1, #4
1000f8ae:	6860      	ldr	r0, [r4, #4]
1000f8b0:	f7ff ffa4 	bl	1000f7fc <std.isra.0>
1000f8b4:	2201      	movs	r2, #1
1000f8b6:	2109      	movs	r1, #9
1000f8b8:	68a0      	ldr	r0, [r4, #8]
1000f8ba:	f7ff ff9f 	bl	1000f7fc <std.isra.0>
1000f8be:	2202      	movs	r2, #2
1000f8c0:	2112      	movs	r1, #18
1000f8c2:	68e0      	ldr	r0, [r4, #12]
1000f8c4:	f7ff ff9a 	bl	1000f7fc <std.isra.0>
1000f8c8:	2301      	movs	r3, #1
1000f8ca:	61a3      	str	r3, [r4, #24]
1000f8cc:	bd13      	pop	{r0, r1, r4, pc}
1000f8ce:	46c0      	nop			; (mov r8, r8)
1000f8d0:	10010ebc 	.word	0x10010ebc
1000f8d4:	1000f7ed 	.word	0x1000f7ed

1000f8d8 <__sfp>:
1000f8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f8da:	4b1d      	ldr	r3, [pc, #116]	; (1000f950 <__sfp+0x78>)
1000f8dc:	0006      	movs	r6, r0
1000f8de:	681d      	ldr	r5, [r3, #0]
1000f8e0:	69ab      	ldr	r3, [r5, #24]
1000f8e2:	2b00      	cmp	r3, #0
1000f8e4:	d102      	bne.n	1000f8ec <__sfp+0x14>
1000f8e6:	0028      	movs	r0, r5
1000f8e8:	f7ff ffc2 	bl	1000f870 <__sinit>
1000f8ec:	3548      	adds	r5, #72	; 0x48
1000f8ee:	68ac      	ldr	r4, [r5, #8]
1000f8f0:	686b      	ldr	r3, [r5, #4]
1000f8f2:	3b01      	subs	r3, #1
1000f8f4:	d405      	bmi.n	1000f902 <__sfp+0x2a>
1000f8f6:	220c      	movs	r2, #12
1000f8f8:	5ea7      	ldrsh	r7, [r4, r2]
1000f8fa:	2f00      	cmp	r7, #0
1000f8fc:	d010      	beq.n	1000f920 <__sfp+0x48>
1000f8fe:	3468      	adds	r4, #104	; 0x68
1000f900:	e7f7      	b.n	1000f8f2 <__sfp+0x1a>
1000f902:	682b      	ldr	r3, [r5, #0]
1000f904:	2b00      	cmp	r3, #0
1000f906:	d001      	beq.n	1000f90c <__sfp+0x34>
1000f908:	682d      	ldr	r5, [r5, #0]
1000f90a:	e7f0      	b.n	1000f8ee <__sfp+0x16>
1000f90c:	2104      	movs	r1, #4
1000f90e:	0030      	movs	r0, r6
1000f910:	f7ff ff98 	bl	1000f844 <__sfmoreglue>
1000f914:	6028      	str	r0, [r5, #0]
1000f916:	2800      	cmp	r0, #0
1000f918:	d1f6      	bne.n	1000f908 <__sfp+0x30>
1000f91a:	230c      	movs	r3, #12
1000f91c:	6033      	str	r3, [r6, #0]
1000f91e:	e016      	b.n	1000f94e <__sfp+0x76>
1000f920:	2301      	movs	r3, #1
1000f922:	0020      	movs	r0, r4
1000f924:	425b      	negs	r3, r3
1000f926:	81e3      	strh	r3, [r4, #14]
1000f928:	3302      	adds	r3, #2
1000f92a:	81a3      	strh	r3, [r4, #12]
1000f92c:	6667      	str	r7, [r4, #100]	; 0x64
1000f92e:	6027      	str	r7, [r4, #0]
1000f930:	60a7      	str	r7, [r4, #8]
1000f932:	6067      	str	r7, [r4, #4]
1000f934:	6127      	str	r7, [r4, #16]
1000f936:	6167      	str	r7, [r4, #20]
1000f938:	61a7      	str	r7, [r4, #24]
1000f93a:	305c      	adds	r0, #92	; 0x5c
1000f93c:	2208      	movs	r2, #8
1000f93e:	0039      	movs	r1, r7
1000f940:	f7ff fc3c 	bl	1000f1bc <memset>
1000f944:	0020      	movs	r0, r4
1000f946:	6367      	str	r7, [r4, #52]	; 0x34
1000f948:	63a7      	str	r7, [r4, #56]	; 0x38
1000f94a:	64a7      	str	r7, [r4, #72]	; 0x48
1000f94c:	64e7      	str	r7, [r4, #76]	; 0x4c
1000f94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f950:	10010ebc 	.word	0x10010ebc

1000f954 <_fwalk_reent>:
1000f954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f956:	0004      	movs	r4, r0
1000f958:	0007      	movs	r7, r0
1000f95a:	2600      	movs	r6, #0
1000f95c:	9101      	str	r1, [sp, #4]
1000f95e:	3448      	adds	r4, #72	; 0x48
1000f960:	2c00      	cmp	r4, #0
1000f962:	d016      	beq.n	1000f992 <_fwalk_reent+0x3e>
1000f964:	6863      	ldr	r3, [r4, #4]
1000f966:	68a5      	ldr	r5, [r4, #8]
1000f968:	9300      	str	r3, [sp, #0]
1000f96a:	9b00      	ldr	r3, [sp, #0]
1000f96c:	3b01      	subs	r3, #1
1000f96e:	9300      	str	r3, [sp, #0]
1000f970:	d40d      	bmi.n	1000f98e <_fwalk_reent+0x3a>
1000f972:	89ab      	ldrh	r3, [r5, #12]
1000f974:	2b01      	cmp	r3, #1
1000f976:	d908      	bls.n	1000f98a <_fwalk_reent+0x36>
1000f978:	220e      	movs	r2, #14
1000f97a:	5eab      	ldrsh	r3, [r5, r2]
1000f97c:	3301      	adds	r3, #1
1000f97e:	d004      	beq.n	1000f98a <_fwalk_reent+0x36>
1000f980:	0029      	movs	r1, r5
1000f982:	0038      	movs	r0, r7
1000f984:	9b01      	ldr	r3, [sp, #4]
1000f986:	4798      	blx	r3
1000f988:	4306      	orrs	r6, r0
1000f98a:	3568      	adds	r5, #104	; 0x68
1000f98c:	e7ed      	b.n	1000f96a <_fwalk_reent+0x16>
1000f98e:	6824      	ldr	r4, [r4, #0]
1000f990:	e7e6      	b.n	1000f960 <_fwalk_reent+0xc>
1000f992:	0030      	movs	r0, r6
1000f994:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

1000f998 <__swhatbuf_r>:
1000f998:	b570      	push	{r4, r5, r6, lr}
1000f99a:	000e      	movs	r6, r1
1000f99c:	001d      	movs	r5, r3
1000f99e:	230e      	movs	r3, #14
1000f9a0:	5ec9      	ldrsh	r1, [r1, r3]
1000f9a2:	b090      	sub	sp, #64	; 0x40
1000f9a4:	0014      	movs	r4, r2
1000f9a6:	2900      	cmp	r1, #0
1000f9a8:	da06      	bge.n	1000f9b8 <__swhatbuf_r+0x20>
1000f9aa:	2300      	movs	r3, #0
1000f9ac:	602b      	str	r3, [r5, #0]
1000f9ae:	89b3      	ldrh	r3, [r6, #12]
1000f9b0:	061b      	lsls	r3, r3, #24
1000f9b2:	d50f      	bpl.n	1000f9d4 <__swhatbuf_r+0x3c>
1000f9b4:	2340      	movs	r3, #64	; 0x40
1000f9b6:	e00f      	b.n	1000f9d8 <__swhatbuf_r+0x40>
1000f9b8:	aa01      	add	r2, sp, #4
1000f9ba:	f000 fc85 	bl	100102c8 <_fstat_r>
1000f9be:	2800      	cmp	r0, #0
1000f9c0:	dbf3      	blt.n	1000f9aa <__swhatbuf_r+0x12>
1000f9c2:	23f0      	movs	r3, #240	; 0xf0
1000f9c4:	9a02      	ldr	r2, [sp, #8]
1000f9c6:	021b      	lsls	r3, r3, #8
1000f9c8:	4013      	ands	r3, r2
1000f9ca:	4a05      	ldr	r2, [pc, #20]	; (1000f9e0 <__swhatbuf_r+0x48>)
1000f9cc:	189b      	adds	r3, r3, r2
1000f9ce:	425a      	negs	r2, r3
1000f9d0:	4153      	adcs	r3, r2
1000f9d2:	602b      	str	r3, [r5, #0]
1000f9d4:	2380      	movs	r3, #128	; 0x80
1000f9d6:	00db      	lsls	r3, r3, #3
1000f9d8:	2000      	movs	r0, #0
1000f9da:	6023      	str	r3, [r4, #0]
1000f9dc:	b010      	add	sp, #64	; 0x40
1000f9de:	bd70      	pop	{r4, r5, r6, pc}
1000f9e0:	ffffe000 	.word	0xffffe000

1000f9e4 <__smakebuf_r>:
1000f9e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f9e6:	2602      	movs	r6, #2
1000f9e8:	898b      	ldrh	r3, [r1, #12]
1000f9ea:	0005      	movs	r5, r0
1000f9ec:	000c      	movs	r4, r1
1000f9ee:	4233      	tst	r3, r6
1000f9f0:	d110      	bne.n	1000fa14 <__smakebuf_r+0x30>
1000f9f2:	ab01      	add	r3, sp, #4
1000f9f4:	466a      	mov	r2, sp
1000f9f6:	f7ff ffcf 	bl	1000f998 <__swhatbuf_r>
1000f9fa:	9900      	ldr	r1, [sp, #0]
1000f9fc:	0007      	movs	r7, r0
1000f9fe:	0028      	movs	r0, r5
1000fa00:	f000 f87e 	bl	1000fb00 <_malloc_r>
1000fa04:	2800      	cmp	r0, #0
1000fa06:	d10c      	bne.n	1000fa22 <__smakebuf_r+0x3e>
1000fa08:	220c      	movs	r2, #12
1000fa0a:	5ea3      	ldrsh	r3, [r4, r2]
1000fa0c:	059a      	lsls	r2, r3, #22
1000fa0e:	d423      	bmi.n	1000fa58 <__smakebuf_r+0x74>
1000fa10:	4333      	orrs	r3, r6
1000fa12:	81a3      	strh	r3, [r4, #12]
1000fa14:	0023      	movs	r3, r4
1000fa16:	3347      	adds	r3, #71	; 0x47
1000fa18:	6023      	str	r3, [r4, #0]
1000fa1a:	6123      	str	r3, [r4, #16]
1000fa1c:	2301      	movs	r3, #1
1000fa1e:	6163      	str	r3, [r4, #20]
1000fa20:	e01a      	b.n	1000fa58 <__smakebuf_r+0x74>
1000fa22:	2280      	movs	r2, #128	; 0x80
1000fa24:	4b0d      	ldr	r3, [pc, #52]	; (1000fa5c <__smakebuf_r+0x78>)
1000fa26:	62ab      	str	r3, [r5, #40]	; 0x28
1000fa28:	89a3      	ldrh	r3, [r4, #12]
1000fa2a:	6020      	str	r0, [r4, #0]
1000fa2c:	4313      	orrs	r3, r2
1000fa2e:	81a3      	strh	r3, [r4, #12]
1000fa30:	9b00      	ldr	r3, [sp, #0]
1000fa32:	6120      	str	r0, [r4, #16]
1000fa34:	6163      	str	r3, [r4, #20]
1000fa36:	9b01      	ldr	r3, [sp, #4]
1000fa38:	2b00      	cmp	r3, #0
1000fa3a:	d00a      	beq.n	1000fa52 <__smakebuf_r+0x6e>
1000fa3c:	230e      	movs	r3, #14
1000fa3e:	5ee1      	ldrsh	r1, [r4, r3]
1000fa40:	0028      	movs	r0, r5
1000fa42:	f000 fc53 	bl	100102ec <_isatty_r>
1000fa46:	2800      	cmp	r0, #0
1000fa48:	d003      	beq.n	1000fa52 <__smakebuf_r+0x6e>
1000fa4a:	2201      	movs	r2, #1
1000fa4c:	89a3      	ldrh	r3, [r4, #12]
1000fa4e:	4313      	orrs	r3, r2
1000fa50:	81a3      	strh	r3, [r4, #12]
1000fa52:	89a3      	ldrh	r3, [r4, #12]
1000fa54:	431f      	orrs	r7, r3
1000fa56:	81a7      	strh	r7, [r4, #12]
1000fa58:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000fa5a:	46c0      	nop			; (mov r8, r8)
1000fa5c:	1000f7ed 	.word	0x1000f7ed

1000fa60 <malloc>:
1000fa60:	b510      	push	{r4, lr}
1000fa62:	4b03      	ldr	r3, [pc, #12]	; (1000fa70 <malloc+0x10>)
1000fa64:	0001      	movs	r1, r0
1000fa66:	6818      	ldr	r0, [r3, #0]
1000fa68:	f000 f84a 	bl	1000fb00 <_malloc_r>
1000fa6c:	bd10      	pop	{r4, pc}
1000fa6e:	46c0      	nop			; (mov r8, r8)
1000fa70:	10010fdc 	.word	0x10010fdc

1000fa74 <_free_r>:
1000fa74:	b530      	push	{r4, r5, lr}
1000fa76:	2900      	cmp	r1, #0
1000fa78:	d03e      	beq.n	1000faf8 <_free_r+0x84>
1000fa7a:	3904      	subs	r1, #4
1000fa7c:	680b      	ldr	r3, [r1, #0]
1000fa7e:	2b00      	cmp	r3, #0
1000fa80:	da00      	bge.n	1000fa84 <_free_r+0x10>
1000fa82:	18c9      	adds	r1, r1, r3
1000fa84:	4a1d      	ldr	r2, [pc, #116]	; (1000fafc <_free_r+0x88>)
1000fa86:	6813      	ldr	r3, [r2, #0]
1000fa88:	0014      	movs	r4, r2
1000fa8a:	2b00      	cmp	r3, #0
1000fa8c:	d102      	bne.n	1000fa94 <_free_r+0x20>
1000fa8e:	604b      	str	r3, [r1, #4]
1000fa90:	6011      	str	r1, [r2, #0]
1000fa92:	e031      	b.n	1000faf8 <_free_r+0x84>
1000fa94:	428b      	cmp	r3, r1
1000fa96:	d90d      	bls.n	1000fab4 <_free_r+0x40>
1000fa98:	680a      	ldr	r2, [r1, #0]
1000fa9a:	1888      	adds	r0, r1, r2
1000fa9c:	4283      	cmp	r3, r0
1000fa9e:	d103      	bne.n	1000faa8 <_free_r+0x34>
1000faa0:	6818      	ldr	r0, [r3, #0]
1000faa2:	685b      	ldr	r3, [r3, #4]
1000faa4:	1882      	adds	r2, r0, r2
1000faa6:	600a      	str	r2, [r1, #0]
1000faa8:	604b      	str	r3, [r1, #4]
1000faaa:	6021      	str	r1, [r4, #0]
1000faac:	e024      	b.n	1000faf8 <_free_r+0x84>
1000faae:	428a      	cmp	r2, r1
1000fab0:	d803      	bhi.n	1000faba <_free_r+0x46>
1000fab2:	0013      	movs	r3, r2
1000fab4:	685a      	ldr	r2, [r3, #4]
1000fab6:	2a00      	cmp	r2, #0
1000fab8:	d1f9      	bne.n	1000faae <_free_r+0x3a>
1000faba:	681d      	ldr	r5, [r3, #0]
1000fabc:	195c      	adds	r4, r3, r5
1000fabe:	428c      	cmp	r4, r1
1000fac0:	d10b      	bne.n	1000fada <_free_r+0x66>
1000fac2:	6809      	ldr	r1, [r1, #0]
1000fac4:	1869      	adds	r1, r5, r1
1000fac6:	1858      	adds	r0, r3, r1
1000fac8:	6019      	str	r1, [r3, #0]
1000faca:	4282      	cmp	r2, r0
1000facc:	d114      	bne.n	1000faf8 <_free_r+0x84>
1000face:	6810      	ldr	r0, [r2, #0]
1000fad0:	6852      	ldr	r2, [r2, #4]
1000fad2:	1841      	adds	r1, r0, r1
1000fad4:	6019      	str	r1, [r3, #0]
1000fad6:	605a      	str	r2, [r3, #4]
1000fad8:	e00e      	b.n	1000faf8 <_free_r+0x84>
1000fada:	428c      	cmp	r4, r1
1000fadc:	d902      	bls.n	1000fae4 <_free_r+0x70>
1000fade:	230c      	movs	r3, #12
1000fae0:	6003      	str	r3, [r0, #0]
1000fae2:	e009      	b.n	1000faf8 <_free_r+0x84>
1000fae4:	6808      	ldr	r0, [r1, #0]
1000fae6:	180c      	adds	r4, r1, r0
1000fae8:	42a2      	cmp	r2, r4
1000faea:	d103      	bne.n	1000faf4 <_free_r+0x80>
1000faec:	6814      	ldr	r4, [r2, #0]
1000faee:	6852      	ldr	r2, [r2, #4]
1000faf0:	1820      	adds	r0, r4, r0
1000faf2:	6008      	str	r0, [r1, #0]
1000faf4:	604a      	str	r2, [r1, #4]
1000faf6:	6059      	str	r1, [r3, #4]
1000faf8:	bd30      	pop	{r4, r5, pc}
1000fafa:	46c0      	nop			; (mov r8, r8)
1000fafc:	10012aa0 	.word	0x10012aa0

1000fb00 <_malloc_r>:
1000fb00:	2303      	movs	r3, #3
1000fb02:	b570      	push	{r4, r5, r6, lr}
1000fb04:	1ccd      	adds	r5, r1, #3
1000fb06:	439d      	bics	r5, r3
1000fb08:	3508      	adds	r5, #8
1000fb0a:	0006      	movs	r6, r0
1000fb0c:	2d0c      	cmp	r5, #12
1000fb0e:	d201      	bcs.n	1000fb14 <_malloc_r+0x14>
1000fb10:	250c      	movs	r5, #12
1000fb12:	e005      	b.n	1000fb20 <_malloc_r+0x20>
1000fb14:	2d00      	cmp	r5, #0
1000fb16:	da03      	bge.n	1000fb20 <_malloc_r+0x20>
1000fb18:	230c      	movs	r3, #12
1000fb1a:	2000      	movs	r0, #0
1000fb1c:	6033      	str	r3, [r6, #0]
1000fb1e:	e040      	b.n	1000fba2 <_malloc_r+0xa2>
1000fb20:	42a9      	cmp	r1, r5
1000fb22:	d8f9      	bhi.n	1000fb18 <_malloc_r+0x18>
1000fb24:	4b1f      	ldr	r3, [pc, #124]	; (1000fba4 <_malloc_r+0xa4>)
1000fb26:	681c      	ldr	r4, [r3, #0]
1000fb28:	001a      	movs	r2, r3
1000fb2a:	0021      	movs	r1, r4
1000fb2c:	2900      	cmp	r1, #0
1000fb2e:	d013      	beq.n	1000fb58 <_malloc_r+0x58>
1000fb30:	680b      	ldr	r3, [r1, #0]
1000fb32:	1b5b      	subs	r3, r3, r5
1000fb34:	d40d      	bmi.n	1000fb52 <_malloc_r+0x52>
1000fb36:	2b0b      	cmp	r3, #11
1000fb38:	d902      	bls.n	1000fb40 <_malloc_r+0x40>
1000fb3a:	600b      	str	r3, [r1, #0]
1000fb3c:	18cc      	adds	r4, r1, r3
1000fb3e:	e01e      	b.n	1000fb7e <_malloc_r+0x7e>
1000fb40:	428c      	cmp	r4, r1
1000fb42:	d102      	bne.n	1000fb4a <_malloc_r+0x4a>
1000fb44:	6863      	ldr	r3, [r4, #4]
1000fb46:	6013      	str	r3, [r2, #0]
1000fb48:	e01a      	b.n	1000fb80 <_malloc_r+0x80>
1000fb4a:	684b      	ldr	r3, [r1, #4]
1000fb4c:	6063      	str	r3, [r4, #4]
1000fb4e:	000c      	movs	r4, r1
1000fb50:	e016      	b.n	1000fb80 <_malloc_r+0x80>
1000fb52:	000c      	movs	r4, r1
1000fb54:	6849      	ldr	r1, [r1, #4]
1000fb56:	e7e9      	b.n	1000fb2c <_malloc_r+0x2c>
1000fb58:	4c13      	ldr	r4, [pc, #76]	; (1000fba8 <_malloc_r+0xa8>)
1000fb5a:	6823      	ldr	r3, [r4, #0]
1000fb5c:	2b00      	cmp	r3, #0
1000fb5e:	d103      	bne.n	1000fb68 <_malloc_r+0x68>
1000fb60:	0030      	movs	r0, r6
1000fb62:	f000 fb2d 	bl	100101c0 <_sbrk_r>
1000fb66:	6020      	str	r0, [r4, #0]
1000fb68:	0029      	movs	r1, r5
1000fb6a:	0030      	movs	r0, r6
1000fb6c:	f000 fb28 	bl	100101c0 <_sbrk_r>
1000fb70:	1c43      	adds	r3, r0, #1
1000fb72:	d0d1      	beq.n	1000fb18 <_malloc_r+0x18>
1000fb74:	2303      	movs	r3, #3
1000fb76:	1cc4      	adds	r4, r0, #3
1000fb78:	439c      	bics	r4, r3
1000fb7a:	42a0      	cmp	r0, r4
1000fb7c:	d10a      	bne.n	1000fb94 <_malloc_r+0x94>
1000fb7e:	6025      	str	r5, [r4, #0]
1000fb80:	0020      	movs	r0, r4
1000fb82:	2207      	movs	r2, #7
1000fb84:	300b      	adds	r0, #11
1000fb86:	1d23      	adds	r3, r4, #4
1000fb88:	4390      	bics	r0, r2
1000fb8a:	1ac3      	subs	r3, r0, r3
1000fb8c:	d009      	beq.n	1000fba2 <_malloc_r+0xa2>
1000fb8e:	425a      	negs	r2, r3
1000fb90:	50e2      	str	r2, [r4, r3]
1000fb92:	e006      	b.n	1000fba2 <_malloc_r+0xa2>
1000fb94:	1a21      	subs	r1, r4, r0
1000fb96:	0030      	movs	r0, r6
1000fb98:	f000 fb12 	bl	100101c0 <_sbrk_r>
1000fb9c:	1c43      	adds	r3, r0, #1
1000fb9e:	d1ee      	bne.n	1000fb7e <_malloc_r+0x7e>
1000fba0:	e7ba      	b.n	1000fb18 <_malloc_r+0x18>
1000fba2:	bd70      	pop	{r4, r5, r6, pc}
1000fba4:	10012aa0 	.word	0x10012aa0
1000fba8:	10012a9c 	.word	0x10012a9c

1000fbac <__sfputc_r>:
1000fbac:	6893      	ldr	r3, [r2, #8]
1000fbae:	b510      	push	{r4, lr}
1000fbb0:	3b01      	subs	r3, #1
1000fbb2:	6093      	str	r3, [r2, #8]
1000fbb4:	2b00      	cmp	r3, #0
1000fbb6:	da05      	bge.n	1000fbc4 <__sfputc_r+0x18>
1000fbb8:	6994      	ldr	r4, [r2, #24]
1000fbba:	42a3      	cmp	r3, r4
1000fbbc:	db08      	blt.n	1000fbd0 <__sfputc_r+0x24>
1000fbbe:	b2cb      	uxtb	r3, r1
1000fbc0:	2b0a      	cmp	r3, #10
1000fbc2:	d005      	beq.n	1000fbd0 <__sfputc_r+0x24>
1000fbc4:	6813      	ldr	r3, [r2, #0]
1000fbc6:	1c58      	adds	r0, r3, #1
1000fbc8:	6010      	str	r0, [r2, #0]
1000fbca:	7019      	strb	r1, [r3, #0]
1000fbcc:	b2c8      	uxtb	r0, r1
1000fbce:	e001      	b.n	1000fbd4 <__sfputc_r+0x28>
1000fbd0:	f7ff fc8c 	bl	1000f4ec <__swbuf_r>
1000fbd4:	bd10      	pop	{r4, pc}

1000fbd6 <__sfputs_r>:
1000fbd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fbd8:	0006      	movs	r6, r0
1000fbda:	000f      	movs	r7, r1
1000fbdc:	0014      	movs	r4, r2
1000fbde:	18d5      	adds	r5, r2, r3
1000fbe0:	42ac      	cmp	r4, r5
1000fbe2:	d008      	beq.n	1000fbf6 <__sfputs_r+0x20>
1000fbe4:	7821      	ldrb	r1, [r4, #0]
1000fbe6:	003a      	movs	r2, r7
1000fbe8:	0030      	movs	r0, r6
1000fbea:	f7ff ffdf 	bl	1000fbac <__sfputc_r>
1000fbee:	3401      	adds	r4, #1
1000fbf0:	1c43      	adds	r3, r0, #1
1000fbf2:	d1f5      	bne.n	1000fbe0 <__sfputs_r+0xa>
1000fbf4:	e000      	b.n	1000fbf8 <__sfputs_r+0x22>
1000fbf6:	2000      	movs	r0, #0
1000fbf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1000fbfc <_vfiprintf_r>:
1000fbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fbfe:	b09f      	sub	sp, #124	; 0x7c
1000fc00:	0006      	movs	r6, r0
1000fc02:	000f      	movs	r7, r1
1000fc04:	9202      	str	r2, [sp, #8]
1000fc06:	9305      	str	r3, [sp, #20]
1000fc08:	2800      	cmp	r0, #0
1000fc0a:	d004      	beq.n	1000fc16 <_vfiprintf_r+0x1a>
1000fc0c:	6983      	ldr	r3, [r0, #24]
1000fc0e:	2b00      	cmp	r3, #0
1000fc10:	d101      	bne.n	1000fc16 <_vfiprintf_r+0x1a>
1000fc12:	f7ff fe2d 	bl	1000f870 <__sinit>
1000fc16:	4b7f      	ldr	r3, [pc, #508]	; (1000fe14 <_vfiprintf_r+0x218>)
1000fc18:	429f      	cmp	r7, r3
1000fc1a:	d101      	bne.n	1000fc20 <_vfiprintf_r+0x24>
1000fc1c:	6877      	ldr	r7, [r6, #4]
1000fc1e:	e008      	b.n	1000fc32 <_vfiprintf_r+0x36>
1000fc20:	4b7d      	ldr	r3, [pc, #500]	; (1000fe18 <_vfiprintf_r+0x21c>)
1000fc22:	429f      	cmp	r7, r3
1000fc24:	d101      	bne.n	1000fc2a <_vfiprintf_r+0x2e>
1000fc26:	68b7      	ldr	r7, [r6, #8]
1000fc28:	e003      	b.n	1000fc32 <_vfiprintf_r+0x36>
1000fc2a:	4b7c      	ldr	r3, [pc, #496]	; (1000fe1c <_vfiprintf_r+0x220>)
1000fc2c:	429f      	cmp	r7, r3
1000fc2e:	d100      	bne.n	1000fc32 <_vfiprintf_r+0x36>
1000fc30:	68f7      	ldr	r7, [r6, #12]
1000fc32:	89bb      	ldrh	r3, [r7, #12]
1000fc34:	071b      	lsls	r3, r3, #28
1000fc36:	d50a      	bpl.n	1000fc4e <_vfiprintf_r+0x52>
1000fc38:	693b      	ldr	r3, [r7, #16]
1000fc3a:	2b00      	cmp	r3, #0
1000fc3c:	d007      	beq.n	1000fc4e <_vfiprintf_r+0x52>
1000fc3e:	2300      	movs	r3, #0
1000fc40:	ad06      	add	r5, sp, #24
1000fc42:	616b      	str	r3, [r5, #20]
1000fc44:	3320      	adds	r3, #32
1000fc46:	766b      	strb	r3, [r5, #25]
1000fc48:	3310      	adds	r3, #16
1000fc4a:	76ab      	strb	r3, [r5, #26]
1000fc4c:	e03d      	b.n	1000fcca <_vfiprintf_r+0xce>
1000fc4e:	0039      	movs	r1, r7
1000fc50:	0030      	movs	r0, r6
1000fc52:	f7ff fca3 	bl	1000f59c <__swsetup_r>
1000fc56:	2800      	cmp	r0, #0
1000fc58:	d0f1      	beq.n	1000fc3e <_vfiprintf_r+0x42>
1000fc5a:	2001      	movs	r0, #1
1000fc5c:	4240      	negs	r0, r0
1000fc5e:	e0d6      	b.n	1000fe0e <_vfiprintf_r+0x212>
1000fc60:	9a05      	ldr	r2, [sp, #20]
1000fc62:	1d11      	adds	r1, r2, #4
1000fc64:	6812      	ldr	r2, [r2, #0]
1000fc66:	9105      	str	r1, [sp, #20]
1000fc68:	2a00      	cmp	r2, #0
1000fc6a:	da00      	bge.n	1000fc6e <_vfiprintf_r+0x72>
1000fc6c:	e07f      	b.n	1000fd6e <_vfiprintf_r+0x172>
1000fc6e:	9209      	str	r2, [sp, #36]	; 0x24
1000fc70:	3401      	adds	r4, #1
1000fc72:	7823      	ldrb	r3, [r4, #0]
1000fc74:	2b2e      	cmp	r3, #46	; 0x2e
1000fc76:	d100      	bne.n	1000fc7a <_vfiprintf_r+0x7e>
1000fc78:	e08d      	b.n	1000fd96 <_vfiprintf_r+0x19a>
1000fc7a:	7821      	ldrb	r1, [r4, #0]
1000fc7c:	2203      	movs	r2, #3
1000fc7e:	4868      	ldr	r0, [pc, #416]	; (1000fe20 <_vfiprintf_r+0x224>)
1000fc80:	f000 fb5a 	bl	10010338 <memchr>
1000fc84:	2800      	cmp	r0, #0
1000fc86:	d007      	beq.n	1000fc98 <_vfiprintf_r+0x9c>
1000fc88:	4b65      	ldr	r3, [pc, #404]	; (1000fe20 <_vfiprintf_r+0x224>)
1000fc8a:	682a      	ldr	r2, [r5, #0]
1000fc8c:	1ac0      	subs	r0, r0, r3
1000fc8e:	2340      	movs	r3, #64	; 0x40
1000fc90:	4083      	lsls	r3, r0
1000fc92:	4313      	orrs	r3, r2
1000fc94:	602b      	str	r3, [r5, #0]
1000fc96:	3401      	adds	r4, #1
1000fc98:	7821      	ldrb	r1, [r4, #0]
1000fc9a:	1c63      	adds	r3, r4, #1
1000fc9c:	2206      	movs	r2, #6
1000fc9e:	4861      	ldr	r0, [pc, #388]	; (1000fe24 <_vfiprintf_r+0x228>)
1000fca0:	9302      	str	r3, [sp, #8]
1000fca2:	7629      	strb	r1, [r5, #24]
1000fca4:	f000 fb48 	bl	10010338 <memchr>
1000fca8:	2800      	cmp	r0, #0
1000fcaa:	d100      	bne.n	1000fcae <_vfiprintf_r+0xb2>
1000fcac:	e09d      	b.n	1000fdea <_vfiprintf_r+0x1ee>
1000fcae:	4b5e      	ldr	r3, [pc, #376]	; (1000fe28 <_vfiprintf_r+0x22c>)
1000fcb0:	2b00      	cmp	r3, #0
1000fcb2:	d000      	beq.n	1000fcb6 <_vfiprintf_r+0xba>
1000fcb4:	e090      	b.n	1000fdd8 <_vfiprintf_r+0x1dc>
1000fcb6:	2207      	movs	r2, #7
1000fcb8:	9b05      	ldr	r3, [sp, #20]
1000fcba:	3307      	adds	r3, #7
1000fcbc:	4393      	bics	r3, r2
1000fcbe:	3308      	adds	r3, #8
1000fcc0:	9305      	str	r3, [sp, #20]
1000fcc2:	696b      	ldr	r3, [r5, #20]
1000fcc4:	9a03      	ldr	r2, [sp, #12]
1000fcc6:	189b      	adds	r3, r3, r2
1000fcc8:	616b      	str	r3, [r5, #20]
1000fcca:	9c02      	ldr	r4, [sp, #8]
1000fccc:	7823      	ldrb	r3, [r4, #0]
1000fcce:	2b00      	cmp	r3, #0
1000fcd0:	d104      	bne.n	1000fcdc <_vfiprintf_r+0xe0>
1000fcd2:	9b02      	ldr	r3, [sp, #8]
1000fcd4:	1ae3      	subs	r3, r4, r3
1000fcd6:	9304      	str	r3, [sp, #16]
1000fcd8:	d012      	beq.n	1000fd00 <_vfiprintf_r+0x104>
1000fcda:	e003      	b.n	1000fce4 <_vfiprintf_r+0xe8>
1000fcdc:	2b25      	cmp	r3, #37	; 0x25
1000fcde:	d0f8      	beq.n	1000fcd2 <_vfiprintf_r+0xd6>
1000fce0:	3401      	adds	r4, #1
1000fce2:	e7f3      	b.n	1000fccc <_vfiprintf_r+0xd0>
1000fce4:	9b04      	ldr	r3, [sp, #16]
1000fce6:	9a02      	ldr	r2, [sp, #8]
1000fce8:	0039      	movs	r1, r7
1000fcea:	0030      	movs	r0, r6
1000fcec:	f7ff ff73 	bl	1000fbd6 <__sfputs_r>
1000fcf0:	1c43      	adds	r3, r0, #1
1000fcf2:	d100      	bne.n	1000fcf6 <_vfiprintf_r+0xfa>
1000fcf4:	e086      	b.n	1000fe04 <_vfiprintf_r+0x208>
1000fcf6:	696a      	ldr	r2, [r5, #20]
1000fcf8:	9b04      	ldr	r3, [sp, #16]
1000fcfa:	4694      	mov	ip, r2
1000fcfc:	4463      	add	r3, ip
1000fcfe:	616b      	str	r3, [r5, #20]
1000fd00:	7823      	ldrb	r3, [r4, #0]
1000fd02:	2b00      	cmp	r3, #0
1000fd04:	d07e      	beq.n	1000fe04 <_vfiprintf_r+0x208>
1000fd06:	2201      	movs	r2, #1
1000fd08:	2300      	movs	r3, #0
1000fd0a:	4252      	negs	r2, r2
1000fd0c:	606a      	str	r2, [r5, #4]
1000fd0e:	a902      	add	r1, sp, #8
1000fd10:	3254      	adds	r2, #84	; 0x54
1000fd12:	1852      	adds	r2, r2, r1
1000fd14:	3401      	adds	r4, #1
1000fd16:	602b      	str	r3, [r5, #0]
1000fd18:	60eb      	str	r3, [r5, #12]
1000fd1a:	60ab      	str	r3, [r5, #8]
1000fd1c:	7013      	strb	r3, [r2, #0]
1000fd1e:	65ab      	str	r3, [r5, #88]	; 0x58
1000fd20:	7821      	ldrb	r1, [r4, #0]
1000fd22:	2205      	movs	r2, #5
1000fd24:	4841      	ldr	r0, [pc, #260]	; (1000fe2c <_vfiprintf_r+0x230>)
1000fd26:	f000 fb07 	bl	10010338 <memchr>
1000fd2a:	2800      	cmp	r0, #0
1000fd2c:	d008      	beq.n	1000fd40 <_vfiprintf_r+0x144>
1000fd2e:	4b3f      	ldr	r3, [pc, #252]	; (1000fe2c <_vfiprintf_r+0x230>)
1000fd30:	682a      	ldr	r2, [r5, #0]
1000fd32:	1ac0      	subs	r0, r0, r3
1000fd34:	2301      	movs	r3, #1
1000fd36:	4083      	lsls	r3, r0
1000fd38:	4313      	orrs	r3, r2
1000fd3a:	602b      	str	r3, [r5, #0]
1000fd3c:	3401      	adds	r4, #1
1000fd3e:	e7ef      	b.n	1000fd20 <_vfiprintf_r+0x124>
1000fd40:	682b      	ldr	r3, [r5, #0]
1000fd42:	06da      	lsls	r2, r3, #27
1000fd44:	d504      	bpl.n	1000fd50 <_vfiprintf_r+0x154>
1000fd46:	2253      	movs	r2, #83	; 0x53
1000fd48:	2120      	movs	r1, #32
1000fd4a:	a802      	add	r0, sp, #8
1000fd4c:	1812      	adds	r2, r2, r0
1000fd4e:	7011      	strb	r1, [r2, #0]
1000fd50:	071a      	lsls	r2, r3, #28
1000fd52:	d504      	bpl.n	1000fd5e <_vfiprintf_r+0x162>
1000fd54:	2253      	movs	r2, #83	; 0x53
1000fd56:	212b      	movs	r1, #43	; 0x2b
1000fd58:	a802      	add	r0, sp, #8
1000fd5a:	1812      	adds	r2, r2, r0
1000fd5c:	7011      	strb	r1, [r2, #0]
1000fd5e:	7822      	ldrb	r2, [r4, #0]
1000fd60:	2a2a      	cmp	r2, #42	; 0x2a
1000fd62:	d100      	bne.n	1000fd66 <_vfiprintf_r+0x16a>
1000fd64:	e77c      	b.n	1000fc60 <_vfiprintf_r+0x64>
1000fd66:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000fd68:	2000      	movs	r0, #0
1000fd6a:	210a      	movs	r1, #10
1000fd6c:	e005      	b.n	1000fd7a <_vfiprintf_r+0x17e>
1000fd6e:	4252      	negs	r2, r2
1000fd70:	60ea      	str	r2, [r5, #12]
1000fd72:	2202      	movs	r2, #2
1000fd74:	4313      	orrs	r3, r2
1000fd76:	602b      	str	r3, [r5, #0]
1000fd78:	e77a      	b.n	1000fc70 <_vfiprintf_r+0x74>
1000fd7a:	7822      	ldrb	r2, [r4, #0]
1000fd7c:	3a30      	subs	r2, #48	; 0x30
1000fd7e:	2a09      	cmp	r2, #9
1000fd80:	d804      	bhi.n	1000fd8c <_vfiprintf_r+0x190>
1000fd82:	434b      	muls	r3, r1
1000fd84:	3401      	adds	r4, #1
1000fd86:	189b      	adds	r3, r3, r2
1000fd88:	2001      	movs	r0, #1
1000fd8a:	e7f6      	b.n	1000fd7a <_vfiprintf_r+0x17e>
1000fd8c:	2800      	cmp	r0, #0
1000fd8e:	d100      	bne.n	1000fd92 <_vfiprintf_r+0x196>
1000fd90:	e76f      	b.n	1000fc72 <_vfiprintf_r+0x76>
1000fd92:	9309      	str	r3, [sp, #36]	; 0x24
1000fd94:	e76d      	b.n	1000fc72 <_vfiprintf_r+0x76>
1000fd96:	7863      	ldrb	r3, [r4, #1]
1000fd98:	2b2a      	cmp	r3, #42	; 0x2a
1000fd9a:	d10a      	bne.n	1000fdb2 <_vfiprintf_r+0x1b6>
1000fd9c:	9b05      	ldr	r3, [sp, #20]
1000fd9e:	3402      	adds	r4, #2
1000fda0:	1d1a      	adds	r2, r3, #4
1000fda2:	681b      	ldr	r3, [r3, #0]
1000fda4:	9205      	str	r2, [sp, #20]
1000fda6:	2b00      	cmp	r3, #0
1000fda8:	da01      	bge.n	1000fdae <_vfiprintf_r+0x1b2>
1000fdaa:	2301      	movs	r3, #1
1000fdac:	425b      	negs	r3, r3
1000fdae:	9307      	str	r3, [sp, #28]
1000fdb0:	e763      	b.n	1000fc7a <_vfiprintf_r+0x7e>
1000fdb2:	2300      	movs	r3, #0
1000fdb4:	200a      	movs	r0, #10
1000fdb6:	001a      	movs	r2, r3
1000fdb8:	3401      	adds	r4, #1
1000fdba:	606b      	str	r3, [r5, #4]
1000fdbc:	7821      	ldrb	r1, [r4, #0]
1000fdbe:	3930      	subs	r1, #48	; 0x30
1000fdc0:	2909      	cmp	r1, #9
1000fdc2:	d804      	bhi.n	1000fdce <_vfiprintf_r+0x1d2>
1000fdc4:	4342      	muls	r2, r0
1000fdc6:	3401      	adds	r4, #1
1000fdc8:	1852      	adds	r2, r2, r1
1000fdca:	2301      	movs	r3, #1
1000fdcc:	e7f6      	b.n	1000fdbc <_vfiprintf_r+0x1c0>
1000fdce:	2b00      	cmp	r3, #0
1000fdd0:	d100      	bne.n	1000fdd4 <_vfiprintf_r+0x1d8>
1000fdd2:	e752      	b.n	1000fc7a <_vfiprintf_r+0x7e>
1000fdd4:	9207      	str	r2, [sp, #28]
1000fdd6:	e750      	b.n	1000fc7a <_vfiprintf_r+0x7e>
1000fdd8:	ab05      	add	r3, sp, #20
1000fdda:	9300      	str	r3, [sp, #0]
1000fddc:	003a      	movs	r2, r7
1000fdde:	4b14      	ldr	r3, [pc, #80]	; (1000fe30 <_vfiprintf_r+0x234>)
1000fde0:	0029      	movs	r1, r5
1000fde2:	0030      	movs	r0, r6
1000fde4:	e000      	b.n	1000fde8 <_vfiprintf_r+0x1ec>
1000fde6:	bf00      	nop
1000fde8:	e007      	b.n	1000fdfa <_vfiprintf_r+0x1fe>
1000fdea:	ab05      	add	r3, sp, #20
1000fdec:	9300      	str	r3, [sp, #0]
1000fdee:	003a      	movs	r2, r7
1000fdf0:	4b0f      	ldr	r3, [pc, #60]	; (1000fe30 <_vfiprintf_r+0x234>)
1000fdf2:	0029      	movs	r1, r5
1000fdf4:	0030      	movs	r0, r6
1000fdf6:	f000 f88b 	bl	1000ff10 <_printf_i>
1000fdfa:	9003      	str	r0, [sp, #12]
1000fdfc:	9b03      	ldr	r3, [sp, #12]
1000fdfe:	3301      	adds	r3, #1
1000fe00:	d000      	beq.n	1000fe04 <_vfiprintf_r+0x208>
1000fe02:	e75e      	b.n	1000fcc2 <_vfiprintf_r+0xc6>
1000fe04:	89bb      	ldrh	r3, [r7, #12]
1000fe06:	065b      	lsls	r3, r3, #25
1000fe08:	d500      	bpl.n	1000fe0c <_vfiprintf_r+0x210>
1000fe0a:	e726      	b.n	1000fc5a <_vfiprintf_r+0x5e>
1000fe0c:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000fe0e:	b01f      	add	sp, #124	; 0x7c
1000fe10:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fe12:	46c0      	nop			; (mov r8, r8)
1000fe14:	10010ec0 	.word	0x10010ec0
1000fe18:	10010ee0 	.word	0x10010ee0
1000fe1c:	10010f00 	.word	0x10010f00
1000fe20:	10010f26 	.word	0x10010f26
1000fe24:	10010f2a 	.word	0x10010f2a
1000fe28:	00000000 	.word	0x00000000
1000fe2c:	10010f20 	.word	0x10010f20
1000fe30:	1000fbd7 	.word	0x1000fbd7

1000fe34 <_printf_common>:
1000fe34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fe36:	0017      	movs	r7, r2
1000fe38:	9301      	str	r3, [sp, #4]
1000fe3a:	688a      	ldr	r2, [r1, #8]
1000fe3c:	690b      	ldr	r3, [r1, #16]
1000fe3e:	9000      	str	r0, [sp, #0]
1000fe40:	000c      	movs	r4, r1
1000fe42:	4293      	cmp	r3, r2
1000fe44:	da00      	bge.n	1000fe48 <_printf_common+0x14>
1000fe46:	0013      	movs	r3, r2
1000fe48:	0022      	movs	r2, r4
1000fe4a:	603b      	str	r3, [r7, #0]
1000fe4c:	3243      	adds	r2, #67	; 0x43
1000fe4e:	7812      	ldrb	r2, [r2, #0]
1000fe50:	2a00      	cmp	r2, #0
1000fe52:	d001      	beq.n	1000fe58 <_printf_common+0x24>
1000fe54:	3301      	adds	r3, #1
1000fe56:	603b      	str	r3, [r7, #0]
1000fe58:	6823      	ldr	r3, [r4, #0]
1000fe5a:	069b      	lsls	r3, r3, #26
1000fe5c:	d502      	bpl.n	1000fe64 <_printf_common+0x30>
1000fe5e:	683b      	ldr	r3, [r7, #0]
1000fe60:	3302      	adds	r3, #2
1000fe62:	603b      	str	r3, [r7, #0]
1000fe64:	2506      	movs	r5, #6
1000fe66:	6823      	ldr	r3, [r4, #0]
1000fe68:	401d      	ands	r5, r3
1000fe6a:	d01e      	beq.n	1000feaa <_printf_common+0x76>
1000fe6c:	0023      	movs	r3, r4
1000fe6e:	3343      	adds	r3, #67	; 0x43
1000fe70:	781b      	ldrb	r3, [r3, #0]
1000fe72:	1e5a      	subs	r2, r3, #1
1000fe74:	4193      	sbcs	r3, r2
1000fe76:	6822      	ldr	r2, [r4, #0]
1000fe78:	0692      	lsls	r2, r2, #26
1000fe7a:	d51c      	bpl.n	1000feb6 <_printf_common+0x82>
1000fe7c:	2030      	movs	r0, #48	; 0x30
1000fe7e:	18e1      	adds	r1, r4, r3
1000fe80:	3143      	adds	r1, #67	; 0x43
1000fe82:	7008      	strb	r0, [r1, #0]
1000fe84:	0021      	movs	r1, r4
1000fe86:	1c5a      	adds	r2, r3, #1
1000fe88:	3145      	adds	r1, #69	; 0x45
1000fe8a:	7809      	ldrb	r1, [r1, #0]
1000fe8c:	18a2      	adds	r2, r4, r2
1000fe8e:	3243      	adds	r2, #67	; 0x43
1000fe90:	3302      	adds	r3, #2
1000fe92:	7011      	strb	r1, [r2, #0]
1000fe94:	e00f      	b.n	1000feb6 <_printf_common+0x82>
1000fe96:	0022      	movs	r2, r4
1000fe98:	2301      	movs	r3, #1
1000fe9a:	3219      	adds	r2, #25
1000fe9c:	9901      	ldr	r1, [sp, #4]
1000fe9e:	9800      	ldr	r0, [sp, #0]
1000fea0:	9e08      	ldr	r6, [sp, #32]
1000fea2:	47b0      	blx	r6
1000fea4:	1c43      	adds	r3, r0, #1
1000fea6:	d00e      	beq.n	1000fec6 <_printf_common+0x92>
1000fea8:	3501      	adds	r5, #1
1000feaa:	68e3      	ldr	r3, [r4, #12]
1000feac:	683a      	ldr	r2, [r7, #0]
1000feae:	1a9b      	subs	r3, r3, r2
1000feb0:	429d      	cmp	r5, r3
1000feb2:	dbf0      	blt.n	1000fe96 <_printf_common+0x62>
1000feb4:	e7da      	b.n	1000fe6c <_printf_common+0x38>
1000feb6:	0022      	movs	r2, r4
1000feb8:	9901      	ldr	r1, [sp, #4]
1000feba:	3243      	adds	r2, #67	; 0x43
1000febc:	9800      	ldr	r0, [sp, #0]
1000febe:	9d08      	ldr	r5, [sp, #32]
1000fec0:	47a8      	blx	r5
1000fec2:	1c43      	adds	r3, r0, #1
1000fec4:	d102      	bne.n	1000fecc <_printf_common+0x98>
1000fec6:	2001      	movs	r0, #1
1000fec8:	4240      	negs	r0, r0
1000feca:	e020      	b.n	1000ff0e <_printf_common+0xda>
1000fecc:	2306      	movs	r3, #6
1000fece:	6820      	ldr	r0, [r4, #0]
1000fed0:	68e1      	ldr	r1, [r4, #12]
1000fed2:	683a      	ldr	r2, [r7, #0]
1000fed4:	4003      	ands	r3, r0
1000fed6:	2500      	movs	r5, #0
1000fed8:	2b04      	cmp	r3, #4
1000feda:	d103      	bne.n	1000fee4 <_printf_common+0xb0>
1000fedc:	1a8d      	subs	r5, r1, r2
1000fede:	43eb      	mvns	r3, r5
1000fee0:	17db      	asrs	r3, r3, #31
1000fee2:	401d      	ands	r5, r3
1000fee4:	68a3      	ldr	r3, [r4, #8]
1000fee6:	6922      	ldr	r2, [r4, #16]
1000fee8:	4293      	cmp	r3, r2
1000feea:	dd01      	ble.n	1000fef0 <_printf_common+0xbc>
1000feec:	1a9b      	subs	r3, r3, r2
1000feee:	18ed      	adds	r5, r5, r3
1000fef0:	2700      	movs	r7, #0
1000fef2:	42bd      	cmp	r5, r7
1000fef4:	d00a      	beq.n	1000ff0c <_printf_common+0xd8>
1000fef6:	0022      	movs	r2, r4
1000fef8:	2301      	movs	r3, #1
1000fefa:	321a      	adds	r2, #26
1000fefc:	9901      	ldr	r1, [sp, #4]
1000fefe:	9800      	ldr	r0, [sp, #0]
1000ff00:	9e08      	ldr	r6, [sp, #32]
1000ff02:	47b0      	blx	r6
1000ff04:	1c43      	adds	r3, r0, #1
1000ff06:	d0de      	beq.n	1000fec6 <_printf_common+0x92>
1000ff08:	3701      	adds	r7, #1
1000ff0a:	e7f2      	b.n	1000fef2 <_printf_common+0xbe>
1000ff0c:	2000      	movs	r0, #0
1000ff0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1000ff10 <_printf_i>:
1000ff10:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ff12:	b08b      	sub	sp, #44	; 0x2c
1000ff14:	9206      	str	r2, [sp, #24]
1000ff16:	000a      	movs	r2, r1
1000ff18:	3243      	adds	r2, #67	; 0x43
1000ff1a:	9307      	str	r3, [sp, #28]
1000ff1c:	9005      	str	r0, [sp, #20]
1000ff1e:	9204      	str	r2, [sp, #16]
1000ff20:	7e0a      	ldrb	r2, [r1, #24]
1000ff22:	000c      	movs	r4, r1
1000ff24:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000ff26:	2a6e      	cmp	r2, #110	; 0x6e
1000ff28:	d100      	bne.n	1000ff2c <_printf_i+0x1c>
1000ff2a:	e0ab      	b.n	10010084 <_printf_i+0x174>
1000ff2c:	d811      	bhi.n	1000ff52 <_printf_i+0x42>
1000ff2e:	2a63      	cmp	r2, #99	; 0x63
1000ff30:	d022      	beq.n	1000ff78 <_printf_i+0x68>
1000ff32:	d809      	bhi.n	1000ff48 <_printf_i+0x38>
1000ff34:	2a00      	cmp	r2, #0
1000ff36:	d100      	bne.n	1000ff3a <_printf_i+0x2a>
1000ff38:	e0b5      	b.n	100100a6 <_printf_i+0x196>
1000ff3a:	2a58      	cmp	r2, #88	; 0x58
1000ff3c:	d000      	beq.n	1000ff40 <_printf_i+0x30>
1000ff3e:	e0c5      	b.n	100100cc <_printf_i+0x1bc>
1000ff40:	3145      	adds	r1, #69	; 0x45
1000ff42:	700a      	strb	r2, [r1, #0]
1000ff44:	4a81      	ldr	r2, [pc, #516]	; (1001014c <_printf_i+0x23c>)
1000ff46:	e04f      	b.n	1000ffe8 <_printf_i+0xd8>
1000ff48:	2a64      	cmp	r2, #100	; 0x64
1000ff4a:	d01d      	beq.n	1000ff88 <_printf_i+0x78>
1000ff4c:	2a69      	cmp	r2, #105	; 0x69
1000ff4e:	d01b      	beq.n	1000ff88 <_printf_i+0x78>
1000ff50:	e0bc      	b.n	100100cc <_printf_i+0x1bc>
1000ff52:	2a73      	cmp	r2, #115	; 0x73
1000ff54:	d100      	bne.n	1000ff58 <_printf_i+0x48>
1000ff56:	e0aa      	b.n	100100ae <_printf_i+0x19e>
1000ff58:	d809      	bhi.n	1000ff6e <_printf_i+0x5e>
1000ff5a:	2a6f      	cmp	r2, #111	; 0x6f
1000ff5c:	d029      	beq.n	1000ffb2 <_printf_i+0xa2>
1000ff5e:	2a70      	cmp	r2, #112	; 0x70
1000ff60:	d000      	beq.n	1000ff64 <_printf_i+0x54>
1000ff62:	e0b3      	b.n	100100cc <_printf_i+0x1bc>
1000ff64:	2220      	movs	r2, #32
1000ff66:	6809      	ldr	r1, [r1, #0]
1000ff68:	430a      	orrs	r2, r1
1000ff6a:	6022      	str	r2, [r4, #0]
1000ff6c:	e037      	b.n	1000ffde <_printf_i+0xce>
1000ff6e:	2a75      	cmp	r2, #117	; 0x75
1000ff70:	d01f      	beq.n	1000ffb2 <_printf_i+0xa2>
1000ff72:	2a78      	cmp	r2, #120	; 0x78
1000ff74:	d033      	beq.n	1000ffde <_printf_i+0xce>
1000ff76:	e0a9      	b.n	100100cc <_printf_i+0x1bc>
1000ff78:	000e      	movs	r6, r1
1000ff7a:	681a      	ldr	r2, [r3, #0]
1000ff7c:	3642      	adds	r6, #66	; 0x42
1000ff7e:	1d11      	adds	r1, r2, #4
1000ff80:	6019      	str	r1, [r3, #0]
1000ff82:	6813      	ldr	r3, [r2, #0]
1000ff84:	7033      	strb	r3, [r6, #0]
1000ff86:	e0a4      	b.n	100100d2 <_printf_i+0x1c2>
1000ff88:	6821      	ldr	r1, [r4, #0]
1000ff8a:	681a      	ldr	r2, [r3, #0]
1000ff8c:	0608      	lsls	r0, r1, #24
1000ff8e:	d406      	bmi.n	1000ff9e <_printf_i+0x8e>
1000ff90:	0649      	lsls	r1, r1, #25
1000ff92:	d504      	bpl.n	1000ff9e <_printf_i+0x8e>
1000ff94:	1d11      	adds	r1, r2, #4
1000ff96:	6019      	str	r1, [r3, #0]
1000ff98:	2300      	movs	r3, #0
1000ff9a:	5ed5      	ldrsh	r5, [r2, r3]
1000ff9c:	e002      	b.n	1000ffa4 <_printf_i+0x94>
1000ff9e:	1d11      	adds	r1, r2, #4
1000ffa0:	6019      	str	r1, [r3, #0]
1000ffa2:	6815      	ldr	r5, [r2, #0]
1000ffa4:	2d00      	cmp	r5, #0
1000ffa6:	da3b      	bge.n	10010020 <_printf_i+0x110>
1000ffa8:	232d      	movs	r3, #45	; 0x2d
1000ffaa:	9a04      	ldr	r2, [sp, #16]
1000ffac:	426d      	negs	r5, r5
1000ffae:	7013      	strb	r3, [r2, #0]
1000ffb0:	e036      	b.n	10010020 <_printf_i+0x110>
1000ffb2:	6821      	ldr	r1, [r4, #0]
1000ffb4:	681a      	ldr	r2, [r3, #0]
1000ffb6:	0608      	lsls	r0, r1, #24
1000ffb8:	d406      	bmi.n	1000ffc8 <_printf_i+0xb8>
1000ffba:	0649      	lsls	r1, r1, #25
1000ffbc:	d504      	bpl.n	1000ffc8 <_printf_i+0xb8>
1000ffbe:	6815      	ldr	r5, [r2, #0]
1000ffc0:	1d11      	adds	r1, r2, #4
1000ffc2:	6019      	str	r1, [r3, #0]
1000ffc4:	b2ad      	uxth	r5, r5
1000ffc6:	e002      	b.n	1000ffce <_printf_i+0xbe>
1000ffc8:	1d11      	adds	r1, r2, #4
1000ffca:	6019      	str	r1, [r3, #0]
1000ffcc:	6815      	ldr	r5, [r2, #0]
1000ffce:	4b5f      	ldr	r3, [pc, #380]	; (1001014c <_printf_i+0x23c>)
1000ffd0:	7e22      	ldrb	r2, [r4, #24]
1000ffd2:	9303      	str	r3, [sp, #12]
1000ffd4:	2708      	movs	r7, #8
1000ffd6:	2a6f      	cmp	r2, #111	; 0x6f
1000ffd8:	d01d      	beq.n	10010016 <_printf_i+0x106>
1000ffda:	270a      	movs	r7, #10
1000ffdc:	e01b      	b.n	10010016 <_printf_i+0x106>
1000ffde:	0022      	movs	r2, r4
1000ffe0:	2178      	movs	r1, #120	; 0x78
1000ffe2:	3245      	adds	r2, #69	; 0x45
1000ffe4:	7011      	strb	r1, [r2, #0]
1000ffe6:	4a5a      	ldr	r2, [pc, #360]	; (10010150 <_printf_i+0x240>)
1000ffe8:	6819      	ldr	r1, [r3, #0]
1000ffea:	9203      	str	r2, [sp, #12]
1000ffec:	1d08      	adds	r0, r1, #4
1000ffee:	6822      	ldr	r2, [r4, #0]
1000fff0:	6018      	str	r0, [r3, #0]
1000fff2:	680d      	ldr	r5, [r1, #0]
1000fff4:	0610      	lsls	r0, r2, #24
1000fff6:	d402      	bmi.n	1000fffe <_printf_i+0xee>
1000fff8:	0650      	lsls	r0, r2, #25
1000fffa:	d500      	bpl.n	1000fffe <_printf_i+0xee>
1000fffc:	b2ad      	uxth	r5, r5
1000fffe:	07d3      	lsls	r3, r2, #31
10010000:	d502      	bpl.n	10010008 <_printf_i+0xf8>
10010002:	2320      	movs	r3, #32
10010004:	431a      	orrs	r2, r3
10010006:	6022      	str	r2, [r4, #0]
10010008:	2710      	movs	r7, #16
1001000a:	2d00      	cmp	r5, #0
1001000c:	d103      	bne.n	10010016 <_printf_i+0x106>
1001000e:	2320      	movs	r3, #32
10010010:	6822      	ldr	r2, [r4, #0]
10010012:	439a      	bics	r2, r3
10010014:	6022      	str	r2, [r4, #0]
10010016:	0023      	movs	r3, r4
10010018:	2200      	movs	r2, #0
1001001a:	3343      	adds	r3, #67	; 0x43
1001001c:	701a      	strb	r2, [r3, #0]
1001001e:	e002      	b.n	10010026 <_printf_i+0x116>
10010020:	270a      	movs	r7, #10
10010022:	4b4a      	ldr	r3, [pc, #296]	; (1001014c <_printf_i+0x23c>)
10010024:	9303      	str	r3, [sp, #12]
10010026:	6863      	ldr	r3, [r4, #4]
10010028:	60a3      	str	r3, [r4, #8]
1001002a:	2b00      	cmp	r3, #0
1001002c:	db09      	blt.n	10010042 <_printf_i+0x132>
1001002e:	2204      	movs	r2, #4
10010030:	6821      	ldr	r1, [r4, #0]
10010032:	4391      	bics	r1, r2
10010034:	6021      	str	r1, [r4, #0]
10010036:	2d00      	cmp	r5, #0
10010038:	d105      	bne.n	10010046 <_printf_i+0x136>
1001003a:	9e04      	ldr	r6, [sp, #16]
1001003c:	2b00      	cmp	r3, #0
1001003e:	d011      	beq.n	10010064 <_printf_i+0x154>
10010040:	e07b      	b.n	1001013a <_printf_i+0x22a>
10010042:	2d00      	cmp	r5, #0
10010044:	d079      	beq.n	1001013a <_printf_i+0x22a>
10010046:	9e04      	ldr	r6, [sp, #16]
10010048:	0028      	movs	r0, r5
1001004a:	0039      	movs	r1, r7
1001004c:	f7fe f8ae 	bl	1000e1ac <__aeabi_uidivmod>
10010050:	9b03      	ldr	r3, [sp, #12]
10010052:	3e01      	subs	r6, #1
10010054:	5c5b      	ldrb	r3, [r3, r1]
10010056:	0028      	movs	r0, r5
10010058:	7033      	strb	r3, [r6, #0]
1001005a:	0039      	movs	r1, r7
1001005c:	f7fe f820 	bl	1000e0a0 <__aeabi_uidiv>
10010060:	1e05      	subs	r5, r0, #0
10010062:	d1f1      	bne.n	10010048 <_printf_i+0x138>
10010064:	2f08      	cmp	r7, #8
10010066:	d109      	bne.n	1001007c <_printf_i+0x16c>
10010068:	6823      	ldr	r3, [r4, #0]
1001006a:	07db      	lsls	r3, r3, #31
1001006c:	d506      	bpl.n	1001007c <_printf_i+0x16c>
1001006e:	6863      	ldr	r3, [r4, #4]
10010070:	6922      	ldr	r2, [r4, #16]
10010072:	4293      	cmp	r3, r2
10010074:	dc02      	bgt.n	1001007c <_printf_i+0x16c>
10010076:	2330      	movs	r3, #48	; 0x30
10010078:	3e01      	subs	r6, #1
1001007a:	7033      	strb	r3, [r6, #0]
1001007c:	9b04      	ldr	r3, [sp, #16]
1001007e:	1b9b      	subs	r3, r3, r6
10010080:	6123      	str	r3, [r4, #16]
10010082:	e02b      	b.n	100100dc <_printf_i+0x1cc>
10010084:	6809      	ldr	r1, [r1, #0]
10010086:	681a      	ldr	r2, [r3, #0]
10010088:	0608      	lsls	r0, r1, #24
1001008a:	d407      	bmi.n	1001009c <_printf_i+0x18c>
1001008c:	0649      	lsls	r1, r1, #25
1001008e:	d505      	bpl.n	1001009c <_printf_i+0x18c>
10010090:	1d11      	adds	r1, r2, #4
10010092:	6019      	str	r1, [r3, #0]
10010094:	6813      	ldr	r3, [r2, #0]
10010096:	8aa2      	ldrh	r2, [r4, #20]
10010098:	801a      	strh	r2, [r3, #0]
1001009a:	e004      	b.n	100100a6 <_printf_i+0x196>
1001009c:	1d11      	adds	r1, r2, #4
1001009e:	6019      	str	r1, [r3, #0]
100100a0:	6813      	ldr	r3, [r2, #0]
100100a2:	6962      	ldr	r2, [r4, #20]
100100a4:	601a      	str	r2, [r3, #0]
100100a6:	2300      	movs	r3, #0
100100a8:	9e04      	ldr	r6, [sp, #16]
100100aa:	6123      	str	r3, [r4, #16]
100100ac:	e016      	b.n	100100dc <_printf_i+0x1cc>
100100ae:	681a      	ldr	r2, [r3, #0]
100100b0:	1d11      	adds	r1, r2, #4
100100b2:	6019      	str	r1, [r3, #0]
100100b4:	6816      	ldr	r6, [r2, #0]
100100b6:	2100      	movs	r1, #0
100100b8:	6862      	ldr	r2, [r4, #4]
100100ba:	0030      	movs	r0, r6
100100bc:	f000 f93c 	bl	10010338 <memchr>
100100c0:	2800      	cmp	r0, #0
100100c2:	d001      	beq.n	100100c8 <_printf_i+0x1b8>
100100c4:	1b80      	subs	r0, r0, r6
100100c6:	6060      	str	r0, [r4, #4]
100100c8:	6863      	ldr	r3, [r4, #4]
100100ca:	e003      	b.n	100100d4 <_printf_i+0x1c4>
100100cc:	0026      	movs	r6, r4
100100ce:	3642      	adds	r6, #66	; 0x42
100100d0:	7032      	strb	r2, [r6, #0]
100100d2:	2301      	movs	r3, #1
100100d4:	6123      	str	r3, [r4, #16]
100100d6:	2300      	movs	r3, #0
100100d8:	9a04      	ldr	r2, [sp, #16]
100100da:	7013      	strb	r3, [r2, #0]
100100dc:	9b07      	ldr	r3, [sp, #28]
100100de:	aa09      	add	r2, sp, #36	; 0x24
100100e0:	9300      	str	r3, [sp, #0]
100100e2:	0021      	movs	r1, r4
100100e4:	9b06      	ldr	r3, [sp, #24]
100100e6:	9805      	ldr	r0, [sp, #20]
100100e8:	f7ff fea4 	bl	1000fe34 <_printf_common>
100100ec:	1c43      	adds	r3, r0, #1
100100ee:	d102      	bne.n	100100f6 <_printf_i+0x1e6>
100100f0:	2001      	movs	r0, #1
100100f2:	4240      	negs	r0, r0
100100f4:	e027      	b.n	10010146 <_printf_i+0x236>
100100f6:	6923      	ldr	r3, [r4, #16]
100100f8:	0032      	movs	r2, r6
100100fa:	9906      	ldr	r1, [sp, #24]
100100fc:	9805      	ldr	r0, [sp, #20]
100100fe:	9d07      	ldr	r5, [sp, #28]
10010100:	47a8      	blx	r5
10010102:	1c43      	adds	r3, r0, #1
10010104:	d0f4      	beq.n	100100f0 <_printf_i+0x1e0>
10010106:	6823      	ldr	r3, [r4, #0]
10010108:	2500      	movs	r5, #0
1001010a:	079b      	lsls	r3, r3, #30
1001010c:	d40f      	bmi.n	1001012e <_printf_i+0x21e>
1001010e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010110:	68e0      	ldr	r0, [r4, #12]
10010112:	4298      	cmp	r0, r3
10010114:	da17      	bge.n	10010146 <_printf_i+0x236>
10010116:	0018      	movs	r0, r3
10010118:	e015      	b.n	10010146 <_printf_i+0x236>
1001011a:	0022      	movs	r2, r4
1001011c:	2301      	movs	r3, #1
1001011e:	3219      	adds	r2, #25
10010120:	9906      	ldr	r1, [sp, #24]
10010122:	9805      	ldr	r0, [sp, #20]
10010124:	9e07      	ldr	r6, [sp, #28]
10010126:	47b0      	blx	r6
10010128:	1c43      	adds	r3, r0, #1
1001012a:	d0e1      	beq.n	100100f0 <_printf_i+0x1e0>
1001012c:	3501      	adds	r5, #1
1001012e:	68e3      	ldr	r3, [r4, #12]
10010130:	9a09      	ldr	r2, [sp, #36]	; 0x24
10010132:	1a9b      	subs	r3, r3, r2
10010134:	429d      	cmp	r5, r3
10010136:	dbf0      	blt.n	1001011a <_printf_i+0x20a>
10010138:	e7e9      	b.n	1001010e <_printf_i+0x1fe>
1001013a:	0026      	movs	r6, r4
1001013c:	9b03      	ldr	r3, [sp, #12]
1001013e:	3642      	adds	r6, #66	; 0x42
10010140:	781b      	ldrb	r3, [r3, #0]
10010142:	7033      	strb	r3, [r6, #0]
10010144:	e78e      	b.n	10010064 <_printf_i+0x154>
10010146:	b00b      	add	sp, #44	; 0x2c
10010148:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001014a:	46c0      	nop			; (mov r8, r8)
1001014c:	10010f31 	.word	0x10010f31
10010150:	10010f42 	.word	0x10010f42

10010154 <_putc_r>:
10010154:	b570      	push	{r4, r5, r6, lr}
10010156:	0006      	movs	r6, r0
10010158:	000d      	movs	r5, r1
1001015a:	0014      	movs	r4, r2
1001015c:	2800      	cmp	r0, #0
1001015e:	d004      	beq.n	1001016a <_putc_r+0x16>
10010160:	6983      	ldr	r3, [r0, #24]
10010162:	2b00      	cmp	r3, #0
10010164:	d101      	bne.n	1001016a <_putc_r+0x16>
10010166:	f7ff fb83 	bl	1000f870 <__sinit>
1001016a:	4b12      	ldr	r3, [pc, #72]	; (100101b4 <_putc_r+0x60>)
1001016c:	429c      	cmp	r4, r3
1001016e:	d101      	bne.n	10010174 <_putc_r+0x20>
10010170:	6874      	ldr	r4, [r6, #4]
10010172:	e008      	b.n	10010186 <_putc_r+0x32>
10010174:	4b10      	ldr	r3, [pc, #64]	; (100101b8 <_putc_r+0x64>)
10010176:	429c      	cmp	r4, r3
10010178:	d101      	bne.n	1001017e <_putc_r+0x2a>
1001017a:	68b4      	ldr	r4, [r6, #8]
1001017c:	e003      	b.n	10010186 <_putc_r+0x32>
1001017e:	4b0f      	ldr	r3, [pc, #60]	; (100101bc <_putc_r+0x68>)
10010180:	429c      	cmp	r4, r3
10010182:	d100      	bne.n	10010186 <_putc_r+0x32>
10010184:	68f4      	ldr	r4, [r6, #12]
10010186:	68a3      	ldr	r3, [r4, #8]
10010188:	3b01      	subs	r3, #1
1001018a:	60a3      	str	r3, [r4, #8]
1001018c:	2b00      	cmp	r3, #0
1001018e:	da05      	bge.n	1001019c <_putc_r+0x48>
10010190:	69a2      	ldr	r2, [r4, #24]
10010192:	4293      	cmp	r3, r2
10010194:	db08      	blt.n	100101a8 <_putc_r+0x54>
10010196:	b2eb      	uxtb	r3, r5
10010198:	2b0a      	cmp	r3, #10
1001019a:	d005      	beq.n	100101a8 <_putc_r+0x54>
1001019c:	6823      	ldr	r3, [r4, #0]
1001019e:	b2e8      	uxtb	r0, r5
100101a0:	1c5a      	adds	r2, r3, #1
100101a2:	6022      	str	r2, [r4, #0]
100101a4:	701d      	strb	r5, [r3, #0]
100101a6:	e004      	b.n	100101b2 <_putc_r+0x5e>
100101a8:	0022      	movs	r2, r4
100101aa:	0029      	movs	r1, r5
100101ac:	0030      	movs	r0, r6
100101ae:	f7ff f99d 	bl	1000f4ec <__swbuf_r>
100101b2:	bd70      	pop	{r4, r5, r6, pc}
100101b4:	10010ec0 	.word	0x10010ec0
100101b8:	10010ee0 	.word	0x10010ee0
100101bc:	10010f00 	.word	0x10010f00

100101c0 <_sbrk_r>:
100101c0:	2300      	movs	r3, #0
100101c2:	b570      	push	{r4, r5, r6, lr}
100101c4:	4c06      	ldr	r4, [pc, #24]	; (100101e0 <_sbrk_r+0x20>)
100101c6:	0005      	movs	r5, r0
100101c8:	0008      	movs	r0, r1
100101ca:	6023      	str	r3, [r4, #0]
100101cc:	f7f9 fa60 	bl	10009690 <_sbrk>
100101d0:	1c43      	adds	r3, r0, #1
100101d2:	d103      	bne.n	100101dc <_sbrk_r+0x1c>
100101d4:	6823      	ldr	r3, [r4, #0]
100101d6:	2b00      	cmp	r3, #0
100101d8:	d000      	beq.n	100101dc <_sbrk_r+0x1c>
100101da:	602b      	str	r3, [r5, #0]
100101dc:	bd70      	pop	{r4, r5, r6, pc}
100101de:	46c0      	nop			; (mov r8, r8)
100101e0:	10013c94 	.word	0x10013c94

100101e4 <__sread>:
100101e4:	b570      	push	{r4, r5, r6, lr}
100101e6:	000c      	movs	r4, r1
100101e8:	250e      	movs	r5, #14
100101ea:	5f49      	ldrsh	r1, [r1, r5]
100101ec:	f000 f8b0 	bl	10010350 <_read_r>
100101f0:	2800      	cmp	r0, #0
100101f2:	db03      	blt.n	100101fc <__sread+0x18>
100101f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
100101f6:	181b      	adds	r3, r3, r0
100101f8:	6563      	str	r3, [r4, #84]	; 0x54
100101fa:	e003      	b.n	10010204 <__sread+0x20>
100101fc:	89a2      	ldrh	r2, [r4, #12]
100101fe:	4b02      	ldr	r3, [pc, #8]	; (10010208 <__sread+0x24>)
10010200:	4013      	ands	r3, r2
10010202:	81a3      	strh	r3, [r4, #12]
10010204:	bd70      	pop	{r4, r5, r6, pc}
10010206:	46c0      	nop			; (mov r8, r8)
10010208:	ffffefff 	.word	0xffffefff

1001020c <__swrite>:
1001020c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001020e:	001f      	movs	r7, r3
10010210:	898b      	ldrh	r3, [r1, #12]
10010212:	0005      	movs	r5, r0
10010214:	000c      	movs	r4, r1
10010216:	0016      	movs	r6, r2
10010218:	05db      	lsls	r3, r3, #23
1001021a:	d505      	bpl.n	10010228 <__swrite+0x1c>
1001021c:	230e      	movs	r3, #14
1001021e:	5ec9      	ldrsh	r1, [r1, r3]
10010220:	2200      	movs	r2, #0
10010222:	2302      	movs	r3, #2
10010224:	f000 f874 	bl	10010310 <_lseek_r>
10010228:	89a2      	ldrh	r2, [r4, #12]
1001022a:	4b05      	ldr	r3, [pc, #20]	; (10010240 <__swrite+0x34>)
1001022c:	0028      	movs	r0, r5
1001022e:	4013      	ands	r3, r2
10010230:	81a3      	strh	r3, [r4, #12]
10010232:	0032      	movs	r2, r6
10010234:	230e      	movs	r3, #14
10010236:	5ee1      	ldrsh	r1, [r4, r3]
10010238:	003b      	movs	r3, r7
1001023a:	f000 f81f 	bl	1001027c <_write_r>
1001023e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010240:	ffffefff 	.word	0xffffefff

10010244 <__sseek>:
10010244:	b570      	push	{r4, r5, r6, lr}
10010246:	000c      	movs	r4, r1
10010248:	250e      	movs	r5, #14
1001024a:	5f49      	ldrsh	r1, [r1, r5]
1001024c:	f000 f860 	bl	10010310 <_lseek_r>
10010250:	89a3      	ldrh	r3, [r4, #12]
10010252:	1c42      	adds	r2, r0, #1
10010254:	d103      	bne.n	1001025e <__sseek+0x1a>
10010256:	4a05      	ldr	r2, [pc, #20]	; (1001026c <__sseek+0x28>)
10010258:	4013      	ands	r3, r2
1001025a:	81a3      	strh	r3, [r4, #12]
1001025c:	e004      	b.n	10010268 <__sseek+0x24>
1001025e:	2280      	movs	r2, #128	; 0x80
10010260:	0152      	lsls	r2, r2, #5
10010262:	4313      	orrs	r3, r2
10010264:	81a3      	strh	r3, [r4, #12]
10010266:	6560      	str	r0, [r4, #84]	; 0x54
10010268:	bd70      	pop	{r4, r5, r6, pc}
1001026a:	46c0      	nop			; (mov r8, r8)
1001026c:	ffffefff 	.word	0xffffefff

10010270 <__sclose>:
10010270:	b510      	push	{r4, lr}
10010272:	230e      	movs	r3, #14
10010274:	5ec9      	ldrsh	r1, [r1, r3]
10010276:	f000 f815 	bl	100102a4 <_close_r>
1001027a:	bd10      	pop	{r4, pc}

1001027c <_write_r>:
1001027c:	b570      	push	{r4, r5, r6, lr}
1001027e:	0005      	movs	r5, r0
10010280:	0008      	movs	r0, r1
10010282:	0011      	movs	r1, r2
10010284:	2200      	movs	r2, #0
10010286:	4c06      	ldr	r4, [pc, #24]	; (100102a0 <_write_r+0x24>)
10010288:	6022      	str	r2, [r4, #0]
1001028a:	001a      	movs	r2, r3
1001028c:	f7f9 f9d8 	bl	10009640 <_write>
10010290:	1c43      	adds	r3, r0, #1
10010292:	d103      	bne.n	1001029c <_write_r+0x20>
10010294:	6823      	ldr	r3, [r4, #0]
10010296:	2b00      	cmp	r3, #0
10010298:	d000      	beq.n	1001029c <_write_r+0x20>
1001029a:	602b      	str	r3, [r5, #0]
1001029c:	bd70      	pop	{r4, r5, r6, pc}
1001029e:	46c0      	nop			; (mov r8, r8)
100102a0:	10013c94 	.word	0x10013c94

100102a4 <_close_r>:
100102a4:	2300      	movs	r3, #0
100102a6:	b570      	push	{r4, r5, r6, lr}
100102a8:	4c06      	ldr	r4, [pc, #24]	; (100102c4 <_close_r+0x20>)
100102aa:	0005      	movs	r5, r0
100102ac:	0008      	movs	r0, r1
100102ae:	6023      	str	r3, [r4, #0]
100102b0:	f7f9 fa00 	bl	100096b4 <_close>
100102b4:	1c43      	adds	r3, r0, #1
100102b6:	d103      	bne.n	100102c0 <_close_r+0x1c>
100102b8:	6823      	ldr	r3, [r4, #0]
100102ba:	2b00      	cmp	r3, #0
100102bc:	d000      	beq.n	100102c0 <_close_r+0x1c>
100102be:	602b      	str	r3, [r5, #0]
100102c0:	bd70      	pop	{r4, r5, r6, pc}
100102c2:	46c0      	nop			; (mov r8, r8)
100102c4:	10013c94 	.word	0x10013c94

100102c8 <_fstat_r>:
100102c8:	2300      	movs	r3, #0
100102ca:	b570      	push	{r4, r5, r6, lr}
100102cc:	4c06      	ldr	r4, [pc, #24]	; (100102e8 <_fstat_r+0x20>)
100102ce:	0005      	movs	r5, r0
100102d0:	0008      	movs	r0, r1
100102d2:	0011      	movs	r1, r2
100102d4:	6023      	str	r3, [r4, #0]
100102d6:	f7f9 f9f1 	bl	100096bc <_fstat>
100102da:	1c43      	adds	r3, r0, #1
100102dc:	d103      	bne.n	100102e6 <_fstat_r+0x1e>
100102de:	6823      	ldr	r3, [r4, #0]
100102e0:	2b00      	cmp	r3, #0
100102e2:	d000      	beq.n	100102e6 <_fstat_r+0x1e>
100102e4:	602b      	str	r3, [r5, #0]
100102e6:	bd70      	pop	{r4, r5, r6, pc}
100102e8:	10013c94 	.word	0x10013c94

100102ec <_isatty_r>:
100102ec:	2300      	movs	r3, #0
100102ee:	b570      	push	{r4, r5, r6, lr}
100102f0:	4c06      	ldr	r4, [pc, #24]	; (1001030c <_isatty_r+0x20>)
100102f2:	0005      	movs	r5, r0
100102f4:	0008      	movs	r0, r1
100102f6:	6023      	str	r3, [r4, #0]
100102f8:	f7f9 f9e6 	bl	100096c8 <_isatty>
100102fc:	1c43      	adds	r3, r0, #1
100102fe:	d103      	bne.n	10010308 <_isatty_r+0x1c>
10010300:	6823      	ldr	r3, [r4, #0]
10010302:	2b00      	cmp	r3, #0
10010304:	d000      	beq.n	10010308 <_isatty_r+0x1c>
10010306:	602b      	str	r3, [r5, #0]
10010308:	bd70      	pop	{r4, r5, r6, pc}
1001030a:	46c0      	nop			; (mov r8, r8)
1001030c:	10013c94 	.word	0x10013c94

10010310 <_lseek_r>:
10010310:	b570      	push	{r4, r5, r6, lr}
10010312:	0005      	movs	r5, r0
10010314:	0008      	movs	r0, r1
10010316:	0011      	movs	r1, r2
10010318:	2200      	movs	r2, #0
1001031a:	4c06      	ldr	r4, [pc, #24]	; (10010334 <_lseek_r+0x24>)
1001031c:	6022      	str	r2, [r4, #0]
1001031e:	001a      	movs	r2, r3
10010320:	f7f9 f9d4 	bl	100096cc <_lseek>
10010324:	1c43      	adds	r3, r0, #1
10010326:	d103      	bne.n	10010330 <_lseek_r+0x20>
10010328:	6823      	ldr	r3, [r4, #0]
1001032a:	2b00      	cmp	r3, #0
1001032c:	d000      	beq.n	10010330 <_lseek_r+0x20>
1001032e:	602b      	str	r3, [r5, #0]
10010330:	bd70      	pop	{r4, r5, r6, pc}
10010332:	46c0      	nop			; (mov r8, r8)
10010334:	10013c94 	.word	0x10013c94

10010338 <memchr>:
10010338:	b2c9      	uxtb	r1, r1
1001033a:	1882      	adds	r2, r0, r2
1001033c:	4290      	cmp	r0, r2
1001033e:	d004      	beq.n	1001034a <memchr+0x12>
10010340:	7803      	ldrb	r3, [r0, #0]
10010342:	428b      	cmp	r3, r1
10010344:	d002      	beq.n	1001034c <memchr+0x14>
10010346:	3001      	adds	r0, #1
10010348:	e7f8      	b.n	1001033c <memchr+0x4>
1001034a:	2000      	movs	r0, #0
1001034c:	4770      	bx	lr
	...

10010350 <_read_r>:
10010350:	b570      	push	{r4, r5, r6, lr}
10010352:	0005      	movs	r5, r0
10010354:	0008      	movs	r0, r1
10010356:	0011      	movs	r1, r2
10010358:	2200      	movs	r2, #0
1001035a:	4c06      	ldr	r4, [pc, #24]	; (10010374 <_read_r+0x24>)
1001035c:	6022      	str	r2, [r4, #0]
1001035e:	001a      	movs	r2, r3
10010360:	f7f9 f94e 	bl	10009600 <_read>
10010364:	1c43      	adds	r3, r0, #1
10010366:	d103      	bne.n	10010370 <_read_r+0x20>
10010368:	6823      	ldr	r3, [r4, #0]
1001036a:	2b00      	cmp	r3, #0
1001036c:	d000      	beq.n	10010370 <_read_r+0x20>
1001036e:	602b      	str	r3, [r5, #0]
10010370:	bd70      	pop	{r4, r5, r6, pc}
10010372:	46c0      	nop			; (mov r8, r8)
10010374:	10013c94 	.word	0x10013c94

10010378 <__aeabi_lmul>:
10010378:	b5f0      	push	{r4, r5, r6, r7, lr}
1001037a:	464f      	mov	r7, r9
1001037c:	4646      	mov	r6, r8
1001037e:	b4c0      	push	{r6, r7}
10010380:	0416      	lsls	r6, r2, #16
10010382:	0c36      	lsrs	r6, r6, #16
10010384:	4699      	mov	r9, r3
10010386:	0033      	movs	r3, r6
10010388:	0405      	lsls	r5, r0, #16
1001038a:	0c2c      	lsrs	r4, r5, #16
1001038c:	0c07      	lsrs	r7, r0, #16
1001038e:	0c15      	lsrs	r5, r2, #16
10010390:	4363      	muls	r3, r4
10010392:	437e      	muls	r6, r7
10010394:	436f      	muls	r7, r5
10010396:	4365      	muls	r5, r4
10010398:	0c1c      	lsrs	r4, r3, #16
1001039a:	19ad      	adds	r5, r5, r6
1001039c:	1964      	adds	r4, r4, r5
1001039e:	469c      	mov	ip, r3
100103a0:	42a6      	cmp	r6, r4
100103a2:	d903      	bls.n	100103ac <__aeabi_lmul+0x34>
100103a4:	2380      	movs	r3, #128	; 0x80
100103a6:	025b      	lsls	r3, r3, #9
100103a8:	4698      	mov	r8, r3
100103aa:	4447      	add	r7, r8
100103ac:	4663      	mov	r3, ip
100103ae:	0c25      	lsrs	r5, r4, #16
100103b0:	19ef      	adds	r7, r5, r7
100103b2:	041d      	lsls	r5, r3, #16
100103b4:	464b      	mov	r3, r9
100103b6:	434a      	muls	r2, r1
100103b8:	4343      	muls	r3, r0
100103ba:	0c2d      	lsrs	r5, r5, #16
100103bc:	0424      	lsls	r4, r4, #16
100103be:	1964      	adds	r4, r4, r5
100103c0:	1899      	adds	r1, r3, r2
100103c2:	19c9      	adds	r1, r1, r7
100103c4:	0020      	movs	r0, r4
100103c6:	bc0c      	pop	{r2, r3}
100103c8:	4690      	mov	r8, r2
100103ca:	4699      	mov	r9, r3
100103cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100103ce:	46c0      	nop			; (mov r8, r8)
100103d0:	1000898c 	.word	0x1000898c
100103d4:	1000899a 	.word	0x1000899a
100103d8:	100089a8 	.word	0x100089a8
100103dc:	100089b6 	.word	0x100089b6
100103e0:	100089c4 	.word	0x100089c4
100103e4:	100089d2 	.word	0x100089d2
100103e8:	100089e0 	.word	0x100089e0
100103ec:	100089f0 	.word	0x100089f0
100103f0:	10008a00 	.word	0x10008a00
100103f4:	10008a10 	.word	0x10008a10
100103f8:	10008a20 	.word	0x10008a20
100103fc:	10008a30 	.word	0x10008a30
10010400:	10008a40 	.word	0x10008a40
10010404:	10008a50 	.word	0x10008a50
10010408:	10008a60 	.word	0x10008a60
1001040c:	10008a70 	.word	0x10008a70
10010410:	10008a80 	.word	0x10008a80
10010414:	10008a90 	.word	0x10008a90
10010418:	10008aa0 	.word	0x10008aa0
1001041c:	10008ab0 	.word	0x10008ab0
10010420:	10008ac0 	.word	0x10008ac0
10010424:	10008ad0 	.word	0x10008ad0
10010428:	10008ae0 	.word	0x10008ae0
1001042c:	10008af0 	.word	0x10008af0
10010430:	10008b00 	.word	0x10008b00
10010434:	10008b10 	.word	0x10008b10
10010438:	10008b20 	.word	0x10008b20
1001043c:	10008b30 	.word	0x10008b30
10010440:	10008b3e 	.word	0x10008b3e
10010444:	10008b4c 	.word	0x10008b4c
10010448:	10008b5a 	.word	0x10008b5a
1001044c:	10008b68 	.word	0x10008b68
10010450:	10008b76 	.word	0x10008b76
10010454:	10008b84 	.word	0x10008b84
10010458:	10008b92 	.word	0x10008b92
1001045c:	10008ba0 	.word	0x10008ba0
10010460:	10008bb0 	.word	0x10008bb0
10010464:	10008bc0 	.word	0x10008bc0
10010468:	10008bd0 	.word	0x10008bd0
1001046c:	10008be0 	.word	0x10008be0
10010470:	10008bf0 	.word	0x10008bf0
10010474:	10008c00 	.word	0x10008c00
10010478:	10008c10 	.word	0x10008c10
1001047c:	10008c20 	.word	0x10008c20
10010480:	10008c30 	.word	0x10008c30
10010484:	10008c40 	.word	0x10008c40
10010488:	10008c50 	.word	0x10008c50
1001048c:	10008c60 	.word	0x10008c60
10010490:	10008c70 	.word	0x10008c70
10010494:	10008c80 	.word	0x10008c80
10010498:	10008c90 	.word	0x10008c90
1001049c:	10008ca0 	.word	0x10008ca0
100104a0:	10008cae 	.word	0x10008cae
100104a4:	10008cbc 	.word	0x10008cbc
100104a8:	10008cfc 	.word	0x10008cfc
100104ac:	10008d24 	.word	0x10008d24
100104b0:	10008d4c 	.word	0x10008d4c
100104b4:	10008d74 	.word	0x10008d74
100104b8:	10008fb4 	.word	0x10008fb4
100104bc:	10008da4 	.word	0x10008da4
100104c0:	10008dbc 	.word	0x10008dbc
100104c4:	10008e34 	.word	0x10008e34
100104c8:	10008e4c 	.word	0x10008e4c
100104cc:	10008dd4 	.word	0x10008dd4
100104d0:	10008dec 	.word	0x10008dec
100104d4:	10008e04 	.word	0x10008e04
100104d8:	10008e1c 	.word	0x10008e1c
100104dc:	10008e64 	.word	0x10008e64
100104e0:	10009128 	.word	0x10009128
100104e4:	10009128 	.word	0x10009128
100104e8:	10009128 	.word	0x10009128
100104ec:	10009128 	.word	0x10009128
100104f0:	10009128 	.word	0x10009128
100104f4:	10009128 	.word	0x10009128
100104f8:	10009128 	.word	0x10009128
100104fc:	10009128 	.word	0x10009128
10010500:	10008f0c 	.word	0x10008f0c
10010504:	10008f24 	.word	0x10008f24
10010508:	10008f3c 	.word	0x10008f3c
1001050c:	10008fca 	.word	0x10008fca
10010510:	10008e94 	.word	0x10008e94
10010514:	10009128 	.word	0x10009128
10010518:	10009128 	.word	0x10009128
1001051c:	10009128 	.word	0x10009128
10010520:	10009128 	.word	0x10009128
10010524:	10009128 	.word	0x10009128
10010528:	10009128 	.word	0x10009128
1001052c:	10008f54 	.word	0x10008f54
10010530:	10008f6c 	.word	0x10008f6c
10010534:	10008f84 	.word	0x10008f84
10010538:	10008f9c 	.word	0x10008f9c
1001053c:	10009128 	.word	0x10009128
10010540:	100090e0 	.word	0x100090e0
10010544:	100090f8 	.word	0x100090f8
10010548:	10009128 	.word	0x10009128
1001054c:	10009128 	.word	0x10009128
10010550:	10008ff6 	.word	0x10008ff6
10010554:	1000900c 	.word	0x1000900c
10010558:	10009022 	.word	0x10009022
1001055c:	10009038 	.word	0x10009038
10010560:	10009128 	.word	0x10009128
10010564:	10009128 	.word	0x10009128
10010568:	10009128 	.word	0x10009128
1001056c:	10009128 	.word	0x10009128
10010570:	10009128 	.word	0x10009128
10010574:	10009128 	.word	0x10009128
10010578:	10009128 	.word	0x10009128
1001057c:	10009128 	.word	0x10009128
10010580:	10008ce8 	.word	0x10008ce8
10010584:	10008d10 	.word	0x10008d10
10010588:	10008d38 	.word	0x10008d38
1001058c:	10008d60 	.word	0x10008d60
10010590:	10008d8c 	.word	0x10008d8c
10010594:	10008e7c 	.word	0x10008e7c
10010598:	10008eac 	.word	0x10008eac
1001059c:	10008ec4 	.word	0x10008ec4
100105a0:	10008edc 	.word	0x10008edc
100105a4:	10008ef4 	.word	0x10008ef4
100105a8:	10008fe0 	.word	0x10008fe0
100105ac:	1000904e 	.word	0x1000904e
100105b0:	100090c8 	.word	0x100090c8
100105b4:	10009110 	.word	0x10009110
100105b8:	10009790 	.word	0x10009790
100105bc:	10009792 	.word	0x10009792
100105c0:	10009778 	.word	0x10009778
100105c4:	10009778 	.word	0x10009778
100105c8:	10009778 	.word	0x10009778
100105cc:	10009790 	.word	0x10009790
100105d0:	10009778 	.word	0x10009778
100105d4:	10009778 	.word	0x10009778
100105d8:	10009fde 	.word	0x10009fde
100105dc:	1000a052 	.word	0x1000a052
100105e0:	10009fc6 	.word	0x10009fc6
100105e4:	1000a058 	.word	0x1000a058
100105e8:	10009fcc 	.word	0x10009fcc
100105ec:	10009fd2 	.word	0x10009fd2
100105f0:	10009fd8 	.word	0x10009fd8
100105f4:	1000a6b0 	.word	0x1000a6b0
100105f8:	1000a6b0 	.word	0x1000a6b0
100105fc:	1000a6b0 	.word	0x1000a6b0
10010600:	1000a6b0 	.word	0x1000a6b0
10010604:	1000a6b0 	.word	0x1000a6b0
10010608:	1000a6b0 	.word	0x1000a6b0
1001060c:	1000a6b0 	.word	0x1000a6b0
10010610:	1000a6b0 	.word	0x1000a6b0
10010614:	1000a6b0 	.word	0x1000a6b0
10010618:	1000a6b0 	.word	0x1000a6b0
1001061c:	1000a6b0 	.word	0x1000a6b0
10010620:	1000a6b0 	.word	0x1000a6b0
10010624:	1000a6b0 	.word	0x1000a6b0
10010628:	1000a6b0 	.word	0x1000a6b0
1001062c:	1000a6b0 	.word	0x1000a6b0
10010630:	1000a6b0 	.word	0x1000a6b0
10010634:	1000a6b0 	.word	0x1000a6b0
10010638:	1000a6b0 	.word	0x1000a6b0
1001063c:	1000a6b0 	.word	0x1000a6b0
10010640:	1000a6ce 	.word	0x1000a6ce
10010644:	1000a6ce 	.word	0x1000a6ce
10010648:	1000a6ce 	.word	0x1000a6ce
1001064c:	1000a6ce 	.word	0x1000a6ce
10010650:	1000a6ce 	.word	0x1000a6ce
10010654:	1000a6ce 	.word	0x1000a6ce
10010658:	1000a6ce 	.word	0x1000a6ce
1001065c:	1000a6ce 	.word	0x1000a6ce
10010660:	1000a6ce 	.word	0x1000a6ce
10010664:	1000a6ce 	.word	0x1000a6ce
10010668:	1000a6f0 	.word	0x1000a6f0
1001066c:	1000a6f0 	.word	0x1000a6f0
10010670:	1000a6f0 	.word	0x1000a6f0
10010674:	1000a6f0 	.word	0x1000a6f0
10010678:	1000a6f0 	.word	0x1000a6f0
1001067c:	1000a6f0 	.word	0x1000a6f0
10010680:	1000a6f0 	.word	0x1000a6f0
10010684:	1000a6f0 	.word	0x1000a6f0
10010688:	1000a6f0 	.word	0x1000a6f0
1001068c:	1000a6f0 	.word	0x1000a6f0
10010690:	1000a712 	.word	0x1000a712
10010694:	1000a712 	.word	0x1000a712
10010698:	1000a712 	.word	0x1000a712
1001069c:	1000a712 	.word	0x1000a712
100106a0:	1000a712 	.word	0x1000a712
100106a4:	1000a712 	.word	0x1000a712
100106a8:	1000a72c 	.word	0x1000a72c
100106ac:	1000a72c 	.word	0x1000a72c
100106b0:	1000a72c 	.word	0x1000a72c
100106b4:	1000a72c 	.word	0x1000a72c
100106b8:	1000a72c 	.word	0x1000a72c
100106bc:	1000a72c 	.word	0x1000a72c
100106c0:	1000a72c 	.word	0x1000a72c
100106c4:	1000a72c 	.word	0x1000a72c
100106c8:	1000a72c 	.word	0x1000a72c
100106cc:	1000a746 	.word	0x1000a746
100106d0:	1000a746 	.word	0x1000a746
100106d4:	1000a768 	.word	0x1000a768
100106d8:	1000a768 	.word	0x1000a768
100106dc:	1000a782 	.word	0x1000a782
100106e0:	1000a768 	.word	0x1000a768
100106e4:	34333231 	.word	0x34333231
100106e8:	00003635 	.word	0x00003635
100106ec:	efcdab00 	.word	0xefcdab00
100106f0:	00efcdab 	.word	0x00efcdab
100106f4:	b2d60600 	.word	0xb2d60600
100106f8:	f8f005f0 	.word	0xf8f005f0
100106fc:	00000000 	.word	0x00000000

10010700 <ble_mgr_gatt_server_handle>:
	...
10010718:	100096d5 10009711 100096d9 00000000     ................
10010728:	0000000d 6e616353 676e696e 61662020     ....Scanning  fa
10010738:	64656c69 00000000 2055544d 6e616843     iled....MTU Chan
10010748:	46206567 656c6961 43202c64 656e6e6f     ge Failed, Conne
10010758:	6f697463 6148206e 656c646e 2c64253a     ction Handle:%d,
10010768:	65704f20 69746172 253a6e6f 00000064      Operation:%d...
10010778:	69766544 64206563 6f637369 63656e6e     Device disconnec
10010788:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
10010798:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
100107a8:	72636e45 69747079 66206e6f 656c6961     Encryption faile
100107b8:	00000064 72636e45 69747079 63206e6f     d...Encryption c
100107c8:	6c706d6f 64657465 63757320 73736563     ompleted success
100107d8:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
100107e8:	6e206563 6620746f 646e756f 636e6520     ce not found enc
100107f8:	74707972 206e6f69 6f666e69 00000000     ryption info....
10010808:	6f666e49 78616d3a 6d756d69 2e6f6e20     Info:maximum no.
10010818:	7320666f 206e6163 69766564 72206563     of scan device r
10010828:	68636165 2e2e6465 6f74532e 6e697070     eached...Stoppin
10010838:	63532067 00006e61 6c696146 74206465     g Scan..Failed t
10010848:	7473206f 7320706f 6e6e6163 00676e69     o stop scanning.
10010858:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
10010868:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
10010878:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
10010888:	46207473 656c6961 00000064 72696150     st Failed...Pair
10010898:	20676e69 636f7270 72756465 6f632065     ing procedure co
100108a8:	656c706d 20646574 63637573 66737365     mpleted successf
100108b8:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
100108c8:	6e206563 6620746f 646e756f 206f7420     ce not found to 
100108d8:	726f7473 68742065 61702065 6e697269     store the pairin
100108e8:	6e692067 00006f66 72636e45 69747079     g info..Encrypti
100108f8:	4e206e6f 7320746f 74726174 00006465     on Not started..
10010908:	76616c53 65532065 69727563 52207974     Slave Security R
10010918:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10010928:	206e6f69 6c696146 00006465 72696150     ion Failed..Pair
10010938:	71655220 74736575 41202d20 65687475      Request - Authe
10010948:	6369746e 6f697461 6146206e 64656c69     ntication Failed
10010958:	00000000 65746e45 68742072 61502065     ....Enter the Pa
10010968:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
10010978:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
10010988:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
10010998:	6e697463 2e2e2067 0000002e 61656c50     cting ......Plea
100109a8:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
100109b8:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
100109c8:	206e6f28 6568746f 65442072 65636976     (on other Device
100109d8:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
100109e8:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
100109f8:	74616546 20657275 20746f4e 70707573     Feature Not supp
10010a08:	6574726f 00000064 65746e45 20646572     orted...Entered 
10010a18:	73736150 646f632d 00003a65 72696150     Pass-code:..Pair
10010a28:	20676e69 6f666e69 74616d72 206e6f69     ing information 
10010a38:	7020666f 20726565 69766564 69206563     of peer device i
10010a48:	6f6e2073 76612074 616c6961 2e656c62     s not available.
10010a58:	00000000 61656c50 75206573 6961706e     ....Please unpai
10010a68:	68742072 65642065 65636976 6f726620     r the device fro
10010a78:	6570206d 64207265 63697665 6f6d2865     m peer device(mo
10010a88:	656c6962 65732029 6e697474 6d207367     bile) settings m
10010a98:	20756e65 20646e61 72617473 61702074     enu and start pa
10010aa8:	6e697269 67612067 006e6961 72636e45     iring again.Encr
10010ab8:	69747079 52206e6f 65757165 52207473     yption Request R
10010ac8:	796c7065 69614620 0064656c 74696e49     eply Failed.Init
10010ad8:	696c6169 676e697a 4d415320 00313142     ializing SAMB11.
10010ae8:	424d4153 49203131 6974696e 7a696c61     SAMB11 Initializ
10010af8:	6f697461 6166206e 64656c69 00000000     ation failed....
10010b08:	61656c50 63206573 6b636568 65687420     Please check the
10010b18:	776f7020 61207265 6320646e 656e6e6f      power and conne
10010b28:	6f697463 202f206e 64726168 65726177     ction / hardware
10010b38:	6e6f6320 7463656e 0000726f 454d5441      connector..ATME
10010b48:	4c422d4c 00000045 69766544 6e206563     L-BLE...Device n
10010b58:	20656d61 20746573 6c696166 00006465     ame set failed..
10010b68:	61204442 65726464 67207373 66207465     BD address get f
10010b78:	656c6961 00000064 41204442 65726464     ailed...BD Addre
10010b88:	303a7373 32302578 32302558 32302558     ss:0x%02X%02X%02
10010b98:	32302558 32302558 32302558 41202c58     X%02X%02X%02X, A
10010ba8:	65726464 54207373 3a657079 00006425     ddress Type:%d..
10010bb8:	20746553 20454c42 69766544 63206563     Set BLE Device c
10010bc8:	69666e6f 61727567 6e6f6974 69616620     onfiguration fai
10010bd8:	0064656c 20746553 20454c42 69766544     led.Set BLE Devi
10010be8:	41206563 65726464 66207373 656c6961     ce Address faile
10010bf8:	00000064 6e616353 676e696e 502e2e2e     d...Scanning...P
10010c08:	7361656c 61772065 2e2e7469 0000002e     lease wait......
10010c18:	76616c53 65732065 69727563 72207974     Slave security r
10010c28:	65757165 66207473 656c6961 00000064     equest failed...
10010c38:	6e6e6f43 65746365 6f742064 65657020     Connected to pee
10010c48:	65642072 65636976 74697720 64612068     r device with ad
10010c58:	73657264 78302073 78323025 78323025     dress 0x%02x%02x
10010c68:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
10010c78:	00000000 6e6e6f43 69746365 48206e6f     ....Connection H
10010c88:	6c646e61 64252065 00000000 6f736552     andle %d....Reso
10010c98:	6e69766c 61522067 6d6f646e 64646120     lving Random add
10010ca8:	73736572 69616620 2a64656c 0000002a     ress failed**...
10010cb8:	2078614d 626d756e 6f207265 6f632066     Max number of co
10010cc8:	63656e6e 6e6f6974 61657220 64656863     nnection reached
10010cd8:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
10010ce8:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
10010cf8:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
10010d08:	64656c69 53202d20 75746174 25203a73     iled - Status: %
10010d18:	00000064 20454c42 65766441 73697472     d...BLE Advertis
10010d28:	6e656d65 61642074 73206174 66207465     ement data set f
10010d38:	656c6961 00000064                       ailed...

10010d40 <ble_mgr_gap_handle>:
10010d40:	100096d1 1000988d 100096e9 00000000     ................
10010d50:	00000000 1000a379 10009741 100096e5     ....y...A.......
10010d60:	10009a2d 1000990d 10009c31 10009a45     -.......1...E...
10010d70:	10009d85 10009ec9 100097c9 1000a5b5     ................
	...

10010d8c <startup_template_app_gap_cb>:
	...
10010da4:	1000b439 00000000 00000000 1000b3bd     9...............
	...
10010dc4:	1000b3bd 00000000 00000000 00000000     ................
10010dd4:	00000000                                ....

10010dd8 <startup_template_app_gatt_server_cb>:
10010dd8:	1000b3c1 00000000 1000b3cd 00000000     ................
	...
10010e00:	20454c42 72617453 20646574 65766441     BLE Started Adve
10010e10:	73697472 6e656d65 00000074 20454c42     rtisement...BLE 
10010e20:	65766441 73697472 6e656d65 74732074     Advertisement st
10010e30:	20747261 6c696146 00006465 74696e49     art Failed..Init
10010e40:	696c6169 676e697a 454c4220 70704120     ializing BLE App
10010e50:	6163696c 6e6f6974 00000000 656d7441     lication....Atme
10010e60:	6f43206c 002e7072                                l Corp.

10010e67 <CSWTCH.47>:
10010e67:	03010300 03030303 03030303 00020303     ................
10010e77:	00e3e400 00e2a410 00e2a410 00e2a210     ................
10010e87:	00e3bc10 00e3bc10 00e3ae10 00e2a210     ................
10010e97:	00e3bc10 00e3ae10 00e3bc10 00e2a210     ................
10010ea7:	00e3c410 00e3c410 00e3c410 00e5c410     ................
10010eb7:	00004310 010f7c00                                .C...

10010ebc <_global_impure_ptr>:
10010ebc:	10010f7c                                |...

10010ec0 <__sf_fake_stdin>:
	...

10010ee0 <__sf_fake_stdout>:
	...

10010f00 <__sf_fake_stderr>:
	...
10010f20:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10010f30:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10010f40:	31300046 35343332 39383736 64636261     F.0123456789abcd
10010f50:	00006665                                ef..

10010f54 <_init>:
10010f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010f56:	46c0      	nop			; (mov r8, r8)
10010f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
10010f5a:	bc08      	pop	{r3}
10010f5c:	469e      	mov	lr, r3
10010f5e:	4770      	bx	lr

10010f60 <__init_array_start>:
10010f60:	100080b1 	.word	0x100080b1

10010f64 <_fini>:
10010f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010f66:	46c0      	nop			; (mov r8, r8)
10010f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
10010f6a:	bc08      	pop	{r3}
10010f6c:	469e      	mov	lr, r3
10010f6e:	4770      	bx	lr

10010f70 <__fini_array_start>:
10010f70:	10008089 	.word	0x10008089
